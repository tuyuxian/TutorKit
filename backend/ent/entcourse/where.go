// Code generated by ent, DO NOT EDIT.

package entcourse

import (
	"backend/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// CourseUrl applies equality check predicate on the "courseUrl" field. It's identical to CourseUrlEQ.
func CourseUrl(v string) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCourseUrl), v))
	})
}

// PaymentAmount applies equality check predicate on the "paymentAmount" field. It's identical to PaymentAmountEQ.
func PaymentAmount(v float64) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentAmount), v))
	})
}

// StartDate applies equality check predicate on the "startDate" field. It's identical to StartDateEQ.
func StartDate(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartDate), v))
	})
}

// EndDate applies equality check predicate on the "endDate" field. It's identical to EndDateEQ.
func EndDate(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndDate), v))
	})
}

// Monday applies equality check predicate on the "monday" field. It's identical to MondayEQ.
func Monday(v bool) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMonday), v))
	})
}

// Tuesday applies equality check predicate on the "tuesday" field. It's identical to TuesdayEQ.
func Tuesday(v bool) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTuesday), v))
	})
}

// Wednesday applies equality check predicate on the "wednesday" field. It's identical to WednesdayEQ.
func Wednesday(v bool) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWednesday), v))
	})
}

// Thursday applies equality check predicate on the "thursday" field. It's identical to ThursdayEQ.
func Thursday(v bool) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThursday), v))
	})
}

// Friday applies equality check predicate on the "friday" field. It's identical to FridayEQ.
func Friday(v bool) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFriday), v))
	})
}

// Saturday applies equality check predicate on the "saturday" field. It's identical to SaturdayEQ.
func Saturday(v bool) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSaturday), v))
	})
}

// Sunday applies equality check predicate on the "sunday" field. It's identical to SundayEQ.
func Sunday(v bool) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSunday), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.EntCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.EntCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// CourseUrlEQ applies the EQ predicate on the "courseUrl" field.
func CourseUrlEQ(v string) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCourseUrl), v))
	})
}

// CourseUrlNEQ applies the NEQ predicate on the "courseUrl" field.
func CourseUrlNEQ(v string) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCourseUrl), v))
	})
}

// CourseUrlIn applies the In predicate on the "courseUrl" field.
func CourseUrlIn(vs ...string) predicate.EntCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCourseUrl), v...))
	})
}

// CourseUrlNotIn applies the NotIn predicate on the "courseUrl" field.
func CourseUrlNotIn(vs ...string) predicate.EntCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCourseUrl), v...))
	})
}

// CourseUrlGT applies the GT predicate on the "courseUrl" field.
func CourseUrlGT(v string) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCourseUrl), v))
	})
}

// CourseUrlGTE applies the GTE predicate on the "courseUrl" field.
func CourseUrlGTE(v string) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCourseUrl), v))
	})
}

// CourseUrlLT applies the LT predicate on the "courseUrl" field.
func CourseUrlLT(v string) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCourseUrl), v))
	})
}

// CourseUrlLTE applies the LTE predicate on the "courseUrl" field.
func CourseUrlLTE(v string) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCourseUrl), v))
	})
}

// CourseUrlContains applies the Contains predicate on the "courseUrl" field.
func CourseUrlContains(v string) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCourseUrl), v))
	})
}

// CourseUrlHasPrefix applies the HasPrefix predicate on the "courseUrl" field.
func CourseUrlHasPrefix(v string) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCourseUrl), v))
	})
}

// CourseUrlHasSuffix applies the HasSuffix predicate on the "courseUrl" field.
func CourseUrlHasSuffix(v string) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCourseUrl), v))
	})
}

// CourseUrlIsNil applies the IsNil predicate on the "courseUrl" field.
func CourseUrlIsNil() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCourseUrl)))
	})
}

// CourseUrlNotNil applies the NotNil predicate on the "courseUrl" field.
func CourseUrlNotNil() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCourseUrl)))
	})
}

// CourseUrlEqualFold applies the EqualFold predicate on the "courseUrl" field.
func CourseUrlEqualFold(v string) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCourseUrl), v))
	})
}

// CourseUrlContainsFold applies the ContainsFold predicate on the "courseUrl" field.
func CourseUrlContainsFold(v string) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCourseUrl), v))
	})
}

// PaymentMethodEQ applies the EQ predicate on the "paymentMethod" field.
func PaymentMethodEQ(v PaymentMethod) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentMethod), v))
	})
}

// PaymentMethodNEQ applies the NEQ predicate on the "paymentMethod" field.
func PaymentMethodNEQ(v PaymentMethod) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPaymentMethod), v))
	})
}

// PaymentMethodIn applies the In predicate on the "paymentMethod" field.
func PaymentMethodIn(vs ...PaymentMethod) predicate.EntCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPaymentMethod), v...))
	})
}

// PaymentMethodNotIn applies the NotIn predicate on the "paymentMethod" field.
func PaymentMethodNotIn(vs ...PaymentMethod) predicate.EntCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPaymentMethod), v...))
	})
}

// PaymentMethodIsNil applies the IsNil predicate on the "paymentMethod" field.
func PaymentMethodIsNil() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPaymentMethod)))
	})
}

// PaymentMethodNotNil applies the NotNil predicate on the "paymentMethod" field.
func PaymentMethodNotNil() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPaymentMethod)))
	})
}

// PaymentAmountEQ applies the EQ predicate on the "paymentAmount" field.
func PaymentAmountEQ(v float64) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentAmount), v))
	})
}

// PaymentAmountNEQ applies the NEQ predicate on the "paymentAmount" field.
func PaymentAmountNEQ(v float64) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPaymentAmount), v))
	})
}

// PaymentAmountIn applies the In predicate on the "paymentAmount" field.
func PaymentAmountIn(vs ...float64) predicate.EntCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPaymentAmount), v...))
	})
}

// PaymentAmountNotIn applies the NotIn predicate on the "paymentAmount" field.
func PaymentAmountNotIn(vs ...float64) predicate.EntCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPaymentAmount), v...))
	})
}

// PaymentAmountGT applies the GT predicate on the "paymentAmount" field.
func PaymentAmountGT(v float64) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPaymentAmount), v))
	})
}

// PaymentAmountGTE applies the GTE predicate on the "paymentAmount" field.
func PaymentAmountGTE(v float64) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPaymentAmount), v))
	})
}

// PaymentAmountLT applies the LT predicate on the "paymentAmount" field.
func PaymentAmountLT(v float64) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPaymentAmount), v))
	})
}

// PaymentAmountLTE applies the LTE predicate on the "paymentAmount" field.
func PaymentAmountLTE(v float64) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPaymentAmount), v))
	})
}

// PaymentAmountIsNil applies the IsNil predicate on the "paymentAmount" field.
func PaymentAmountIsNil() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPaymentAmount)))
	})
}

// PaymentAmountNotNil applies the NotNil predicate on the "paymentAmount" field.
func PaymentAmountNotNil() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPaymentAmount)))
	})
}

// StartDateEQ applies the EQ predicate on the "startDate" field.
func StartDateEQ(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartDate), v))
	})
}

// StartDateNEQ applies the NEQ predicate on the "startDate" field.
func StartDateNEQ(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStartDate), v))
	})
}

// StartDateIn applies the In predicate on the "startDate" field.
func StartDateIn(vs ...time.Time) predicate.EntCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStartDate), v...))
	})
}

// StartDateNotIn applies the NotIn predicate on the "startDate" field.
func StartDateNotIn(vs ...time.Time) predicate.EntCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStartDate), v...))
	})
}

// StartDateGT applies the GT predicate on the "startDate" field.
func StartDateGT(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStartDate), v))
	})
}

// StartDateGTE applies the GTE predicate on the "startDate" field.
func StartDateGTE(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStartDate), v))
	})
}

// StartDateLT applies the LT predicate on the "startDate" field.
func StartDateLT(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStartDate), v))
	})
}

// StartDateLTE applies the LTE predicate on the "startDate" field.
func StartDateLTE(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStartDate), v))
	})
}

// StartDateIsNil applies the IsNil predicate on the "startDate" field.
func StartDateIsNil() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStartDate)))
	})
}

// StartDateNotNil applies the NotNil predicate on the "startDate" field.
func StartDateNotNil() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStartDate)))
	})
}

// EndDateEQ applies the EQ predicate on the "endDate" field.
func EndDateEQ(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndDate), v))
	})
}

// EndDateNEQ applies the NEQ predicate on the "endDate" field.
func EndDateNEQ(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEndDate), v))
	})
}

// EndDateIn applies the In predicate on the "endDate" field.
func EndDateIn(vs ...time.Time) predicate.EntCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEndDate), v...))
	})
}

// EndDateNotIn applies the NotIn predicate on the "endDate" field.
func EndDateNotIn(vs ...time.Time) predicate.EntCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEndDate), v...))
	})
}

// EndDateGT applies the GT predicate on the "endDate" field.
func EndDateGT(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEndDate), v))
	})
}

// EndDateGTE applies the GTE predicate on the "endDate" field.
func EndDateGTE(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEndDate), v))
	})
}

// EndDateLT applies the LT predicate on the "endDate" field.
func EndDateLT(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEndDate), v))
	})
}

// EndDateLTE applies the LTE predicate on the "endDate" field.
func EndDateLTE(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEndDate), v))
	})
}

// EndDateIsNil applies the IsNil predicate on the "endDate" field.
func EndDateIsNil() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEndDate)))
	})
}

// EndDateNotNil applies the NotNil predicate on the "endDate" field.
func EndDateNotNil() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEndDate)))
	})
}

// MondayEQ applies the EQ predicate on the "monday" field.
func MondayEQ(v bool) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMonday), v))
	})
}

// MondayNEQ applies the NEQ predicate on the "monday" field.
func MondayNEQ(v bool) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMonday), v))
	})
}

// MondayIsNil applies the IsNil predicate on the "monday" field.
func MondayIsNil() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMonday)))
	})
}

// MondayNotNil applies the NotNil predicate on the "monday" field.
func MondayNotNil() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMonday)))
	})
}

// TuesdayEQ applies the EQ predicate on the "tuesday" field.
func TuesdayEQ(v bool) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTuesday), v))
	})
}

// TuesdayNEQ applies the NEQ predicate on the "tuesday" field.
func TuesdayNEQ(v bool) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTuesday), v))
	})
}

// TuesdayIsNil applies the IsNil predicate on the "tuesday" field.
func TuesdayIsNil() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTuesday)))
	})
}

// TuesdayNotNil applies the NotNil predicate on the "tuesday" field.
func TuesdayNotNil() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTuesday)))
	})
}

// WednesdayEQ applies the EQ predicate on the "wednesday" field.
func WednesdayEQ(v bool) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWednesday), v))
	})
}

// WednesdayNEQ applies the NEQ predicate on the "wednesday" field.
func WednesdayNEQ(v bool) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWednesday), v))
	})
}

// WednesdayIsNil applies the IsNil predicate on the "wednesday" field.
func WednesdayIsNil() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldWednesday)))
	})
}

// WednesdayNotNil applies the NotNil predicate on the "wednesday" field.
func WednesdayNotNil() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldWednesday)))
	})
}

// ThursdayEQ applies the EQ predicate on the "thursday" field.
func ThursdayEQ(v bool) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThursday), v))
	})
}

// ThursdayNEQ applies the NEQ predicate on the "thursday" field.
func ThursdayNEQ(v bool) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldThursday), v))
	})
}

// ThursdayIsNil applies the IsNil predicate on the "thursday" field.
func ThursdayIsNil() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldThursday)))
	})
}

// ThursdayNotNil applies the NotNil predicate on the "thursday" field.
func ThursdayNotNil() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldThursday)))
	})
}

// FridayEQ applies the EQ predicate on the "friday" field.
func FridayEQ(v bool) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFriday), v))
	})
}

// FridayNEQ applies the NEQ predicate on the "friday" field.
func FridayNEQ(v bool) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFriday), v))
	})
}

// FridayIsNil applies the IsNil predicate on the "friday" field.
func FridayIsNil() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFriday)))
	})
}

// FridayNotNil applies the NotNil predicate on the "friday" field.
func FridayNotNil() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFriday)))
	})
}

// SaturdayEQ applies the EQ predicate on the "saturday" field.
func SaturdayEQ(v bool) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSaturday), v))
	})
}

// SaturdayNEQ applies the NEQ predicate on the "saturday" field.
func SaturdayNEQ(v bool) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSaturday), v))
	})
}

// SaturdayIsNil applies the IsNil predicate on the "saturday" field.
func SaturdayIsNil() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSaturday)))
	})
}

// SaturdayNotNil applies the NotNil predicate on the "saturday" field.
func SaturdayNotNil() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSaturday)))
	})
}

// SundayEQ applies the EQ predicate on the "sunday" field.
func SundayEQ(v bool) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSunday), v))
	})
}

// SundayNEQ applies the NEQ predicate on the "sunday" field.
func SundayNEQ(v bool) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSunday), v))
	})
}

// SundayIsNil applies the IsNil predicate on the "sunday" field.
func SundayIsNil() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSunday)))
	})
}

// SundayNotNil applies the NotNil predicate on the "sunday" field.
func SundayNotNil() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSunday)))
	})
}

// HasTodo applies the HasEdge predicate on the "todo" edge.
func HasTodo() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TodoTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TodoTable, TodoColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTodoWith applies the HasEdge predicate on the "todo" edge with a given conditions (other predicates).
func HasTodoWith(preds ...predicate.EntTodo) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TodoInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TodoTable, TodoColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAttendance applies the HasEdge predicate on the "attendance" edge.
func HasAttendance() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AttendanceTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AttendanceTable, AttendanceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAttendanceWith applies the HasEdge predicate on the "attendance" edge with a given conditions (other predicates).
func HasAttendanceWith(preds ...predicate.EntAttendance) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AttendanceInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AttendanceTable, AttendanceColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPost applies the HasEdge predicate on the "post" edge.
func HasPost() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PostTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PostTable, PostColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPostWith applies the HasEdge predicate on the "post" edge with a given conditions (other predicates).
func HasPostWith(preds ...predicate.EntPost) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PostInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PostTable, PostColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOwnedBy applies the HasEdge predicate on the "ownedBy" edge.
func HasOwnedBy() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnedByTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, OwnedByTable, OwnedByPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnedByWith applies the HasEdge predicate on the "ownedBy" edge with a given conditions (other predicates).
func HasOwnedByWith(preds ...predicate.EntUser) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnedByInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, OwnedByTable, OwnedByPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EntCourse) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EntCourse) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EntCourse) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		p(s.Not())
	})
}
