// Code generated by ent, DO NOT EDIT.

package entuser

const (
	// Label holds the string label denoting the entuser type in the database.
	Label = "ent_user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldProfilePictureUrl holds the string denoting the profilepictureurl field in the database.
	FieldProfilePictureUrl = "profile_picture_url"
	// FieldIsTutor holds the string denoting the istutor field in the database.
	FieldIsTutor = "is_tutor"
	// FieldIsStudent holds the string denoting the isstudent field in the database.
	FieldIsStudent = "is_student"
	// FieldIsParent holds the string denoting the isparent field in the database.
	FieldIsParent = "is_parent"
	// EdgeCourse holds the string denoting the course edge name in mutations.
	EdgeCourse = "course"
	// EdgeChildren holds the string denoting the children edge name in mutations.
	EdgeChildren = "children"
	// EdgeParent holds the string denoting the parent edge name in mutations.
	EdgeParent = "parent"
	// EdgeStudent holds the string denoting the student edge name in mutations.
	EdgeStudent = "student"
	// EdgeTutor holds the string denoting the tutor edge name in mutations.
	EdgeTutor = "tutor"
	// EdgeSParent holds the string denoting the sparent edge name in mutations.
	EdgeSParent = "SParent"
	// EdgeSTutor holds the string denoting the stutor edge name in mutations.
	EdgeSTutor = "STutor"
	// Table holds the table name of the entuser in the database.
	Table = "ent_users"
	// CourseTable is the table that holds the course relation/edge. The primary key declared below.
	CourseTable = "ent_user_course"
	// CourseInverseTable is the table name for the EntCourse entity.
	// It exists in this package in order to avoid circular dependency with the "entcourse" package.
	CourseInverseTable = "ent_courses"
	// ChildrenTable is the table that holds the children relation/edge. The primary key declared below.
	ChildrenTable = "ent_user_parent"
	// ParentTable is the table that holds the parent relation/edge. The primary key declared below.
	ParentTable = "ent_user_parent"
	// StudentTable is the table that holds the student relation/edge. The primary key declared below.
	StudentTable = "ent_user_tutor"
	// TutorTable is the table that holds the tutor relation/edge. The primary key declared below.
	TutorTable = "ent_user_tutor"
	// SParentTable is the table that holds the SParent relation/edge. The primary key declared below.
	SParentTable = "ent_user_STutor"
	// STutorTable is the table that holds the STutor relation/edge. The primary key declared below.
	STutorTable = "ent_user_STutor"
)

// Columns holds all SQL columns for entuser fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldEmail,
	FieldPassword,
	FieldPhone,
	FieldProfilePictureUrl,
	FieldIsTutor,
	FieldIsStudent,
	FieldIsParent,
}

var (
	// CoursePrimaryKey and CourseColumn2 are the table columns denoting the
	// primary key for the course relation (M2M).
	CoursePrimaryKey = []string{"ent_user_id", "ent_course_id"}
	// ChildrenPrimaryKey and ChildrenColumn2 are the table columns denoting the
	// primary key for the children relation (M2M).
	ChildrenPrimaryKey = []string{"ent_user_id", "child_id"}
	// ParentPrimaryKey and ParentColumn2 are the table columns denoting the
	// primary key for the parent relation (M2M).
	ParentPrimaryKey = []string{"ent_user_id", "child_id"}
	// StudentPrimaryKey and StudentColumn2 are the table columns denoting the
	// primary key for the student relation (M2M).
	StudentPrimaryKey = []string{"ent_user_id", "student_id"}
	// TutorPrimaryKey and TutorColumn2 are the table columns denoting the
	// primary key for the tutor relation (M2M).
	TutorPrimaryKey = []string{"ent_user_id", "student_id"}
	// SParentPrimaryKey and SParentColumn2 are the table columns denoting the
	// primary key for the SParent relation (M2M).
	SParentPrimaryKey = []string{"ent_user_id", "SParent_id"}
	// STutorPrimaryKey and STutorColumn2 are the table columns denoting the
	// primary key for the STutor relation (M2M).
	STutorPrimaryKey = []string{"ent_user_id", "SParent_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	PasswordValidator func(string) error
)
