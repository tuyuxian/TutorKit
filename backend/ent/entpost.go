// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/entcourse"
	"backend/ent/entpost"
	"backend/ent/entuser"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// EntPost is the model entity for the EntPost schema.
type EntPost struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Timestamp holds the value of the "timestamp" field.
	Timestamp time.Time `json:"timestamp,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// Share holds the value of the "share" field.
	Share entpost.Share `json:"share,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EntPostQuery when eager-loading is set.
	Edges           EntPostEdges `json:"edges"`
	ent_course_post *int
	ent_user_post   *int
}

// EntPostEdges holds the relations/edges for other nodes in the graph.
type EntPostEdges struct {
	// Comment holds the value of the comment edge.
	Comment []*EntComment `json:"comment,omitempty"`
	// BelongsTo holds the value of the belongsTo edge.
	BelongsTo *EntCourse `json:"belongsTo,omitempty"`
	// OwnedBy holds the value of the ownedBy edge.
	OwnedBy *EntUser `json:"ownedBy,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// CommentOrErr returns the Comment value or an error if the edge
// was not loaded in eager-loading.
func (e EntPostEdges) CommentOrErr() ([]*EntComment, error) {
	if e.loadedTypes[0] {
		return e.Comment, nil
	}
	return nil, &NotLoadedError{edge: "comment"}
}

// BelongsToOrErr returns the BelongsTo value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EntPostEdges) BelongsToOrErr() (*EntCourse, error) {
	if e.loadedTypes[1] {
		if e.BelongsTo == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: entcourse.Label}
		}
		return e.BelongsTo, nil
	}
	return nil, &NotLoadedError{edge: "belongsTo"}
}

// OwnedByOrErr returns the OwnedBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EntPostEdges) OwnedByOrErr() (*EntUser, error) {
	if e.loadedTypes[2] {
		if e.OwnedBy == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: entuser.Label}
		}
		return e.OwnedBy, nil
	}
	return nil, &NotLoadedError{edge: "ownedBy"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EntPost) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case entpost.FieldID:
			values[i] = new(sql.NullInt64)
		case entpost.FieldContent, entpost.FieldShare:
			values[i] = new(sql.NullString)
		case entpost.FieldTimestamp:
			values[i] = new(sql.NullTime)
		case entpost.ForeignKeys[0]: // ent_course_post
			values[i] = new(sql.NullInt64)
		case entpost.ForeignKeys[1]: // ent_user_post
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type EntPost", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EntPost fields.
func (ep *EntPost) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case entpost.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ep.ID = int(value.Int64)
		case entpost.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				ep.Timestamp = value.Time
			}
		case entpost.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				ep.Content = value.String
			}
		case entpost.FieldShare:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field share", values[i])
			} else if value.Valid {
				ep.Share = entpost.Share(value.String)
			}
		case entpost.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field ent_course_post", value)
			} else if value.Valid {
				ep.ent_course_post = new(int)
				*ep.ent_course_post = int(value.Int64)
			}
		case entpost.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field ent_user_post", value)
			} else if value.Valid {
				ep.ent_user_post = new(int)
				*ep.ent_user_post = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryComment queries the "comment" edge of the EntPost entity.
func (ep *EntPost) QueryComment() *EntCommentQuery {
	return (&EntPostClient{config: ep.config}).QueryComment(ep)
}

// QueryBelongsTo queries the "belongsTo" edge of the EntPost entity.
func (ep *EntPost) QueryBelongsTo() *EntCourseQuery {
	return (&EntPostClient{config: ep.config}).QueryBelongsTo(ep)
}

// QueryOwnedBy queries the "ownedBy" edge of the EntPost entity.
func (ep *EntPost) QueryOwnedBy() *EntUserQuery {
	return (&EntPostClient{config: ep.config}).QueryOwnedBy(ep)
}

// Update returns a builder for updating this EntPost.
// Note that you need to call EntPost.Unwrap() before calling this method if this EntPost
// was returned from a transaction, and the transaction was committed or rolled back.
func (ep *EntPost) Update() *EntPostUpdateOne {
	return (&EntPostClient{config: ep.config}).UpdateOne(ep)
}

// Unwrap unwraps the EntPost entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ep *EntPost) Unwrap() *EntPost {
	_tx, ok := ep.config.driver.(*txDriver)
	if !ok {
		panic("ent: EntPost is not a transactional entity")
	}
	ep.config.driver = _tx.drv
	return ep
}

// String implements the fmt.Stringer.
func (ep *EntPost) String() string {
	var builder strings.Builder
	builder.WriteString("EntPost(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ep.ID))
	builder.WriteString("timestamp=")
	builder.WriteString(ep.Timestamp.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(ep.Content)
	builder.WriteString(", ")
	builder.WriteString("share=")
	builder.WriteString(fmt.Sprintf("%v", ep.Share))
	builder.WriteByte(')')
	return builder.String()
}

// EntPosts is a parsable slice of EntPost.
type EntPosts []*EntPost

func (ep EntPosts) config(cfg config) {
	for _i := range ep {
		ep[_i].config = cfg
	}
}
