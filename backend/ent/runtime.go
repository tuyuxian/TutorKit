// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/entcourse"
	"backend/ent/entuser"
	"backend/ent/schema"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	entcourseFields := schema.EntCourse{}.Fields()
	_ = entcourseFields
	// entcourseDescName is the schema descriptor for name field.
	entcourseDescName := entcourseFields[0].Descriptor()
	// entcourse.NameValidator is a validator for the "name" field. It is called by the builders before save.
	entcourse.NameValidator = entcourseDescName.Validators[0].(func(string) error)
	entuserFields := schema.EntUser{}.Fields()
	_ = entuserFields
	// entuserDescName is the schema descriptor for name field.
	entuserDescName := entuserFields[0].Descriptor()
	// entuser.NameValidator is a validator for the "name" field. It is called by the builders before save.
	entuser.NameValidator = entuserDescName.Validators[0].(func(string) error)
	// entuserDescEmail is the schema descriptor for email field.
	entuserDescEmail := entuserFields[1].Descriptor()
	// entuser.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	entuser.EmailValidator = func() func(string) error {
		validators := entuserDescEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(email string) error {
			for _, fn := range fns {
				if err := fn(email); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// entuserDescPassword is the schema descriptor for password field.
	entuserDescPassword := entuserFields[2].Descriptor()
	// entuser.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	entuser.PasswordValidator = entuserDescPassword.Validators[0].(func(string) error)
}
