// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/entcourse"
	"backend/ent/enttodo"
	"backend/ent/entuser"
	"backend/ent/predicate"
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EntTodoQuery is the builder for querying EntTodo entities.
type EntTodoQuery struct {
	config
	limit       *int
	offset      *int
	unique      *bool
	order       []OrderFunc
	fields      []string
	predicates  []predicate.EntTodo
	withTodoFor *EntCourseQuery
	withOwnedBy *EntUserQuery
	withFKs     bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EntTodoQuery builder.
func (etq *EntTodoQuery) Where(ps ...predicate.EntTodo) *EntTodoQuery {
	etq.predicates = append(etq.predicates, ps...)
	return etq
}

// Limit adds a limit step to the query.
func (etq *EntTodoQuery) Limit(limit int) *EntTodoQuery {
	etq.limit = &limit
	return etq
}

// Offset adds an offset step to the query.
func (etq *EntTodoQuery) Offset(offset int) *EntTodoQuery {
	etq.offset = &offset
	return etq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (etq *EntTodoQuery) Unique(unique bool) *EntTodoQuery {
	etq.unique = &unique
	return etq
}

// Order adds an order step to the query.
func (etq *EntTodoQuery) Order(o ...OrderFunc) *EntTodoQuery {
	etq.order = append(etq.order, o...)
	return etq
}

// QueryTodoFor chains the current query on the "todoFor" edge.
func (etq *EntTodoQuery) QueryTodoFor() *EntCourseQuery {
	query := &EntCourseQuery{config: etq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := etq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := etq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enttodo.Table, enttodo.FieldID, selector),
			sqlgraph.To(entcourse.Table, entcourse.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, enttodo.TodoForTable, enttodo.TodoForColumn),
		)
		fromU = sqlgraph.SetNeighbors(etq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOwnedBy chains the current query on the "ownedBy" edge.
func (etq *EntTodoQuery) QueryOwnedBy() *EntUserQuery {
	query := &EntUserQuery{config: etq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := etq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := etq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enttodo.Table, enttodo.FieldID, selector),
			sqlgraph.To(entuser.Table, entuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, enttodo.OwnedByTable, enttodo.OwnedByColumn),
		)
		fromU = sqlgraph.SetNeighbors(etq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first EntTodo entity from the query.
// Returns a *NotFoundError when no EntTodo was found.
func (etq *EntTodoQuery) First(ctx context.Context) (*EntTodo, error) {
	nodes, err := etq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{enttodo.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (etq *EntTodoQuery) FirstX(ctx context.Context) *EntTodo {
	node, err := etq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first EntTodo ID from the query.
// Returns a *NotFoundError when no EntTodo ID was found.
func (etq *EntTodoQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = etq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{enttodo.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (etq *EntTodoQuery) FirstIDX(ctx context.Context) int {
	id, err := etq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single EntTodo entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one EntTodo entity is found.
// Returns a *NotFoundError when no EntTodo entities are found.
func (etq *EntTodoQuery) Only(ctx context.Context) (*EntTodo, error) {
	nodes, err := etq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{enttodo.Label}
	default:
		return nil, &NotSingularError{enttodo.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (etq *EntTodoQuery) OnlyX(ctx context.Context) *EntTodo {
	node, err := etq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only EntTodo ID in the query.
// Returns a *NotSingularError when more than one EntTodo ID is found.
// Returns a *NotFoundError when no entities are found.
func (etq *EntTodoQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = etq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{enttodo.Label}
	default:
		err = &NotSingularError{enttodo.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (etq *EntTodoQuery) OnlyIDX(ctx context.Context) int {
	id, err := etq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of EntTodos.
func (etq *EntTodoQuery) All(ctx context.Context) ([]*EntTodo, error) {
	if err := etq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return etq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (etq *EntTodoQuery) AllX(ctx context.Context) []*EntTodo {
	nodes, err := etq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of EntTodo IDs.
func (etq *EntTodoQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := etq.Select(enttodo.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (etq *EntTodoQuery) IDsX(ctx context.Context) []int {
	ids, err := etq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (etq *EntTodoQuery) Count(ctx context.Context) (int, error) {
	if err := etq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return etq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (etq *EntTodoQuery) CountX(ctx context.Context) int {
	count, err := etq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (etq *EntTodoQuery) Exist(ctx context.Context) (bool, error) {
	if err := etq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return etq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (etq *EntTodoQuery) ExistX(ctx context.Context) bool {
	exist, err := etq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EntTodoQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (etq *EntTodoQuery) Clone() *EntTodoQuery {
	if etq == nil {
		return nil
	}
	return &EntTodoQuery{
		config:      etq.config,
		limit:       etq.limit,
		offset:      etq.offset,
		order:       append([]OrderFunc{}, etq.order...),
		predicates:  append([]predicate.EntTodo{}, etq.predicates...),
		withTodoFor: etq.withTodoFor.Clone(),
		withOwnedBy: etq.withOwnedBy.Clone(),
		// clone intermediate query.
		sql:    etq.sql.Clone(),
		path:   etq.path,
		unique: etq.unique,
	}
}

// WithTodoFor tells the query-builder to eager-load the nodes that are connected to
// the "todoFor" edge. The optional arguments are used to configure the query builder of the edge.
func (etq *EntTodoQuery) WithTodoFor(opts ...func(*EntCourseQuery)) *EntTodoQuery {
	query := &EntCourseQuery{config: etq.config}
	for _, opt := range opts {
		opt(query)
	}
	etq.withTodoFor = query
	return etq
}

// WithOwnedBy tells the query-builder to eager-load the nodes that are connected to
// the "ownedBy" edge. The optional arguments are used to configure the query builder of the edge.
func (etq *EntTodoQuery) WithOwnedBy(opts ...func(*EntUserQuery)) *EntTodoQuery {
	query := &EntUserQuery{config: etq.config}
	for _, opt := range opts {
		opt(query)
	}
	etq.withOwnedBy = query
	return etq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Date time.Time `json:"date,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.EntTodo.Query().
//		GroupBy(enttodo.FieldDate).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (etq *EntTodoQuery) GroupBy(field string, fields ...string) *EntTodoGroupBy {
	grbuild := &EntTodoGroupBy{config: etq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := etq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return etq.sqlQuery(ctx), nil
	}
	grbuild.label = enttodo.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Date time.Time `json:"date,omitempty"`
//	}
//
//	client.EntTodo.Query().
//		Select(enttodo.FieldDate).
//		Scan(ctx, &v)
func (etq *EntTodoQuery) Select(fields ...string) *EntTodoSelect {
	etq.fields = append(etq.fields, fields...)
	selbuild := &EntTodoSelect{EntTodoQuery: etq}
	selbuild.label = enttodo.Label
	selbuild.flds, selbuild.scan = &etq.fields, selbuild.Scan
	return selbuild
}

func (etq *EntTodoQuery) prepareQuery(ctx context.Context) error {
	for _, f := range etq.fields {
		if !enttodo.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if etq.path != nil {
		prev, err := etq.path(ctx)
		if err != nil {
			return err
		}
		etq.sql = prev
	}
	return nil
}

func (etq *EntTodoQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*EntTodo, error) {
	var (
		nodes       = []*EntTodo{}
		withFKs     = etq.withFKs
		_spec       = etq.querySpec()
		loadedTypes = [2]bool{
			etq.withTodoFor != nil,
			etq.withOwnedBy != nil,
		}
	)
	if etq.withTodoFor != nil || etq.withOwnedBy != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, enttodo.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*EntTodo).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &EntTodo{config: etq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, etq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := etq.withTodoFor; query != nil {
		if err := etq.loadTodoFor(ctx, query, nodes, nil,
			func(n *EntTodo, e *EntCourse) { n.Edges.TodoFor = e }); err != nil {
			return nil, err
		}
	}
	if query := etq.withOwnedBy; query != nil {
		if err := etq.loadOwnedBy(ctx, query, nodes, nil,
			func(n *EntTodo, e *EntUser) { n.Edges.OwnedBy = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (etq *EntTodoQuery) loadTodoFor(ctx context.Context, query *EntCourseQuery, nodes []*EntTodo, init func(*EntTodo), assign func(*EntTodo, *EntCourse)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*EntTodo)
	for i := range nodes {
		if nodes[i].ent_course_todo == nil {
			continue
		}
		fk := *nodes[i].ent_course_todo
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(entcourse.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "ent_course_todo" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (etq *EntTodoQuery) loadOwnedBy(ctx context.Context, query *EntUserQuery, nodes []*EntTodo, init func(*EntTodo), assign func(*EntTodo, *EntUser)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*EntTodo)
	for i := range nodes {
		if nodes[i].ent_user_todo == nil {
			continue
		}
		fk := *nodes[i].ent_user_todo
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(entuser.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "ent_user_todo" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (etq *EntTodoQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := etq.querySpec()
	_spec.Node.Columns = etq.fields
	if len(etq.fields) > 0 {
		_spec.Unique = etq.unique != nil && *etq.unique
	}
	return sqlgraph.CountNodes(ctx, etq.driver, _spec)
}

func (etq *EntTodoQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := etq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (etq *EntTodoQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   enttodo.Table,
			Columns: enttodo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: enttodo.FieldID,
			},
		},
		From:   etq.sql,
		Unique: true,
	}
	if unique := etq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := etq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, enttodo.FieldID)
		for i := range fields {
			if fields[i] != enttodo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := etq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := etq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := etq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := etq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (etq *EntTodoQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(etq.driver.Dialect())
	t1 := builder.Table(enttodo.Table)
	columns := etq.fields
	if len(columns) == 0 {
		columns = enttodo.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if etq.sql != nil {
		selector = etq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if etq.unique != nil && *etq.unique {
		selector.Distinct()
	}
	for _, p := range etq.predicates {
		p(selector)
	}
	for _, p := range etq.order {
		p(selector)
	}
	if offset := etq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := etq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// EntTodoGroupBy is the group-by builder for EntTodo entities.
type EntTodoGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (etgb *EntTodoGroupBy) Aggregate(fns ...AggregateFunc) *EntTodoGroupBy {
	etgb.fns = append(etgb.fns, fns...)
	return etgb
}

// Scan applies the group-by query and scans the result into the given value.
func (etgb *EntTodoGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := etgb.path(ctx)
	if err != nil {
		return err
	}
	etgb.sql = query
	return etgb.sqlScan(ctx, v)
}

func (etgb *EntTodoGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range etgb.fields {
		if !enttodo.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := etgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := etgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (etgb *EntTodoGroupBy) sqlQuery() *sql.Selector {
	selector := etgb.sql.Select()
	aggregation := make([]string, 0, len(etgb.fns))
	for _, fn := range etgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(etgb.fields)+len(etgb.fns))
		for _, f := range etgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(etgb.fields...)...)
}

// EntTodoSelect is the builder for selecting fields of EntTodo entities.
type EntTodoSelect struct {
	*EntTodoQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (ets *EntTodoSelect) Scan(ctx context.Context, v interface{}) error {
	if err := ets.prepareQuery(ctx); err != nil {
		return err
	}
	ets.sql = ets.EntTodoQuery.sqlQuery(ctx)
	return ets.sqlScan(ctx, v)
}

func (ets *EntTodoSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ets.sql.Query()
	if err := ets.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
