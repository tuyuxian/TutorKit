// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/internal/ent/entcourse"
	"backend/internal/ent/enttodo"
	"backend/internal/ent/entuser"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// EntTodo is the model entity for the EntTodo schema.
type EntTodo struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// Date holds the value of the "date" field.
	Date time.Time `json:"date,omitempty"`
	// StartTime holds the value of the "startTime" field.
	StartTime time.Time `json:"startTime,omitempty"`
	// EndTime holds the value of the "endTime" field.
	EndTime time.Time `json:"endTime,omitempty"`
	// Day holds the value of the "day" field.
	Day time.Time `json:"day,omitempty"`
	// Lesson holds the value of the "lesson" field.
	Lesson string `json:"lesson,omitempty"`
	// Homework holds the value of the "homework" field.
	Homework string `json:"homework,omitempty"`
	// Status holds the value of the "status" field.
	Status enttodo.Status `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EntTodoQuery when eager-loading is set.
	Edges           EntTodoEdges `json:"edges"`
	ent_course_todo *int
	ent_user_todo   *int
}

// EntTodoEdges holds the relations/edges for other nodes in the graph.
type EntTodoEdges struct {
	// TodoFor holds the value of the todoFor edge.
	TodoFor *EntCourse `json:"todoFor,omitempty"`
	// OwnedBy holds the value of the ownedBy edge.
	OwnedBy *EntUser `json:"ownedBy,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TodoForOrErr returns the TodoFor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EntTodoEdges) TodoForOrErr() (*EntCourse, error) {
	if e.loadedTypes[0] {
		if e.TodoFor == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: entcourse.Label}
		}
		return e.TodoFor, nil
	}
	return nil, &NotLoadedError{edge: "todoFor"}
}

// OwnedByOrErr returns the OwnedBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EntTodoEdges) OwnedByOrErr() (*EntUser, error) {
	if e.loadedTypes[1] {
		if e.OwnedBy == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: entuser.Label}
		}
		return e.OwnedBy, nil
	}
	return nil, &NotLoadedError{edge: "ownedBy"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EntTodo) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case enttodo.FieldID:
			values[i] = new(sql.NullInt64)
		case enttodo.FieldLesson, enttodo.FieldHomework, enttodo.FieldStatus:
			values[i] = new(sql.NullString)
		case enttodo.FieldCreatedAt, enttodo.FieldUpdatedAt, enttodo.FieldDate, enttodo.FieldStartTime, enttodo.FieldEndTime, enttodo.FieldDay:
			values[i] = new(sql.NullTime)
		case enttodo.ForeignKeys[0]: // ent_course_todo
			values[i] = new(sql.NullInt64)
		case enttodo.ForeignKeys[1]: // ent_user_todo
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type EntTodo", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EntTodo fields.
func (et *EntTodo) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case enttodo.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			et.ID = int(value.Int64)
		case enttodo.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				et.CreatedAt = value.Time
			}
		case enttodo.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				et.UpdatedAt = value.Time
			}
		case enttodo.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				et.Date = value.Time
			}
		case enttodo.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field startTime", values[i])
			} else if value.Valid {
				et.StartTime = value.Time
			}
		case enttodo.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field endTime", values[i])
			} else if value.Valid {
				et.EndTime = value.Time
			}
		case enttodo.FieldDay:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field day", values[i])
			} else if value.Valid {
				et.Day = value.Time
			}
		case enttodo.FieldLesson:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lesson", values[i])
			} else if value.Valid {
				et.Lesson = value.String
			}
		case enttodo.FieldHomework:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field homework", values[i])
			} else if value.Valid {
				et.Homework = value.String
			}
		case enttodo.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				et.Status = enttodo.Status(value.String)
			}
		case enttodo.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field ent_course_todo", value)
			} else if value.Valid {
				et.ent_course_todo = new(int)
				*et.ent_course_todo = int(value.Int64)
			}
		case enttodo.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field ent_user_todo", value)
			} else if value.Valid {
				et.ent_user_todo = new(int)
				*et.ent_user_todo = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryTodoFor queries the "todoFor" edge of the EntTodo entity.
func (et *EntTodo) QueryTodoFor() *EntCourseQuery {
	return (&EntTodoClient{config: et.config}).QueryTodoFor(et)
}

// QueryOwnedBy queries the "ownedBy" edge of the EntTodo entity.
func (et *EntTodo) QueryOwnedBy() *EntUserQuery {
	return (&EntTodoClient{config: et.config}).QueryOwnedBy(et)
}

// Update returns a builder for updating this EntTodo.
// Note that you need to call EntTodo.Unwrap() before calling this method if this EntTodo
// was returned from a transaction, and the transaction was committed or rolled back.
func (et *EntTodo) Update() *EntTodoUpdateOne {
	return (&EntTodoClient{config: et.config}).UpdateOne(et)
}

// Unwrap unwraps the EntTodo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (et *EntTodo) Unwrap() *EntTodo {
	_tx, ok := et.config.driver.(*txDriver)
	if !ok {
		panic("ent: EntTodo is not a transactional entity")
	}
	et.config.driver = _tx.drv
	return et
}

// String implements the fmt.Stringer.
func (et *EntTodo) String() string {
	var builder strings.Builder
	builder.WriteString("EntTodo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", et.ID))
	builder.WriteString("createdAt=")
	builder.WriteString(et.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(et.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(et.Date.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("startTime=")
	builder.WriteString(et.StartTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("endTime=")
	builder.WriteString(et.EndTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("day=")
	builder.WriteString(et.Day.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("lesson=")
	builder.WriteString(et.Lesson)
	builder.WriteString(", ")
	builder.WriteString("homework=")
	builder.WriteString(et.Homework)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", et.Status))
	builder.WriteByte(')')
	return builder.String()
}

// EntTodos is a parsable slice of EntTodo.
type EntTodos []*EntTodo

func (et EntTodos) config(cfg config) {
	for _i := range et {
		et[_i].config = cfg
	}
}
