// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/internal/ent/entcomment"
	"backend/internal/ent/entcourse"
	"backend/internal/ent/entpost"
	"backend/internal/ent/entuser"
	"backend/internal/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EntPostUpdate is the builder for updating EntPost entities.
type EntPostUpdate struct {
	config
	hooks    []Hook
	mutation *EntPostMutation
}

// Where appends a list predicates to the EntPostUpdate builder.
func (epu *EntPostUpdate) Where(ps ...predicate.EntPost) *EntPostUpdate {
	epu.mutation.Where(ps...)
	return epu
}

// SetUpdatedAt sets the "updatedAt" field.
func (epu *EntPostUpdate) SetUpdatedAt(t time.Time) *EntPostUpdate {
	epu.mutation.SetUpdatedAt(t)
	return epu
}

// SetTimestamp sets the "timestamp" field.
func (epu *EntPostUpdate) SetTimestamp(t time.Time) *EntPostUpdate {
	epu.mutation.SetTimestamp(t)
	return epu
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (epu *EntPostUpdate) SetNillableTimestamp(t *time.Time) *EntPostUpdate {
	if t != nil {
		epu.SetTimestamp(*t)
	}
	return epu
}

// SetContent sets the "content" field.
func (epu *EntPostUpdate) SetContent(s string) *EntPostUpdate {
	epu.mutation.SetContent(s)
	return epu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (epu *EntPostUpdate) SetNillableContent(s *string) *EntPostUpdate {
	if s != nil {
		epu.SetContent(*s)
	}
	return epu
}

// ClearContent clears the value of the "content" field.
func (epu *EntPostUpdate) ClearContent() *EntPostUpdate {
	epu.mutation.ClearContent()
	return epu
}

// SetShare sets the "share" field.
func (epu *EntPostUpdate) SetShare(e entpost.Share) *EntPostUpdate {
	epu.mutation.SetShare(e)
	return epu
}

// SetNillableShare sets the "share" field if the given value is not nil.
func (epu *EntPostUpdate) SetNillableShare(e *entpost.Share) *EntPostUpdate {
	if e != nil {
		epu.SetShare(*e)
	}
	return epu
}

// ClearShare clears the value of the "share" field.
func (epu *EntPostUpdate) ClearShare() *EntPostUpdate {
	epu.mutation.ClearShare()
	return epu
}

// AddCommentIDs adds the "comment" edge to the EntComment entity by IDs.
func (epu *EntPostUpdate) AddCommentIDs(ids ...int) *EntPostUpdate {
	epu.mutation.AddCommentIDs(ids...)
	return epu
}

// AddComment adds the "comment" edges to the EntComment entity.
func (epu *EntPostUpdate) AddComment(e ...*EntComment) *EntPostUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epu.AddCommentIDs(ids...)
}

// AddShareWithIDs adds the "shareWith" edge to the EntUser entity by IDs.
func (epu *EntPostUpdate) AddShareWithIDs(ids ...int) *EntPostUpdate {
	epu.mutation.AddShareWithIDs(ids...)
	return epu
}

// AddShareWith adds the "shareWith" edges to the EntUser entity.
func (epu *EntPostUpdate) AddShareWith(e ...*EntUser) *EntPostUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epu.AddShareWithIDs(ids...)
}

// SetBelongsToID sets the "belongsTo" edge to the EntCourse entity by ID.
func (epu *EntPostUpdate) SetBelongsToID(id int) *EntPostUpdate {
	epu.mutation.SetBelongsToID(id)
	return epu
}

// SetNillableBelongsToID sets the "belongsTo" edge to the EntCourse entity by ID if the given value is not nil.
func (epu *EntPostUpdate) SetNillableBelongsToID(id *int) *EntPostUpdate {
	if id != nil {
		epu = epu.SetBelongsToID(*id)
	}
	return epu
}

// SetBelongsTo sets the "belongsTo" edge to the EntCourse entity.
func (epu *EntPostUpdate) SetBelongsTo(e *EntCourse) *EntPostUpdate {
	return epu.SetBelongsToID(e.ID)
}

// SetOwnedByID sets the "ownedBy" edge to the EntUser entity by ID.
func (epu *EntPostUpdate) SetOwnedByID(id int) *EntPostUpdate {
	epu.mutation.SetOwnedByID(id)
	return epu
}

// SetNillableOwnedByID sets the "ownedBy" edge to the EntUser entity by ID if the given value is not nil.
func (epu *EntPostUpdate) SetNillableOwnedByID(id *int) *EntPostUpdate {
	if id != nil {
		epu = epu.SetOwnedByID(*id)
	}
	return epu
}

// SetOwnedBy sets the "ownedBy" edge to the EntUser entity.
func (epu *EntPostUpdate) SetOwnedBy(e *EntUser) *EntPostUpdate {
	return epu.SetOwnedByID(e.ID)
}

// Mutation returns the EntPostMutation object of the builder.
func (epu *EntPostUpdate) Mutation() *EntPostMutation {
	return epu.mutation
}

// ClearComment clears all "comment" edges to the EntComment entity.
func (epu *EntPostUpdate) ClearComment() *EntPostUpdate {
	epu.mutation.ClearComment()
	return epu
}

// RemoveCommentIDs removes the "comment" edge to EntComment entities by IDs.
func (epu *EntPostUpdate) RemoveCommentIDs(ids ...int) *EntPostUpdate {
	epu.mutation.RemoveCommentIDs(ids...)
	return epu
}

// RemoveComment removes "comment" edges to EntComment entities.
func (epu *EntPostUpdate) RemoveComment(e ...*EntComment) *EntPostUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epu.RemoveCommentIDs(ids...)
}

// ClearShareWith clears all "shareWith" edges to the EntUser entity.
func (epu *EntPostUpdate) ClearShareWith() *EntPostUpdate {
	epu.mutation.ClearShareWith()
	return epu
}

// RemoveShareWithIDs removes the "shareWith" edge to EntUser entities by IDs.
func (epu *EntPostUpdate) RemoveShareWithIDs(ids ...int) *EntPostUpdate {
	epu.mutation.RemoveShareWithIDs(ids...)
	return epu
}

// RemoveShareWith removes "shareWith" edges to EntUser entities.
func (epu *EntPostUpdate) RemoveShareWith(e ...*EntUser) *EntPostUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epu.RemoveShareWithIDs(ids...)
}

// ClearBelongsTo clears the "belongsTo" edge to the EntCourse entity.
func (epu *EntPostUpdate) ClearBelongsTo() *EntPostUpdate {
	epu.mutation.ClearBelongsTo()
	return epu
}

// ClearOwnedBy clears the "ownedBy" edge to the EntUser entity.
func (epu *EntPostUpdate) ClearOwnedBy() *EntPostUpdate {
	epu.mutation.ClearOwnedBy()
	return epu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (epu *EntPostUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	epu.defaults()
	if len(epu.hooks) == 0 {
		if err = epu.check(); err != nil {
			return 0, err
		}
		affected, err = epu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EntPostMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = epu.check(); err != nil {
				return 0, err
			}
			epu.mutation = mutation
			affected, err = epu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(epu.hooks) - 1; i >= 0; i-- {
			if epu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = epu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, epu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (epu *EntPostUpdate) SaveX(ctx context.Context) int {
	affected, err := epu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (epu *EntPostUpdate) Exec(ctx context.Context) error {
	_, err := epu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epu *EntPostUpdate) ExecX(ctx context.Context) {
	if err := epu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (epu *EntPostUpdate) defaults() {
	if _, ok := epu.mutation.UpdatedAt(); !ok {
		v := entpost.UpdateDefaultUpdatedAt()
		epu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (epu *EntPostUpdate) check() error {
	if v, ok := epu.mutation.Share(); ok {
		if err := entpost.ShareValidator(v); err != nil {
			return &ValidationError{Name: "share", err: fmt.Errorf(`ent: validator failed for field "EntPost.share": %w`, err)}
		}
	}
	return nil
}

func (epu *EntPostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   entpost.Table,
			Columns: entpost.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: entpost.FieldID,
			},
		},
	}
	if ps := epu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := epu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: entpost.FieldUpdatedAt,
		})
	}
	if value, ok := epu.mutation.Timestamp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: entpost.FieldTimestamp,
		})
	}
	if value, ok := epu.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entpost.FieldContent,
		})
	}
	if epu.mutation.ContentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: entpost.FieldContent,
		})
	}
	if value, ok := epu.mutation.Share(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: entpost.FieldShare,
		})
	}
	if epu.mutation.ShareCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: entpost.FieldShare,
		})
	}
	if epu.mutation.CommentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entpost.CommentTable,
			Columns: []string{entpost.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entcomment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.RemovedCommentIDs(); len(nodes) > 0 && !epu.mutation.CommentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entpost.CommentTable,
			Columns: []string{entpost.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entcomment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.CommentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entpost.CommentTable,
			Columns: []string{entpost.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entcomment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epu.mutation.ShareWithCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entpost.ShareWithTable,
			Columns: entpost.ShareWithPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.RemovedShareWithIDs(); len(nodes) > 0 && !epu.mutation.ShareWithCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entpost.ShareWithTable,
			Columns: entpost.ShareWithPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.ShareWithIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entpost.ShareWithTable,
			Columns: entpost.ShareWithPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epu.mutation.BelongsToCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entpost.BelongsToTable,
			Columns: []string{entpost.BelongsToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entcourse.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.BelongsToIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entpost.BelongsToTable,
			Columns: []string{entpost.BelongsToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entcourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epu.mutation.OwnedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entpost.OwnedByTable,
			Columns: []string{entpost.OwnedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.OwnedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entpost.OwnedByTable,
			Columns: []string{entpost.OwnedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, epu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entpost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// EntPostUpdateOne is the builder for updating a single EntPost entity.
type EntPostUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EntPostMutation
}

// SetUpdatedAt sets the "updatedAt" field.
func (epuo *EntPostUpdateOne) SetUpdatedAt(t time.Time) *EntPostUpdateOne {
	epuo.mutation.SetUpdatedAt(t)
	return epuo
}

// SetTimestamp sets the "timestamp" field.
func (epuo *EntPostUpdateOne) SetTimestamp(t time.Time) *EntPostUpdateOne {
	epuo.mutation.SetTimestamp(t)
	return epuo
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (epuo *EntPostUpdateOne) SetNillableTimestamp(t *time.Time) *EntPostUpdateOne {
	if t != nil {
		epuo.SetTimestamp(*t)
	}
	return epuo
}

// SetContent sets the "content" field.
func (epuo *EntPostUpdateOne) SetContent(s string) *EntPostUpdateOne {
	epuo.mutation.SetContent(s)
	return epuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (epuo *EntPostUpdateOne) SetNillableContent(s *string) *EntPostUpdateOne {
	if s != nil {
		epuo.SetContent(*s)
	}
	return epuo
}

// ClearContent clears the value of the "content" field.
func (epuo *EntPostUpdateOne) ClearContent() *EntPostUpdateOne {
	epuo.mutation.ClearContent()
	return epuo
}

// SetShare sets the "share" field.
func (epuo *EntPostUpdateOne) SetShare(e entpost.Share) *EntPostUpdateOne {
	epuo.mutation.SetShare(e)
	return epuo
}

// SetNillableShare sets the "share" field if the given value is not nil.
func (epuo *EntPostUpdateOne) SetNillableShare(e *entpost.Share) *EntPostUpdateOne {
	if e != nil {
		epuo.SetShare(*e)
	}
	return epuo
}

// ClearShare clears the value of the "share" field.
func (epuo *EntPostUpdateOne) ClearShare() *EntPostUpdateOne {
	epuo.mutation.ClearShare()
	return epuo
}

// AddCommentIDs adds the "comment" edge to the EntComment entity by IDs.
func (epuo *EntPostUpdateOne) AddCommentIDs(ids ...int) *EntPostUpdateOne {
	epuo.mutation.AddCommentIDs(ids...)
	return epuo
}

// AddComment adds the "comment" edges to the EntComment entity.
func (epuo *EntPostUpdateOne) AddComment(e ...*EntComment) *EntPostUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epuo.AddCommentIDs(ids...)
}

// AddShareWithIDs adds the "shareWith" edge to the EntUser entity by IDs.
func (epuo *EntPostUpdateOne) AddShareWithIDs(ids ...int) *EntPostUpdateOne {
	epuo.mutation.AddShareWithIDs(ids...)
	return epuo
}

// AddShareWith adds the "shareWith" edges to the EntUser entity.
func (epuo *EntPostUpdateOne) AddShareWith(e ...*EntUser) *EntPostUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epuo.AddShareWithIDs(ids...)
}

// SetBelongsToID sets the "belongsTo" edge to the EntCourse entity by ID.
func (epuo *EntPostUpdateOne) SetBelongsToID(id int) *EntPostUpdateOne {
	epuo.mutation.SetBelongsToID(id)
	return epuo
}

// SetNillableBelongsToID sets the "belongsTo" edge to the EntCourse entity by ID if the given value is not nil.
func (epuo *EntPostUpdateOne) SetNillableBelongsToID(id *int) *EntPostUpdateOne {
	if id != nil {
		epuo = epuo.SetBelongsToID(*id)
	}
	return epuo
}

// SetBelongsTo sets the "belongsTo" edge to the EntCourse entity.
func (epuo *EntPostUpdateOne) SetBelongsTo(e *EntCourse) *EntPostUpdateOne {
	return epuo.SetBelongsToID(e.ID)
}

// SetOwnedByID sets the "ownedBy" edge to the EntUser entity by ID.
func (epuo *EntPostUpdateOne) SetOwnedByID(id int) *EntPostUpdateOne {
	epuo.mutation.SetOwnedByID(id)
	return epuo
}

// SetNillableOwnedByID sets the "ownedBy" edge to the EntUser entity by ID if the given value is not nil.
func (epuo *EntPostUpdateOne) SetNillableOwnedByID(id *int) *EntPostUpdateOne {
	if id != nil {
		epuo = epuo.SetOwnedByID(*id)
	}
	return epuo
}

// SetOwnedBy sets the "ownedBy" edge to the EntUser entity.
func (epuo *EntPostUpdateOne) SetOwnedBy(e *EntUser) *EntPostUpdateOne {
	return epuo.SetOwnedByID(e.ID)
}

// Mutation returns the EntPostMutation object of the builder.
func (epuo *EntPostUpdateOne) Mutation() *EntPostMutation {
	return epuo.mutation
}

// ClearComment clears all "comment" edges to the EntComment entity.
func (epuo *EntPostUpdateOne) ClearComment() *EntPostUpdateOne {
	epuo.mutation.ClearComment()
	return epuo
}

// RemoveCommentIDs removes the "comment" edge to EntComment entities by IDs.
func (epuo *EntPostUpdateOne) RemoveCommentIDs(ids ...int) *EntPostUpdateOne {
	epuo.mutation.RemoveCommentIDs(ids...)
	return epuo
}

// RemoveComment removes "comment" edges to EntComment entities.
func (epuo *EntPostUpdateOne) RemoveComment(e ...*EntComment) *EntPostUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epuo.RemoveCommentIDs(ids...)
}

// ClearShareWith clears all "shareWith" edges to the EntUser entity.
func (epuo *EntPostUpdateOne) ClearShareWith() *EntPostUpdateOne {
	epuo.mutation.ClearShareWith()
	return epuo
}

// RemoveShareWithIDs removes the "shareWith" edge to EntUser entities by IDs.
func (epuo *EntPostUpdateOne) RemoveShareWithIDs(ids ...int) *EntPostUpdateOne {
	epuo.mutation.RemoveShareWithIDs(ids...)
	return epuo
}

// RemoveShareWith removes "shareWith" edges to EntUser entities.
func (epuo *EntPostUpdateOne) RemoveShareWith(e ...*EntUser) *EntPostUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epuo.RemoveShareWithIDs(ids...)
}

// ClearBelongsTo clears the "belongsTo" edge to the EntCourse entity.
func (epuo *EntPostUpdateOne) ClearBelongsTo() *EntPostUpdateOne {
	epuo.mutation.ClearBelongsTo()
	return epuo
}

// ClearOwnedBy clears the "ownedBy" edge to the EntUser entity.
func (epuo *EntPostUpdateOne) ClearOwnedBy() *EntPostUpdateOne {
	epuo.mutation.ClearOwnedBy()
	return epuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (epuo *EntPostUpdateOne) Select(field string, fields ...string) *EntPostUpdateOne {
	epuo.fields = append([]string{field}, fields...)
	return epuo
}

// Save executes the query and returns the updated EntPost entity.
func (epuo *EntPostUpdateOne) Save(ctx context.Context) (*EntPost, error) {
	var (
		err  error
		node *EntPost
	)
	epuo.defaults()
	if len(epuo.hooks) == 0 {
		if err = epuo.check(); err != nil {
			return nil, err
		}
		node, err = epuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EntPostMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = epuo.check(); err != nil {
				return nil, err
			}
			epuo.mutation = mutation
			node, err = epuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(epuo.hooks) - 1; i >= 0; i-- {
			if epuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = epuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, epuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*EntPost)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from EntPostMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (epuo *EntPostUpdateOne) SaveX(ctx context.Context) *EntPost {
	node, err := epuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (epuo *EntPostUpdateOne) Exec(ctx context.Context) error {
	_, err := epuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epuo *EntPostUpdateOne) ExecX(ctx context.Context) {
	if err := epuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (epuo *EntPostUpdateOne) defaults() {
	if _, ok := epuo.mutation.UpdatedAt(); !ok {
		v := entpost.UpdateDefaultUpdatedAt()
		epuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (epuo *EntPostUpdateOne) check() error {
	if v, ok := epuo.mutation.Share(); ok {
		if err := entpost.ShareValidator(v); err != nil {
			return &ValidationError{Name: "share", err: fmt.Errorf(`ent: validator failed for field "EntPost.share": %w`, err)}
		}
	}
	return nil
}

func (epuo *EntPostUpdateOne) sqlSave(ctx context.Context) (_node *EntPost, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   entpost.Table,
			Columns: entpost.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: entpost.FieldID,
			},
		},
	}
	id, ok := epuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EntPost.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := epuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, entpost.FieldID)
		for _, f := range fields {
			if !entpost.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != entpost.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := epuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := epuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: entpost.FieldUpdatedAt,
		})
	}
	if value, ok := epuo.mutation.Timestamp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: entpost.FieldTimestamp,
		})
	}
	if value, ok := epuo.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entpost.FieldContent,
		})
	}
	if epuo.mutation.ContentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: entpost.FieldContent,
		})
	}
	if value, ok := epuo.mutation.Share(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: entpost.FieldShare,
		})
	}
	if epuo.mutation.ShareCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: entpost.FieldShare,
		})
	}
	if epuo.mutation.CommentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entpost.CommentTable,
			Columns: []string{entpost.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entcomment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.RemovedCommentIDs(); len(nodes) > 0 && !epuo.mutation.CommentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entpost.CommentTable,
			Columns: []string{entpost.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entcomment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.CommentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entpost.CommentTable,
			Columns: []string{entpost.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entcomment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epuo.mutation.ShareWithCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entpost.ShareWithTable,
			Columns: entpost.ShareWithPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.RemovedShareWithIDs(); len(nodes) > 0 && !epuo.mutation.ShareWithCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entpost.ShareWithTable,
			Columns: entpost.ShareWithPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.ShareWithIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entpost.ShareWithTable,
			Columns: entpost.ShareWithPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epuo.mutation.BelongsToCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entpost.BelongsToTable,
			Columns: []string{entpost.BelongsToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entcourse.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.BelongsToIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entpost.BelongsToTable,
			Columns: []string{entpost.BelongsToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entcourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epuo.mutation.OwnedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entpost.OwnedByTable,
			Columns: []string{entpost.OwnedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.OwnedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entpost.OwnedByTable,
			Columns: []string{entpost.OwnedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EntPost{config: epuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, epuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entpost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
