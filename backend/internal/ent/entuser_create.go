// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/internal/ent/entattendance"
	"backend/internal/ent/entcomment"
	"backend/internal/ent/entcourse"
	"backend/internal/ent/entpost"
	"backend/internal/ent/enttodo"
	"backend/internal/ent/entuser"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EntUserCreate is the builder for creating a EntUser entity.
type EntUserCreate struct {
	config
	mutation *EntUserMutation
	hooks    []Hook
}

// SetCreatedAt sets the "createdAt" field.
func (euc *EntUserCreate) SetCreatedAt(t time.Time) *EntUserCreate {
	euc.mutation.SetCreatedAt(t)
	return euc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (euc *EntUserCreate) SetNillableCreatedAt(t *time.Time) *EntUserCreate {
	if t != nil {
		euc.SetCreatedAt(*t)
	}
	return euc
}

// SetUpdatedAt sets the "updatedAt" field.
func (euc *EntUserCreate) SetUpdatedAt(t time.Time) *EntUserCreate {
	euc.mutation.SetUpdatedAt(t)
	return euc
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (euc *EntUserCreate) SetNillableUpdatedAt(t *time.Time) *EntUserCreate {
	if t != nil {
		euc.SetUpdatedAt(*t)
	}
	return euc
}

// SetName sets the "name" field.
func (euc *EntUserCreate) SetName(s string) *EntUserCreate {
	euc.mutation.SetName(s)
	return euc
}

// SetEmail sets the "email" field.
func (euc *EntUserCreate) SetEmail(s string) *EntUserCreate {
	euc.mutation.SetEmail(s)
	return euc
}

// SetPassword sets the "password" field.
func (euc *EntUserCreate) SetPassword(s string) *EntUserCreate {
	euc.mutation.SetPassword(s)
	return euc
}

// SetCountry sets the "country" field.
func (euc *EntUserCreate) SetCountry(s string) *EntUserCreate {
	euc.mutation.SetCountry(s)
	return euc
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (euc *EntUserCreate) SetNillableCountry(s *string) *EntUserCreate {
	if s != nil {
		euc.SetCountry(*s)
	}
	return euc
}

// SetPhone sets the "phone" field.
func (euc *EntUserCreate) SetPhone(s string) *EntUserCreate {
	euc.mutation.SetPhone(s)
	return euc
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (euc *EntUserCreate) SetNillablePhone(s *string) *EntUserCreate {
	if s != nil {
		euc.SetPhone(*s)
	}
	return euc
}

// SetProfilePictureUrl sets the "profilePictureUrl" field.
func (euc *EntUserCreate) SetProfilePictureUrl(s string) *EntUserCreate {
	euc.mutation.SetProfilePictureUrl(s)
	return euc
}

// SetNillableProfilePictureUrl sets the "profilePictureUrl" field if the given value is not nil.
func (euc *EntUserCreate) SetNillableProfilePictureUrl(s *string) *EntUserCreate {
	if s != nil {
		euc.SetProfilePictureUrl(*s)
	}
	return euc
}

// SetIsTutor sets the "isTutor" field.
func (euc *EntUserCreate) SetIsTutor(b bool) *EntUserCreate {
	euc.mutation.SetIsTutor(b)
	return euc
}

// SetNillableIsTutor sets the "isTutor" field if the given value is not nil.
func (euc *EntUserCreate) SetNillableIsTutor(b *bool) *EntUserCreate {
	if b != nil {
		euc.SetIsTutor(*b)
	}
	return euc
}

// SetIsStudent sets the "isStudent" field.
func (euc *EntUserCreate) SetIsStudent(b bool) *EntUserCreate {
	euc.mutation.SetIsStudent(b)
	return euc
}

// SetNillableIsStudent sets the "isStudent" field if the given value is not nil.
func (euc *EntUserCreate) SetNillableIsStudent(b *bool) *EntUserCreate {
	if b != nil {
		euc.SetIsStudent(*b)
	}
	return euc
}

// SetIsParent sets the "isParent" field.
func (euc *EntUserCreate) SetIsParent(b bool) *EntUserCreate {
	euc.mutation.SetIsParent(b)
	return euc
}

// SetNillableIsParent sets the "isParent" field if the given value is not nil.
func (euc *EntUserCreate) SetNillableIsParent(b *bool) *EntUserCreate {
	if b != nil {
		euc.SetIsParent(*b)
	}
	return euc
}

// AddCourseIDs adds the "course" edge to the EntCourse entity by IDs.
func (euc *EntUserCreate) AddCourseIDs(ids ...int) *EntUserCreate {
	euc.mutation.AddCourseIDs(ids...)
	return euc
}

// AddCourse adds the "course" edges to the EntCourse entity.
func (euc *EntUserCreate) AddCourse(e ...*EntCourse) *EntUserCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euc.AddCourseIDs(ids...)
}

// AddTodoIDs adds the "todo" edge to the EntTodo entity by IDs.
func (euc *EntUserCreate) AddTodoIDs(ids ...int) *EntUserCreate {
	euc.mutation.AddTodoIDs(ids...)
	return euc
}

// AddTodo adds the "todo" edges to the EntTodo entity.
func (euc *EntUserCreate) AddTodo(e ...*EntTodo) *EntUserCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euc.AddTodoIDs(ids...)
}

// AddAttendanceIDs adds the "attendance" edge to the EntAttendance entity by IDs.
func (euc *EntUserCreate) AddAttendanceIDs(ids ...int) *EntUserCreate {
	euc.mutation.AddAttendanceIDs(ids...)
	return euc
}

// AddAttendance adds the "attendance" edges to the EntAttendance entity.
func (euc *EntUserCreate) AddAttendance(e ...*EntAttendance) *EntUserCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euc.AddAttendanceIDs(ids...)
}

// AddPostIDs adds the "post" edge to the EntPost entity by IDs.
func (euc *EntUserCreate) AddPostIDs(ids ...int) *EntUserCreate {
	euc.mutation.AddPostIDs(ids...)
	return euc
}

// AddPost adds the "post" edges to the EntPost entity.
func (euc *EntUserCreate) AddPost(e ...*EntPost) *EntUserCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euc.AddPostIDs(ids...)
}

// AddCommentIDs adds the "comment" edge to the EntComment entity by IDs.
func (euc *EntUserCreate) AddCommentIDs(ids ...int) *EntUserCreate {
	euc.mutation.AddCommentIDs(ids...)
	return euc
}

// AddComment adds the "comment" edges to the EntComment entity.
func (euc *EntUserCreate) AddComment(e ...*EntComment) *EntUserCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euc.AddCommentIDs(ids...)
}

// AddJoinIDs adds the "join" edge to the EntCourse entity by IDs.
func (euc *EntUserCreate) AddJoinIDs(ids ...int) *EntUserCreate {
	euc.mutation.AddJoinIDs(ids...)
	return euc
}

// AddJoin adds the "join" edges to the EntCourse entity.
func (euc *EntUserCreate) AddJoin(e ...*EntCourse) *EntUserCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euc.AddJoinIDs(ids...)
}

// AddChildIDs adds the "children" edge to the EntUser entity by IDs.
func (euc *EntUserCreate) AddChildIDs(ids ...int) *EntUserCreate {
	euc.mutation.AddChildIDs(ids...)
	return euc
}

// AddChildren adds the "children" edges to the EntUser entity.
func (euc *EntUserCreate) AddChildren(e ...*EntUser) *EntUserCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euc.AddChildIDs(ids...)
}

// AddParentIDs adds the "parent" edge to the EntUser entity by IDs.
func (euc *EntUserCreate) AddParentIDs(ids ...int) *EntUserCreate {
	euc.mutation.AddParentIDs(ids...)
	return euc
}

// AddParent adds the "parent" edges to the EntUser entity.
func (euc *EntUserCreate) AddParent(e ...*EntUser) *EntUserCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euc.AddParentIDs(ids...)
}

// AddStudentIDs adds the "student" edge to the EntUser entity by IDs.
func (euc *EntUserCreate) AddStudentIDs(ids ...int) *EntUserCreate {
	euc.mutation.AddStudentIDs(ids...)
	return euc
}

// AddStudent adds the "student" edges to the EntUser entity.
func (euc *EntUserCreate) AddStudent(e ...*EntUser) *EntUserCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euc.AddStudentIDs(ids...)
}

// AddTutorIDs adds the "tutor" edge to the EntUser entity by IDs.
func (euc *EntUserCreate) AddTutorIDs(ids ...int) *EntUserCreate {
	euc.mutation.AddTutorIDs(ids...)
	return euc
}

// AddTutor adds the "tutor" edges to the EntUser entity.
func (euc *EntUserCreate) AddTutor(e ...*EntUser) *EntUserCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euc.AddTutorIDs(ids...)
}

// AddSParentIDs adds the "SParent" edge to the EntUser entity by IDs.
func (euc *EntUserCreate) AddSParentIDs(ids ...int) *EntUserCreate {
	euc.mutation.AddSParentIDs(ids...)
	return euc
}

// AddSParent adds the "SParent" edges to the EntUser entity.
func (euc *EntUserCreate) AddSParent(e ...*EntUser) *EntUserCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euc.AddSParentIDs(ids...)
}

// AddSTutorIDs adds the "STutor" edge to the EntUser entity by IDs.
func (euc *EntUserCreate) AddSTutorIDs(ids ...int) *EntUserCreate {
	euc.mutation.AddSTutorIDs(ids...)
	return euc
}

// AddSTutor adds the "STutor" edges to the EntUser entity.
func (euc *EntUserCreate) AddSTutor(e ...*EntUser) *EntUserCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euc.AddSTutorIDs(ids...)
}

// AddCanSeeIDs adds the "canSee" edge to the EntPost entity by IDs.
func (euc *EntUserCreate) AddCanSeeIDs(ids ...int) *EntUserCreate {
	euc.mutation.AddCanSeeIDs(ids...)
	return euc
}

// AddCanSee adds the "canSee" edges to the EntPost entity.
func (euc *EntUserCreate) AddCanSee(e ...*EntPost) *EntUserCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euc.AddCanSeeIDs(ids...)
}

// Mutation returns the EntUserMutation object of the builder.
func (euc *EntUserCreate) Mutation() *EntUserMutation {
	return euc.mutation
}

// Save creates the EntUser in the database.
func (euc *EntUserCreate) Save(ctx context.Context) (*EntUser, error) {
	var (
		err  error
		node *EntUser
	)
	euc.defaults()
	if len(euc.hooks) == 0 {
		if err = euc.check(); err != nil {
			return nil, err
		}
		node, err = euc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EntUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = euc.check(); err != nil {
				return nil, err
			}
			euc.mutation = mutation
			if node, err = euc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(euc.hooks) - 1; i >= 0; i-- {
			if euc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = euc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, euc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*EntUser)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from EntUserMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (euc *EntUserCreate) SaveX(ctx context.Context) *EntUser {
	v, err := euc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (euc *EntUserCreate) Exec(ctx context.Context) error {
	_, err := euc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euc *EntUserCreate) ExecX(ctx context.Context) {
	if err := euc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euc *EntUserCreate) defaults() {
	if _, ok := euc.mutation.CreatedAt(); !ok {
		v := entuser.DefaultCreatedAt()
		euc.mutation.SetCreatedAt(v)
	}
	if _, ok := euc.mutation.UpdatedAt(); !ok {
		v := entuser.DefaultUpdatedAt()
		euc.mutation.SetUpdatedAt(v)
	}
	if _, ok := euc.mutation.IsTutor(); !ok {
		v := entuser.DefaultIsTutor
		euc.mutation.SetIsTutor(v)
	}
	if _, ok := euc.mutation.IsStudent(); !ok {
		v := entuser.DefaultIsStudent
		euc.mutation.SetIsStudent(v)
	}
	if _, ok := euc.mutation.IsParent(); !ok {
		v := entuser.DefaultIsParent
		euc.mutation.SetIsParent(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euc *EntUserCreate) check() error {
	if _, ok := euc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "EntUser.createdAt"`)}
	}
	if _, ok := euc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "EntUser.updatedAt"`)}
	}
	if _, ok := euc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "EntUser.name"`)}
	}
	if v, ok := euc.mutation.Name(); ok {
		if err := entuser.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "EntUser.name": %w`, err)}
		}
	}
	if _, ok := euc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "EntUser.email"`)}
	}
	if v, ok := euc.mutation.Email(); ok {
		if err := entuser.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "EntUser.email": %w`, err)}
		}
	}
	if _, ok := euc.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "EntUser.password"`)}
	}
	if v, ok := euc.mutation.Password(); ok {
		if err := entuser.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "EntUser.password": %w`, err)}
		}
	}
	if v, ok := euc.mutation.Phone(); ok {
		if err := entuser.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "EntUser.phone": %w`, err)}
		}
	}
	if _, ok := euc.mutation.IsTutor(); !ok {
		return &ValidationError{Name: "isTutor", err: errors.New(`ent: missing required field "EntUser.isTutor"`)}
	}
	if _, ok := euc.mutation.IsStudent(); !ok {
		return &ValidationError{Name: "isStudent", err: errors.New(`ent: missing required field "EntUser.isStudent"`)}
	}
	if _, ok := euc.mutation.IsParent(); !ok {
		return &ValidationError{Name: "isParent", err: errors.New(`ent: missing required field "EntUser.isParent"`)}
	}
	return nil
}

func (euc *EntUserCreate) sqlSave(ctx context.Context) (*EntUser, error) {
	_node, _spec := euc.createSpec()
	if err := sqlgraph.CreateNode(ctx, euc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (euc *EntUserCreate) createSpec() (*EntUser, *sqlgraph.CreateSpec) {
	var (
		_node = &EntUser{config: euc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: entuser.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: entuser.FieldID,
			},
		}
	)
	if value, ok := euc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: entuser.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := euc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: entuser.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := euc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entuser.FieldName,
		})
		_node.Name = value
	}
	if value, ok := euc.mutation.Email(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entuser.FieldEmail,
		})
		_node.Email = value
	}
	if value, ok := euc.mutation.Password(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entuser.FieldPassword,
		})
		_node.Password = value
	}
	if value, ok := euc.mutation.Country(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entuser.FieldCountry,
		})
		_node.Country = value
	}
	if value, ok := euc.mutation.Phone(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entuser.FieldPhone,
		})
		_node.Phone = value
	}
	if value, ok := euc.mutation.ProfilePictureUrl(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entuser.FieldProfilePictureUrl,
		})
		_node.ProfilePictureUrl = value
	}
	if value, ok := euc.mutation.IsTutor(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: entuser.FieldIsTutor,
		})
		_node.IsTutor = value
	}
	if value, ok := euc.mutation.IsStudent(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: entuser.FieldIsStudent,
		})
		_node.IsStudent = value
	}
	if value, ok := euc.mutation.IsParent(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: entuser.FieldIsParent,
		})
		_node.IsParent = value
	}
	if nodes := euc.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entuser.CourseTable,
			Columns: entuser.CoursePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entcourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := euc.mutation.TodoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entuser.TodoTable,
			Columns: []string{entuser.TodoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enttodo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := euc.mutation.AttendanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entuser.AttendanceTable,
			Columns: []string{entuser.AttendanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entattendance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := euc.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entuser.PostTable,
			Columns: []string{entuser.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entpost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := euc.mutation.CommentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entuser.CommentTable,
			Columns: []string{entuser.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entcomment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := euc.mutation.JoinIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entuser.JoinTable,
			Columns: entuser.JoinPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entcourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := euc.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   entuser.ChildrenTable,
			Columns: entuser.ChildrenPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := euc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entuser.ParentTable,
			Columns: entuser.ParentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := euc.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   entuser.StudentTable,
			Columns: entuser.StudentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := euc.mutation.TutorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entuser.TutorTable,
			Columns: entuser.TutorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := euc.mutation.SParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   entuser.SParentTable,
			Columns: entuser.SParentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := euc.mutation.STutorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entuser.STutorTable,
			Columns: entuser.STutorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := euc.mutation.CanSeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   entuser.CanSeeTable,
			Columns: entuser.CanSeePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entpost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EntUserCreateBulk is the builder for creating many EntUser entities in bulk.
type EntUserCreateBulk struct {
	config
	builders []*EntUserCreate
}

// Save creates the EntUser entities in the database.
func (eucb *EntUserCreateBulk) Save(ctx context.Context) ([]*EntUser, error) {
	specs := make([]*sqlgraph.CreateSpec, len(eucb.builders))
	nodes := make([]*EntUser, len(eucb.builders))
	mutators := make([]Mutator, len(eucb.builders))
	for i := range eucb.builders {
		func(i int, root context.Context) {
			builder := eucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EntUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, eucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, eucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, eucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (eucb *EntUserCreateBulk) SaveX(ctx context.Context) []*EntUser {
	v, err := eucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eucb *EntUserCreateBulk) Exec(ctx context.Context) error {
	_, err := eucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eucb *EntUserCreateBulk) ExecX(ctx context.Context) {
	if err := eucb.Exec(ctx); err != nil {
		panic(err)
	}
}
