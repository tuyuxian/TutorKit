// Code generated by ent, DO NOT EDIT.

package entuser

import (
	"backend/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// FirstName applies equality check predicate on the "firstName" field. It's identical to FirstNameEQ.
func FirstName(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstName), v))
	})
}

// LastName applies equality check predicate on the "lastName" field. It's identical to LastNameEQ.
func LastName(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastName), v))
	})
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmail), v))
	})
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPassword), v))
	})
}

// Country applies equality check predicate on the "country" field. It's identical to CountryEQ.
func Country(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCountry), v))
	})
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhone), v))
	})
}

// DateOfBirth applies equality check predicate on the "dateOfBirth" field. It's identical to DateOfBirthEQ.
func DateOfBirth(v time.Time) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateOfBirth), v))
	})
}

// ProfilePictureUrl applies equality check predicate on the "profilePictureUrl" field. It's identical to ProfilePictureUrlEQ.
func ProfilePictureUrl(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProfilePictureUrl), v))
	})
}

// IsTutor applies equality check predicate on the "isTutor" field. It's identical to IsTutorEQ.
func IsTutor(v bool) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsTutor), v))
	})
}

// IsStudent applies equality check predicate on the "isStudent" field. It's identical to IsStudentEQ.
func IsStudent(v bool) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsStudent), v))
	})
}

// IsParent applies equality check predicate on the "isParent" field. It's identical to IsParentEQ.
func IsParent(v bool) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsParent), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.EntUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.EntUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.EntUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.EntUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// FirstNameEQ applies the EQ predicate on the "firstName" field.
func FirstNameEQ(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstName), v))
	})
}

// FirstNameNEQ applies the NEQ predicate on the "firstName" field.
func FirstNameNEQ(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFirstName), v))
	})
}

// FirstNameIn applies the In predicate on the "firstName" field.
func FirstNameIn(vs ...string) predicate.EntUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFirstName), v...))
	})
}

// FirstNameNotIn applies the NotIn predicate on the "firstName" field.
func FirstNameNotIn(vs ...string) predicate.EntUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFirstName), v...))
	})
}

// FirstNameGT applies the GT predicate on the "firstName" field.
func FirstNameGT(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFirstName), v))
	})
}

// FirstNameGTE applies the GTE predicate on the "firstName" field.
func FirstNameGTE(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFirstName), v))
	})
}

// FirstNameLT applies the LT predicate on the "firstName" field.
func FirstNameLT(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFirstName), v))
	})
}

// FirstNameLTE applies the LTE predicate on the "firstName" field.
func FirstNameLTE(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFirstName), v))
	})
}

// FirstNameContains applies the Contains predicate on the "firstName" field.
func FirstNameContains(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFirstName), v))
	})
}

// FirstNameHasPrefix applies the HasPrefix predicate on the "firstName" field.
func FirstNameHasPrefix(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFirstName), v))
	})
}

// FirstNameHasSuffix applies the HasSuffix predicate on the "firstName" field.
func FirstNameHasSuffix(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFirstName), v))
	})
}

// FirstNameEqualFold applies the EqualFold predicate on the "firstName" field.
func FirstNameEqualFold(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFirstName), v))
	})
}

// FirstNameContainsFold applies the ContainsFold predicate on the "firstName" field.
func FirstNameContainsFold(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFirstName), v))
	})
}

// LastNameEQ applies the EQ predicate on the "lastName" field.
func LastNameEQ(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastName), v))
	})
}

// LastNameNEQ applies the NEQ predicate on the "lastName" field.
func LastNameNEQ(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastName), v))
	})
}

// LastNameIn applies the In predicate on the "lastName" field.
func LastNameIn(vs ...string) predicate.EntUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLastName), v...))
	})
}

// LastNameNotIn applies the NotIn predicate on the "lastName" field.
func LastNameNotIn(vs ...string) predicate.EntUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLastName), v...))
	})
}

// LastNameGT applies the GT predicate on the "lastName" field.
func LastNameGT(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastName), v))
	})
}

// LastNameGTE applies the GTE predicate on the "lastName" field.
func LastNameGTE(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastName), v))
	})
}

// LastNameLT applies the LT predicate on the "lastName" field.
func LastNameLT(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastName), v))
	})
}

// LastNameLTE applies the LTE predicate on the "lastName" field.
func LastNameLTE(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastName), v))
	})
}

// LastNameContains applies the Contains predicate on the "lastName" field.
func LastNameContains(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLastName), v))
	})
}

// LastNameHasPrefix applies the HasPrefix predicate on the "lastName" field.
func LastNameHasPrefix(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLastName), v))
	})
}

// LastNameHasSuffix applies the HasSuffix predicate on the "lastName" field.
func LastNameHasSuffix(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLastName), v))
	})
}

// LastNameEqualFold applies the EqualFold predicate on the "lastName" field.
func LastNameEqualFold(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLastName), v))
	})
}

// LastNameContainsFold applies the ContainsFold predicate on the "lastName" field.
func LastNameContainsFold(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLastName), v))
	})
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmail), v))
	})
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEmail), v))
	})
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.EntUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEmail), v...))
	})
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.EntUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEmail), v...))
	})
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEmail), v))
	})
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEmail), v))
	})
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEmail), v))
	})
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEmail), v))
	})
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEmail), v))
	})
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEmail), v))
	})
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEmail), v))
	})
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEmail), v))
	})
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEmail), v))
	})
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPassword), v))
	})
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPassword), v))
	})
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.EntUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPassword), v...))
	})
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.EntUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPassword), v...))
	})
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPassword), v))
	})
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPassword), v))
	})
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPassword), v))
	})
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPassword), v))
	})
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPassword), v))
	})
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPassword), v))
	})
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPassword), v))
	})
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPassword), v))
	})
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPassword), v))
	})
}

// CountryEQ applies the EQ predicate on the "country" field.
func CountryEQ(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCountry), v))
	})
}

// CountryNEQ applies the NEQ predicate on the "country" field.
func CountryNEQ(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCountry), v))
	})
}

// CountryIn applies the In predicate on the "country" field.
func CountryIn(vs ...string) predicate.EntUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCountry), v...))
	})
}

// CountryNotIn applies the NotIn predicate on the "country" field.
func CountryNotIn(vs ...string) predicate.EntUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCountry), v...))
	})
}

// CountryGT applies the GT predicate on the "country" field.
func CountryGT(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCountry), v))
	})
}

// CountryGTE applies the GTE predicate on the "country" field.
func CountryGTE(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCountry), v))
	})
}

// CountryLT applies the LT predicate on the "country" field.
func CountryLT(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCountry), v))
	})
}

// CountryLTE applies the LTE predicate on the "country" field.
func CountryLTE(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCountry), v))
	})
}

// CountryContains applies the Contains predicate on the "country" field.
func CountryContains(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCountry), v))
	})
}

// CountryHasPrefix applies the HasPrefix predicate on the "country" field.
func CountryHasPrefix(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCountry), v))
	})
}

// CountryHasSuffix applies the HasSuffix predicate on the "country" field.
func CountryHasSuffix(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCountry), v))
	})
}

// CountryIsNil applies the IsNil predicate on the "country" field.
func CountryIsNil() predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCountry)))
	})
}

// CountryNotNil applies the NotNil predicate on the "country" field.
func CountryNotNil() predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCountry)))
	})
}

// CountryEqualFold applies the EqualFold predicate on the "country" field.
func CountryEqualFold(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCountry), v))
	})
}

// CountryContainsFold applies the ContainsFold predicate on the "country" field.
func CountryContainsFold(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCountry), v))
	})
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhone), v))
	})
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPhone), v))
	})
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.EntUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPhone), v...))
	})
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.EntUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPhone), v...))
	})
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPhone), v))
	})
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPhone), v))
	})
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPhone), v))
	})
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPhone), v))
	})
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPhone), v))
	})
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPhone), v))
	})
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPhone), v))
	})
}

// PhoneIsNil applies the IsNil predicate on the "phone" field.
func PhoneIsNil() predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPhone)))
	})
}

// PhoneNotNil applies the NotNil predicate on the "phone" field.
func PhoneNotNil() predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPhone)))
	})
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPhone), v))
	})
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPhone), v))
	})
}

// DateOfBirthEQ applies the EQ predicate on the "dateOfBirth" field.
func DateOfBirthEQ(v time.Time) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateOfBirth), v))
	})
}

// DateOfBirthNEQ applies the NEQ predicate on the "dateOfBirth" field.
func DateOfBirthNEQ(v time.Time) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDateOfBirth), v))
	})
}

// DateOfBirthIn applies the In predicate on the "dateOfBirth" field.
func DateOfBirthIn(vs ...time.Time) predicate.EntUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDateOfBirth), v...))
	})
}

// DateOfBirthNotIn applies the NotIn predicate on the "dateOfBirth" field.
func DateOfBirthNotIn(vs ...time.Time) predicate.EntUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDateOfBirth), v...))
	})
}

// DateOfBirthGT applies the GT predicate on the "dateOfBirth" field.
func DateOfBirthGT(v time.Time) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDateOfBirth), v))
	})
}

// DateOfBirthGTE applies the GTE predicate on the "dateOfBirth" field.
func DateOfBirthGTE(v time.Time) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDateOfBirth), v))
	})
}

// DateOfBirthLT applies the LT predicate on the "dateOfBirth" field.
func DateOfBirthLT(v time.Time) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDateOfBirth), v))
	})
}

// DateOfBirthLTE applies the LTE predicate on the "dateOfBirth" field.
func DateOfBirthLTE(v time.Time) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDateOfBirth), v))
	})
}

// DateOfBirthIsNil applies the IsNil predicate on the "dateOfBirth" field.
func DateOfBirthIsNil() predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDateOfBirth)))
	})
}

// DateOfBirthNotNil applies the NotNil predicate on the "dateOfBirth" field.
func DateOfBirthNotNil() predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDateOfBirth)))
	})
}

// ProfilePictureUrlEQ applies the EQ predicate on the "profilePictureUrl" field.
func ProfilePictureUrlEQ(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProfilePictureUrl), v))
	})
}

// ProfilePictureUrlNEQ applies the NEQ predicate on the "profilePictureUrl" field.
func ProfilePictureUrlNEQ(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProfilePictureUrl), v))
	})
}

// ProfilePictureUrlIn applies the In predicate on the "profilePictureUrl" field.
func ProfilePictureUrlIn(vs ...string) predicate.EntUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldProfilePictureUrl), v...))
	})
}

// ProfilePictureUrlNotIn applies the NotIn predicate on the "profilePictureUrl" field.
func ProfilePictureUrlNotIn(vs ...string) predicate.EntUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldProfilePictureUrl), v...))
	})
}

// ProfilePictureUrlGT applies the GT predicate on the "profilePictureUrl" field.
func ProfilePictureUrlGT(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProfilePictureUrl), v))
	})
}

// ProfilePictureUrlGTE applies the GTE predicate on the "profilePictureUrl" field.
func ProfilePictureUrlGTE(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProfilePictureUrl), v))
	})
}

// ProfilePictureUrlLT applies the LT predicate on the "profilePictureUrl" field.
func ProfilePictureUrlLT(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProfilePictureUrl), v))
	})
}

// ProfilePictureUrlLTE applies the LTE predicate on the "profilePictureUrl" field.
func ProfilePictureUrlLTE(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProfilePictureUrl), v))
	})
}

// ProfilePictureUrlContains applies the Contains predicate on the "profilePictureUrl" field.
func ProfilePictureUrlContains(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProfilePictureUrl), v))
	})
}

// ProfilePictureUrlHasPrefix applies the HasPrefix predicate on the "profilePictureUrl" field.
func ProfilePictureUrlHasPrefix(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProfilePictureUrl), v))
	})
}

// ProfilePictureUrlHasSuffix applies the HasSuffix predicate on the "profilePictureUrl" field.
func ProfilePictureUrlHasSuffix(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProfilePictureUrl), v))
	})
}

// ProfilePictureUrlIsNil applies the IsNil predicate on the "profilePictureUrl" field.
func ProfilePictureUrlIsNil() predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldProfilePictureUrl)))
	})
}

// ProfilePictureUrlNotNil applies the NotNil predicate on the "profilePictureUrl" field.
func ProfilePictureUrlNotNil() predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldProfilePictureUrl)))
	})
}

// ProfilePictureUrlEqualFold applies the EqualFold predicate on the "profilePictureUrl" field.
func ProfilePictureUrlEqualFold(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProfilePictureUrl), v))
	})
}

// ProfilePictureUrlContainsFold applies the ContainsFold predicate on the "profilePictureUrl" field.
func ProfilePictureUrlContainsFold(v string) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProfilePictureUrl), v))
	})
}

// IsTutorEQ applies the EQ predicate on the "isTutor" field.
func IsTutorEQ(v bool) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsTutor), v))
	})
}

// IsTutorNEQ applies the NEQ predicate on the "isTutor" field.
func IsTutorNEQ(v bool) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsTutor), v))
	})
}

// IsStudentEQ applies the EQ predicate on the "isStudent" field.
func IsStudentEQ(v bool) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsStudent), v))
	})
}

// IsStudentNEQ applies the NEQ predicate on the "isStudent" field.
func IsStudentNEQ(v bool) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsStudent), v))
	})
}

// IsParentEQ applies the EQ predicate on the "isParent" field.
func IsParentEQ(v bool) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsParent), v))
	})
}

// IsParentNEQ applies the NEQ predicate on the "isParent" field.
func IsParentNEQ(v bool) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsParent), v))
	})
}

// HasCourse applies the HasEdge predicate on the "course" edge.
func HasCourse() predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CourseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, CourseTable, CoursePrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCourseWith applies the HasEdge predicate on the "course" edge with a given conditions (other predicates).
func HasCourseWith(preds ...predicate.EntCourse) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CourseInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, CourseTable, CoursePrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTodo applies the HasEdge predicate on the "todo" edge.
func HasTodo() predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TodoTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TodoTable, TodoColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTodoWith applies the HasEdge predicate on the "todo" edge with a given conditions (other predicates).
func HasTodoWith(preds ...predicate.EntTodo) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TodoInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TodoTable, TodoColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAttendance applies the HasEdge predicate on the "attendance" edge.
func HasAttendance() predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AttendanceTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AttendanceTable, AttendanceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAttendanceWith applies the HasEdge predicate on the "attendance" edge with a given conditions (other predicates).
func HasAttendanceWith(preds ...predicate.EntAttendance) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AttendanceInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AttendanceTable, AttendanceColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPost applies the HasEdge predicate on the "post" edge.
func HasPost() predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PostTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PostTable, PostColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPostWith applies the HasEdge predicate on the "post" edge with a given conditions (other predicates).
func HasPostWith(preds ...predicate.EntPost) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PostInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PostTable, PostColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasComment applies the HasEdge predicate on the "comment" edge.
func HasComment() predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CommentTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CommentTable, CommentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCommentWith applies the HasEdge predicate on the "comment" edge with a given conditions (other predicates).
func HasCommentWith(preds ...predicate.EntComment) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CommentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CommentTable, CommentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasJoin applies the HasEdge predicate on the "join" edge.
func HasJoin() predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(JoinTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, JoinTable, JoinPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasJoinWith applies the HasEdge predicate on the "join" edge with a given conditions (other predicates).
func HasJoinWith(preds ...predicate.EntCourse) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(JoinInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, JoinTable, JoinPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChildren applies the HasEdge predicate on the "children" edge.
func HasChildren() predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChildrenTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ChildrenTable, ChildrenPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildrenWith applies the HasEdge predicate on the "children" edge with a given conditions (other predicates).
func HasChildrenWith(preds ...predicate.EntUser) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ChildrenTable, ChildrenPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParent applies the HasEdge predicate on the "parent" edge.
func HasParent() predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ParentTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ParentTable, ParentPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentWith applies the HasEdge predicate on the "parent" edge with a given conditions (other predicates).
func HasParentWith(preds ...predicate.EntUser) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ParentTable, ParentPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStudent applies the HasEdge predicate on the "student" edge.
func HasStudent() predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StudentTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, StudentTable, StudentPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStudentWith applies the HasEdge predicate on the "student" edge with a given conditions (other predicates).
func HasStudentWith(preds ...predicate.EntUser) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, StudentTable, StudentPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTutor applies the HasEdge predicate on the "tutor" edge.
func HasTutor() predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TutorTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, TutorTable, TutorPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTutorWith applies the HasEdge predicate on the "tutor" edge with a given conditions (other predicates).
func HasTutorWith(preds ...predicate.EntUser) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, TutorTable, TutorPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSParent applies the HasEdge predicate on the "SParent" edge.
func HasSParent() predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SParentTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, SParentTable, SParentPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSParentWith applies the HasEdge predicate on the "SParent" edge with a given conditions (other predicates).
func HasSParentWith(preds ...predicate.EntUser) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, SParentTable, SParentPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSTutor applies the HasEdge predicate on the "STutor" edge.
func HasSTutor() predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(STutorTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, STutorTable, STutorPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSTutorWith applies the HasEdge predicate on the "STutor" edge with a given conditions (other predicates).
func HasSTutorWith(preds ...predicate.EntUser) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, STutorTable, STutorPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCanSee applies the HasEdge predicate on the "canSee" edge.
func HasCanSee() predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CanSeeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, CanSeeTable, CanSeePrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCanSeeWith applies the HasEdge predicate on the "canSee" edge with a given conditions (other predicates).
func HasCanSeeWith(preds ...predicate.EntPost) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CanSeeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, CanSeeTable, CanSeePrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EntUser) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EntUser) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EntUser) predicate.EntUser {
	return predicate.EntUser(func(s *sql.Selector) {
		p(s.Not())
	})
}
