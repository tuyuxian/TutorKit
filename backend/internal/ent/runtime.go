// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/internal/ent/entattendance"
	"backend/internal/ent/entcomment"
	"backend/internal/ent/entcourse"
	"backend/internal/ent/entpost"
	"backend/internal/ent/entuser"
	"backend/internal/ent/schema"
	"time"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	entattendanceFields := schema.EntAttendance{}.Fields()
	_ = entattendanceFields
	// entattendanceDescCheckedByTutor is the schema descriptor for checkedByTutor field.
	entattendanceDescCheckedByTutor := entattendanceFields[6].Descriptor()
	// entattendance.DefaultCheckedByTutor holds the default value on creation for the checkedByTutor field.
	entattendance.DefaultCheckedByTutor = entattendanceDescCheckedByTutor.Default.(bool)
	// entattendanceDescCheckedByStudent is the schema descriptor for checkedByStudent field.
	entattendanceDescCheckedByStudent := entattendanceFields[7].Descriptor()
	// entattendance.DefaultCheckedByStudent holds the default value on creation for the checkedByStudent field.
	entattendance.DefaultCheckedByStudent = entattendanceDescCheckedByStudent.Default.(bool)
	// entattendanceDescCheckedByParent is the schema descriptor for checkedByParent field.
	entattendanceDescCheckedByParent := entattendanceFields[8].Descriptor()
	// entattendance.DefaultCheckedByParent holds the default value on creation for the checkedByParent field.
	entattendance.DefaultCheckedByParent = entattendanceDescCheckedByParent.Default.(bool)
	entcommentFields := schema.EntComment{}.Fields()
	_ = entcommentFields
	// entcommentDescTimestamp is the schema descriptor for timestamp field.
	entcommentDescTimestamp := entcommentFields[0].Descriptor()
	// entcomment.DefaultTimestamp holds the default value on creation for the timestamp field.
	entcomment.DefaultTimestamp = entcommentDescTimestamp.Default.(time.Time)
	entcourseFields := schema.EntCourse{}.Fields()
	_ = entcourseFields
	// entcourseDescName is the schema descriptor for name field.
	entcourseDescName := entcourseFields[0].Descriptor()
	// entcourse.NameValidator is a validator for the "name" field. It is called by the builders before save.
	entcourse.NameValidator = entcourseDescName.Validators[0].(func(string) error)
	entpostFields := schema.EntPost{}.Fields()
	_ = entpostFields
	// entpostDescTimestamp is the schema descriptor for timestamp field.
	entpostDescTimestamp := entpostFields[0].Descriptor()
	// entpost.DefaultTimestamp holds the default value on creation for the timestamp field.
	entpost.DefaultTimestamp = entpostDescTimestamp.Default.(time.Time)
	enttodoFields := schema.EntTodo{}.Fields()
	_ = enttodoFields
	entuserFields := schema.EntUser{}.Fields()
	_ = entuserFields
	// entuserDescName is the schema descriptor for name field.
	entuserDescName := entuserFields[0].Descriptor()
	// entuser.NameValidator is a validator for the "name" field. It is called by the builders before save.
	entuser.NameValidator = entuserDescName.Validators[0].(func(string) error)
	// entuserDescEmail is the schema descriptor for email field.
	entuserDescEmail := entuserFields[1].Descriptor()
	// entuser.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	entuser.EmailValidator = func() func(string) error {
		validators := entuserDescEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(email string) error {
			for _, fn := range fns {
				if err := fn(email); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// entuserDescPassword is the schema descriptor for password field.
	entuserDescPassword := entuserFields[2].Descriptor()
	// entuser.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	entuser.PasswordValidator = entuserDescPassword.Validators[0].(func(string) error)
}
