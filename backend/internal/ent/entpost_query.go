// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/internal/ent/entcomment"
	"backend/internal/ent/entcourse"
	"backend/internal/ent/entpost"
	"backend/internal/ent/entuser"
	"backend/internal/ent/predicate"
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EntPostQuery is the builder for querying EntPost entities.
type EntPostQuery struct {
	config
	limit         *int
	offset        *int
	unique        *bool
	order         []OrderFunc
	fields        []string
	predicates    []predicate.EntPost
	withComment   *EntCommentQuery
	withShareWith *EntUserQuery
	withBelongsTo *EntCourseQuery
	withOwnedBy   *EntUserQuery
	withFKs       bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EntPostQuery builder.
func (epq *EntPostQuery) Where(ps ...predicate.EntPost) *EntPostQuery {
	epq.predicates = append(epq.predicates, ps...)
	return epq
}

// Limit adds a limit step to the query.
func (epq *EntPostQuery) Limit(limit int) *EntPostQuery {
	epq.limit = &limit
	return epq
}

// Offset adds an offset step to the query.
func (epq *EntPostQuery) Offset(offset int) *EntPostQuery {
	epq.offset = &offset
	return epq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (epq *EntPostQuery) Unique(unique bool) *EntPostQuery {
	epq.unique = &unique
	return epq
}

// Order adds an order step to the query.
func (epq *EntPostQuery) Order(o ...OrderFunc) *EntPostQuery {
	epq.order = append(epq.order, o...)
	return epq
}

// QueryComment chains the current query on the "comment" edge.
func (epq *EntPostQuery) QueryComment() *EntCommentQuery {
	query := &EntCommentQuery{config: epq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := epq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := epq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(entpost.Table, entpost.FieldID, selector),
			sqlgraph.To(entcomment.Table, entcomment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, entpost.CommentTable, entpost.CommentColumn),
		)
		fromU = sqlgraph.SetNeighbors(epq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryShareWith chains the current query on the "shareWith" edge.
func (epq *EntPostQuery) QueryShareWith() *EntUserQuery {
	query := &EntUserQuery{config: epq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := epq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := epq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(entpost.Table, entpost.FieldID, selector),
			sqlgraph.To(entuser.Table, entuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, entpost.ShareWithTable, entpost.ShareWithPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(epq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBelongsTo chains the current query on the "belongsTo" edge.
func (epq *EntPostQuery) QueryBelongsTo() *EntCourseQuery {
	query := &EntCourseQuery{config: epq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := epq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := epq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(entpost.Table, entpost.FieldID, selector),
			sqlgraph.To(entcourse.Table, entcourse.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, entpost.BelongsToTable, entpost.BelongsToColumn),
		)
		fromU = sqlgraph.SetNeighbors(epq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOwnedBy chains the current query on the "ownedBy" edge.
func (epq *EntPostQuery) QueryOwnedBy() *EntUserQuery {
	query := &EntUserQuery{config: epq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := epq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := epq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(entpost.Table, entpost.FieldID, selector),
			sqlgraph.To(entuser.Table, entuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, entpost.OwnedByTable, entpost.OwnedByColumn),
		)
		fromU = sqlgraph.SetNeighbors(epq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first EntPost entity from the query.
// Returns a *NotFoundError when no EntPost was found.
func (epq *EntPostQuery) First(ctx context.Context) (*EntPost, error) {
	nodes, err := epq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{entpost.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (epq *EntPostQuery) FirstX(ctx context.Context) *EntPost {
	node, err := epq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first EntPost ID from the query.
// Returns a *NotFoundError when no EntPost ID was found.
func (epq *EntPostQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = epq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{entpost.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (epq *EntPostQuery) FirstIDX(ctx context.Context) int {
	id, err := epq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single EntPost entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one EntPost entity is found.
// Returns a *NotFoundError when no EntPost entities are found.
func (epq *EntPostQuery) Only(ctx context.Context) (*EntPost, error) {
	nodes, err := epq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{entpost.Label}
	default:
		return nil, &NotSingularError{entpost.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (epq *EntPostQuery) OnlyX(ctx context.Context) *EntPost {
	node, err := epq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only EntPost ID in the query.
// Returns a *NotSingularError when more than one EntPost ID is found.
// Returns a *NotFoundError when no entities are found.
func (epq *EntPostQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = epq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{entpost.Label}
	default:
		err = &NotSingularError{entpost.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (epq *EntPostQuery) OnlyIDX(ctx context.Context) int {
	id, err := epq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of EntPosts.
func (epq *EntPostQuery) All(ctx context.Context) ([]*EntPost, error) {
	if err := epq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return epq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (epq *EntPostQuery) AllX(ctx context.Context) []*EntPost {
	nodes, err := epq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of EntPost IDs.
func (epq *EntPostQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := epq.Select(entpost.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (epq *EntPostQuery) IDsX(ctx context.Context) []int {
	ids, err := epq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (epq *EntPostQuery) Count(ctx context.Context) (int, error) {
	if err := epq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return epq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (epq *EntPostQuery) CountX(ctx context.Context) int {
	count, err := epq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (epq *EntPostQuery) Exist(ctx context.Context) (bool, error) {
	if err := epq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return epq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (epq *EntPostQuery) ExistX(ctx context.Context) bool {
	exist, err := epq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EntPostQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (epq *EntPostQuery) Clone() *EntPostQuery {
	if epq == nil {
		return nil
	}
	return &EntPostQuery{
		config:        epq.config,
		limit:         epq.limit,
		offset:        epq.offset,
		order:         append([]OrderFunc{}, epq.order...),
		predicates:    append([]predicate.EntPost{}, epq.predicates...),
		withComment:   epq.withComment.Clone(),
		withShareWith: epq.withShareWith.Clone(),
		withBelongsTo: epq.withBelongsTo.Clone(),
		withOwnedBy:   epq.withOwnedBy.Clone(),
		// clone intermediate query.
		sql:    epq.sql.Clone(),
		path:   epq.path,
		unique: epq.unique,
	}
}

// WithComment tells the query-builder to eager-load the nodes that are connected to
// the "comment" edge. The optional arguments are used to configure the query builder of the edge.
func (epq *EntPostQuery) WithComment(opts ...func(*EntCommentQuery)) *EntPostQuery {
	query := &EntCommentQuery{config: epq.config}
	for _, opt := range opts {
		opt(query)
	}
	epq.withComment = query
	return epq
}

// WithShareWith tells the query-builder to eager-load the nodes that are connected to
// the "shareWith" edge. The optional arguments are used to configure the query builder of the edge.
func (epq *EntPostQuery) WithShareWith(opts ...func(*EntUserQuery)) *EntPostQuery {
	query := &EntUserQuery{config: epq.config}
	for _, opt := range opts {
		opt(query)
	}
	epq.withShareWith = query
	return epq
}

// WithBelongsTo tells the query-builder to eager-load the nodes that are connected to
// the "belongsTo" edge. The optional arguments are used to configure the query builder of the edge.
func (epq *EntPostQuery) WithBelongsTo(opts ...func(*EntCourseQuery)) *EntPostQuery {
	query := &EntCourseQuery{config: epq.config}
	for _, opt := range opts {
		opt(query)
	}
	epq.withBelongsTo = query
	return epq
}

// WithOwnedBy tells the query-builder to eager-load the nodes that are connected to
// the "ownedBy" edge. The optional arguments are used to configure the query builder of the edge.
func (epq *EntPostQuery) WithOwnedBy(opts ...func(*EntUserQuery)) *EntPostQuery {
	query := &EntUserQuery{config: epq.config}
	for _, opt := range opts {
		opt(query)
	}
	epq.withOwnedBy = query
	return epq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createdAt,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.EntPost.Query().
//		GroupBy(entpost.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (epq *EntPostQuery) GroupBy(field string, fields ...string) *EntPostGroupBy {
	grbuild := &EntPostGroupBy{config: epq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := epq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return epq.sqlQuery(ctx), nil
	}
	grbuild.label = entpost.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createdAt,omitempty"`
//	}
//
//	client.EntPost.Query().
//		Select(entpost.FieldCreatedAt).
//		Scan(ctx, &v)
func (epq *EntPostQuery) Select(fields ...string) *EntPostSelect {
	epq.fields = append(epq.fields, fields...)
	selbuild := &EntPostSelect{EntPostQuery: epq}
	selbuild.label = entpost.Label
	selbuild.flds, selbuild.scan = &epq.fields, selbuild.Scan
	return selbuild
}

func (epq *EntPostQuery) prepareQuery(ctx context.Context) error {
	for _, f := range epq.fields {
		if !entpost.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if epq.path != nil {
		prev, err := epq.path(ctx)
		if err != nil {
			return err
		}
		epq.sql = prev
	}
	return nil
}

func (epq *EntPostQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*EntPost, error) {
	var (
		nodes       = []*EntPost{}
		withFKs     = epq.withFKs
		_spec       = epq.querySpec()
		loadedTypes = [4]bool{
			epq.withComment != nil,
			epq.withShareWith != nil,
			epq.withBelongsTo != nil,
			epq.withOwnedBy != nil,
		}
	)
	if epq.withBelongsTo != nil || epq.withOwnedBy != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, entpost.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*EntPost).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &EntPost{config: epq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, epq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := epq.withComment; query != nil {
		if err := epq.loadComment(ctx, query, nodes,
			func(n *EntPost) { n.Edges.Comment = []*EntComment{} },
			func(n *EntPost, e *EntComment) { n.Edges.Comment = append(n.Edges.Comment, e) }); err != nil {
			return nil, err
		}
	}
	if query := epq.withShareWith; query != nil {
		if err := epq.loadShareWith(ctx, query, nodes,
			func(n *EntPost) { n.Edges.ShareWith = []*EntUser{} },
			func(n *EntPost, e *EntUser) { n.Edges.ShareWith = append(n.Edges.ShareWith, e) }); err != nil {
			return nil, err
		}
	}
	if query := epq.withBelongsTo; query != nil {
		if err := epq.loadBelongsTo(ctx, query, nodes, nil,
			func(n *EntPost, e *EntCourse) { n.Edges.BelongsTo = e }); err != nil {
			return nil, err
		}
	}
	if query := epq.withOwnedBy; query != nil {
		if err := epq.loadOwnedBy(ctx, query, nodes, nil,
			func(n *EntPost, e *EntUser) { n.Edges.OwnedBy = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (epq *EntPostQuery) loadComment(ctx context.Context, query *EntCommentQuery, nodes []*EntPost, init func(*EntPost), assign func(*EntPost, *EntComment)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*EntPost)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.EntComment(func(s *sql.Selector) {
		s.Where(sql.InValues(entpost.CommentColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ent_post_comment
		if fk == nil {
			return fmt.Errorf(`foreign-key "ent_post_comment" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "ent_post_comment" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (epq *EntPostQuery) loadShareWith(ctx context.Context, query *EntUserQuery, nodes []*EntPost, init func(*EntPost), assign func(*EntPost, *EntUser)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*EntPost)
	nids := make(map[int]map[*EntPost]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(entpost.ShareWithTable)
		s.Join(joinT).On(s.C(entuser.FieldID), joinT.C(entpost.ShareWithPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(entpost.ShareWithPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(entpost.ShareWithPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]interface{}, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]interface{}{new(sql.NullInt64)}, values...), nil
		}
		spec.Assign = func(columns []string, values []interface{}) error {
			outValue := int(values[0].(*sql.NullInt64).Int64)
			inValue := int(values[1].(*sql.NullInt64).Int64)
			if nids[inValue] == nil {
				nids[inValue] = map[*EntPost]struct{}{byID[outValue]: struct{}{}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "shareWith" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (epq *EntPostQuery) loadBelongsTo(ctx context.Context, query *EntCourseQuery, nodes []*EntPost, init func(*EntPost), assign func(*EntPost, *EntCourse)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*EntPost)
	for i := range nodes {
		if nodes[i].ent_course_post == nil {
			continue
		}
		fk := *nodes[i].ent_course_post
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(entcourse.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "ent_course_post" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (epq *EntPostQuery) loadOwnedBy(ctx context.Context, query *EntUserQuery, nodes []*EntPost, init func(*EntPost), assign func(*EntPost, *EntUser)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*EntPost)
	for i := range nodes {
		if nodes[i].ent_user_post == nil {
			continue
		}
		fk := *nodes[i].ent_user_post
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(entuser.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "ent_user_post" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (epq *EntPostQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := epq.querySpec()
	_spec.Node.Columns = epq.fields
	if len(epq.fields) > 0 {
		_spec.Unique = epq.unique != nil && *epq.unique
	}
	return sqlgraph.CountNodes(ctx, epq.driver, _spec)
}

func (epq *EntPostQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := epq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (epq *EntPostQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   entpost.Table,
			Columns: entpost.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: entpost.FieldID,
			},
		},
		From:   epq.sql,
		Unique: true,
	}
	if unique := epq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := epq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, entpost.FieldID)
		for i := range fields {
			if fields[i] != entpost.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := epq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := epq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := epq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := epq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (epq *EntPostQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(epq.driver.Dialect())
	t1 := builder.Table(entpost.Table)
	columns := epq.fields
	if len(columns) == 0 {
		columns = entpost.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if epq.sql != nil {
		selector = epq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if epq.unique != nil && *epq.unique {
		selector.Distinct()
	}
	for _, p := range epq.predicates {
		p(selector)
	}
	for _, p := range epq.order {
		p(selector)
	}
	if offset := epq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := epq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// EntPostGroupBy is the group-by builder for EntPost entities.
type EntPostGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (epgb *EntPostGroupBy) Aggregate(fns ...AggregateFunc) *EntPostGroupBy {
	epgb.fns = append(epgb.fns, fns...)
	return epgb
}

// Scan applies the group-by query and scans the result into the given value.
func (epgb *EntPostGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := epgb.path(ctx)
	if err != nil {
		return err
	}
	epgb.sql = query
	return epgb.sqlScan(ctx, v)
}

func (epgb *EntPostGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range epgb.fields {
		if !entpost.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := epgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := epgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (epgb *EntPostGroupBy) sqlQuery() *sql.Selector {
	selector := epgb.sql.Select()
	aggregation := make([]string, 0, len(epgb.fns))
	for _, fn := range epgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(epgb.fields)+len(epgb.fns))
		for _, f := range epgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(epgb.fields...)...)
}

// EntPostSelect is the builder for selecting fields of EntPost entities.
type EntPostSelect struct {
	*EntPostQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (eps *EntPostSelect) Scan(ctx context.Context, v interface{}) error {
	if err := eps.prepareQuery(ctx); err != nil {
		return err
	}
	eps.sql = eps.EntPostQuery.sqlQuery(ctx)
	return eps.sqlScan(ctx, v)
}

func (eps *EntPostSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := eps.sql.Query()
	if err := eps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
