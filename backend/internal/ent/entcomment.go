// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/internal/ent/entcomment"
	"backend/internal/ent/entpost"
	"backend/internal/ent/entuser"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// EntComment is the model entity for the EntComment schema.
type EntComment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// Timestamp holds the value of the "timestamp" field.
	Timestamp time.Time `json:"timestamp,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// Share holds the value of the "share" field.
	Share entcomment.Share `json:"share,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EntCommentQuery when eager-loading is set.
	Edges            EntCommentEdges `json:"edges"`
	ent_post_comment *int
	ent_user_comment *int
}

// EntCommentEdges holds the relations/edges for other nodes in the graph.
type EntCommentEdges struct {
	// BelongsTo holds the value of the belongsTo edge.
	BelongsTo *EntPost `json:"belongsTo,omitempty"`
	// OwnedBy holds the value of the ownedBy edge.
	OwnedBy *EntUser `json:"ownedBy,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// BelongsToOrErr returns the BelongsTo value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EntCommentEdges) BelongsToOrErr() (*EntPost, error) {
	if e.loadedTypes[0] {
		if e.BelongsTo == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: entpost.Label}
		}
		return e.BelongsTo, nil
	}
	return nil, &NotLoadedError{edge: "belongsTo"}
}

// OwnedByOrErr returns the OwnedBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EntCommentEdges) OwnedByOrErr() (*EntUser, error) {
	if e.loadedTypes[1] {
		if e.OwnedBy == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: entuser.Label}
		}
		return e.OwnedBy, nil
	}
	return nil, &NotLoadedError{edge: "ownedBy"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EntComment) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case entcomment.FieldID:
			values[i] = new(sql.NullInt64)
		case entcomment.FieldContent, entcomment.FieldShare:
			values[i] = new(sql.NullString)
		case entcomment.FieldCreatedAt, entcomment.FieldUpdatedAt, entcomment.FieldTimestamp:
			values[i] = new(sql.NullTime)
		case entcomment.ForeignKeys[0]: // ent_post_comment
			values[i] = new(sql.NullInt64)
		case entcomment.ForeignKeys[1]: // ent_user_comment
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type EntComment", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EntComment fields.
func (ec *EntComment) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case entcomment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ec.ID = int(value.Int64)
		case entcomment.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				ec.CreatedAt = value.Time
			}
		case entcomment.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				ec.UpdatedAt = value.Time
			}
		case entcomment.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				ec.Timestamp = value.Time
			}
		case entcomment.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				ec.Content = value.String
			}
		case entcomment.FieldShare:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field share", values[i])
			} else if value.Valid {
				ec.Share = entcomment.Share(value.String)
			}
		case entcomment.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field ent_post_comment", value)
			} else if value.Valid {
				ec.ent_post_comment = new(int)
				*ec.ent_post_comment = int(value.Int64)
			}
		case entcomment.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field ent_user_comment", value)
			} else if value.Valid {
				ec.ent_user_comment = new(int)
				*ec.ent_user_comment = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryBelongsTo queries the "belongsTo" edge of the EntComment entity.
func (ec *EntComment) QueryBelongsTo() *EntPostQuery {
	return (&EntCommentClient{config: ec.config}).QueryBelongsTo(ec)
}

// QueryOwnedBy queries the "ownedBy" edge of the EntComment entity.
func (ec *EntComment) QueryOwnedBy() *EntUserQuery {
	return (&EntCommentClient{config: ec.config}).QueryOwnedBy(ec)
}

// Update returns a builder for updating this EntComment.
// Note that you need to call EntComment.Unwrap() before calling this method if this EntComment
// was returned from a transaction, and the transaction was committed or rolled back.
func (ec *EntComment) Update() *EntCommentUpdateOne {
	return (&EntCommentClient{config: ec.config}).UpdateOne(ec)
}

// Unwrap unwraps the EntComment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ec *EntComment) Unwrap() *EntComment {
	_tx, ok := ec.config.driver.(*txDriver)
	if !ok {
		panic("ent: EntComment is not a transactional entity")
	}
	ec.config.driver = _tx.drv
	return ec
}

// String implements the fmt.Stringer.
func (ec *EntComment) String() string {
	var builder strings.Builder
	builder.WriteString("EntComment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ec.ID))
	builder.WriteString("createdAt=")
	builder.WriteString(ec.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(ec.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("timestamp=")
	builder.WriteString(ec.Timestamp.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(ec.Content)
	builder.WriteString(", ")
	builder.WriteString("share=")
	builder.WriteString(fmt.Sprintf("%v", ec.Share))
	builder.WriteByte(')')
	return builder.String()
}

// EntComments is a parsable slice of EntComment.
type EntComments []*EntComment

func (ec EntComments) config(cfg config) {
	for _i := range ec {
		ec[_i].config = cfg
	}
}
