// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/internal/ent/entattendance"
	"backend/internal/ent/entcomment"
	"backend/internal/ent/entcourse"
	"backend/internal/ent/entpost"
	"backend/internal/ent/enttodo"
	"backend/internal/ent/entuser"
	"backend/internal/ent/predicate"
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EntUserQuery is the builder for querying EntUser entities.
type EntUserQuery struct {
	config
	limit          *int
	offset         *int
	unique         *bool
	order          []OrderFunc
	fields         []string
	predicates     []predicate.EntUser
	withCourse     *EntCourseQuery
	withTodo       *EntTodoQuery
	withAttendance *EntAttendanceQuery
	withPost       *EntPostQuery
	withComment    *EntCommentQuery
	withJoin       *EntCourseQuery
	withChildren   *EntUserQuery
	withParent     *EntUserQuery
	withStudent    *EntUserQuery
	withTutor      *EntUserQuery
	withSParent    *EntUserQuery
	withSTutor     *EntUserQuery
	withCanSee     *EntPostQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EntUserQuery builder.
func (euq *EntUserQuery) Where(ps ...predicate.EntUser) *EntUserQuery {
	euq.predicates = append(euq.predicates, ps...)
	return euq
}

// Limit adds a limit step to the query.
func (euq *EntUserQuery) Limit(limit int) *EntUserQuery {
	euq.limit = &limit
	return euq
}

// Offset adds an offset step to the query.
func (euq *EntUserQuery) Offset(offset int) *EntUserQuery {
	euq.offset = &offset
	return euq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (euq *EntUserQuery) Unique(unique bool) *EntUserQuery {
	euq.unique = &unique
	return euq
}

// Order adds an order step to the query.
func (euq *EntUserQuery) Order(o ...OrderFunc) *EntUserQuery {
	euq.order = append(euq.order, o...)
	return euq
}

// QueryCourse chains the current query on the "course" edge.
func (euq *EntUserQuery) QueryCourse() *EntCourseQuery {
	query := &EntCourseQuery{config: euq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := euq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := euq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(entuser.Table, entuser.FieldID, selector),
			sqlgraph.To(entcourse.Table, entcourse.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, entuser.CourseTable, entuser.CoursePrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(euq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTodo chains the current query on the "todo" edge.
func (euq *EntUserQuery) QueryTodo() *EntTodoQuery {
	query := &EntTodoQuery{config: euq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := euq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := euq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(entuser.Table, entuser.FieldID, selector),
			sqlgraph.To(enttodo.Table, enttodo.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, entuser.TodoTable, entuser.TodoColumn),
		)
		fromU = sqlgraph.SetNeighbors(euq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAttendance chains the current query on the "attendance" edge.
func (euq *EntUserQuery) QueryAttendance() *EntAttendanceQuery {
	query := &EntAttendanceQuery{config: euq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := euq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := euq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(entuser.Table, entuser.FieldID, selector),
			sqlgraph.To(entattendance.Table, entattendance.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, entuser.AttendanceTable, entuser.AttendanceColumn),
		)
		fromU = sqlgraph.SetNeighbors(euq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPost chains the current query on the "post" edge.
func (euq *EntUserQuery) QueryPost() *EntPostQuery {
	query := &EntPostQuery{config: euq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := euq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := euq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(entuser.Table, entuser.FieldID, selector),
			sqlgraph.To(entpost.Table, entpost.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, entuser.PostTable, entuser.PostColumn),
		)
		fromU = sqlgraph.SetNeighbors(euq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryComment chains the current query on the "comment" edge.
func (euq *EntUserQuery) QueryComment() *EntCommentQuery {
	query := &EntCommentQuery{config: euq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := euq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := euq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(entuser.Table, entuser.FieldID, selector),
			sqlgraph.To(entcomment.Table, entcomment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, entuser.CommentTable, entuser.CommentColumn),
		)
		fromU = sqlgraph.SetNeighbors(euq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryJoin chains the current query on the "join" edge.
func (euq *EntUserQuery) QueryJoin() *EntCourseQuery {
	query := &EntCourseQuery{config: euq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := euq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := euq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(entuser.Table, entuser.FieldID, selector),
			sqlgraph.To(entcourse.Table, entcourse.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, entuser.JoinTable, entuser.JoinPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(euq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryChildren chains the current query on the "children" edge.
func (euq *EntUserQuery) QueryChildren() *EntUserQuery {
	query := &EntUserQuery{config: euq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := euq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := euq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(entuser.Table, entuser.FieldID, selector),
			sqlgraph.To(entuser.Table, entuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, entuser.ChildrenTable, entuser.ChildrenPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(euq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryParent chains the current query on the "parent" edge.
func (euq *EntUserQuery) QueryParent() *EntUserQuery {
	query := &EntUserQuery{config: euq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := euq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := euq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(entuser.Table, entuser.FieldID, selector),
			sqlgraph.To(entuser.Table, entuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, entuser.ParentTable, entuser.ParentPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(euq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStudent chains the current query on the "student" edge.
func (euq *EntUserQuery) QueryStudent() *EntUserQuery {
	query := &EntUserQuery{config: euq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := euq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := euq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(entuser.Table, entuser.FieldID, selector),
			sqlgraph.To(entuser.Table, entuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, entuser.StudentTable, entuser.StudentPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(euq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTutor chains the current query on the "tutor" edge.
func (euq *EntUserQuery) QueryTutor() *EntUserQuery {
	query := &EntUserQuery{config: euq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := euq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := euq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(entuser.Table, entuser.FieldID, selector),
			sqlgraph.To(entuser.Table, entuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, entuser.TutorTable, entuser.TutorPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(euq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySParent chains the current query on the "SParent" edge.
func (euq *EntUserQuery) QuerySParent() *EntUserQuery {
	query := &EntUserQuery{config: euq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := euq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := euq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(entuser.Table, entuser.FieldID, selector),
			sqlgraph.To(entuser.Table, entuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, entuser.SParentTable, entuser.SParentPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(euq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySTutor chains the current query on the "STutor" edge.
func (euq *EntUserQuery) QuerySTutor() *EntUserQuery {
	query := &EntUserQuery{config: euq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := euq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := euq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(entuser.Table, entuser.FieldID, selector),
			sqlgraph.To(entuser.Table, entuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, entuser.STutorTable, entuser.STutorPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(euq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCanSee chains the current query on the "canSee" edge.
func (euq *EntUserQuery) QueryCanSee() *EntPostQuery {
	query := &EntPostQuery{config: euq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := euq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := euq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(entuser.Table, entuser.FieldID, selector),
			sqlgraph.To(entpost.Table, entpost.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, entuser.CanSeeTable, entuser.CanSeePrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(euq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first EntUser entity from the query.
// Returns a *NotFoundError when no EntUser was found.
func (euq *EntUserQuery) First(ctx context.Context) (*EntUser, error) {
	nodes, err := euq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{entuser.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (euq *EntUserQuery) FirstX(ctx context.Context) *EntUser {
	node, err := euq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first EntUser ID from the query.
// Returns a *NotFoundError when no EntUser ID was found.
func (euq *EntUserQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = euq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{entuser.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (euq *EntUserQuery) FirstIDX(ctx context.Context) int {
	id, err := euq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single EntUser entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one EntUser entity is found.
// Returns a *NotFoundError when no EntUser entities are found.
func (euq *EntUserQuery) Only(ctx context.Context) (*EntUser, error) {
	nodes, err := euq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{entuser.Label}
	default:
		return nil, &NotSingularError{entuser.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (euq *EntUserQuery) OnlyX(ctx context.Context) *EntUser {
	node, err := euq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only EntUser ID in the query.
// Returns a *NotSingularError when more than one EntUser ID is found.
// Returns a *NotFoundError when no entities are found.
func (euq *EntUserQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = euq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{entuser.Label}
	default:
		err = &NotSingularError{entuser.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (euq *EntUserQuery) OnlyIDX(ctx context.Context) int {
	id, err := euq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of EntUsers.
func (euq *EntUserQuery) All(ctx context.Context) ([]*EntUser, error) {
	if err := euq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return euq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (euq *EntUserQuery) AllX(ctx context.Context) []*EntUser {
	nodes, err := euq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of EntUser IDs.
func (euq *EntUserQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := euq.Select(entuser.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (euq *EntUserQuery) IDsX(ctx context.Context) []int {
	ids, err := euq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (euq *EntUserQuery) Count(ctx context.Context) (int, error) {
	if err := euq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return euq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (euq *EntUserQuery) CountX(ctx context.Context) int {
	count, err := euq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (euq *EntUserQuery) Exist(ctx context.Context) (bool, error) {
	if err := euq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return euq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (euq *EntUserQuery) ExistX(ctx context.Context) bool {
	exist, err := euq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EntUserQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (euq *EntUserQuery) Clone() *EntUserQuery {
	if euq == nil {
		return nil
	}
	return &EntUserQuery{
		config:         euq.config,
		limit:          euq.limit,
		offset:         euq.offset,
		order:          append([]OrderFunc{}, euq.order...),
		predicates:     append([]predicate.EntUser{}, euq.predicates...),
		withCourse:     euq.withCourse.Clone(),
		withTodo:       euq.withTodo.Clone(),
		withAttendance: euq.withAttendance.Clone(),
		withPost:       euq.withPost.Clone(),
		withComment:    euq.withComment.Clone(),
		withJoin:       euq.withJoin.Clone(),
		withChildren:   euq.withChildren.Clone(),
		withParent:     euq.withParent.Clone(),
		withStudent:    euq.withStudent.Clone(),
		withTutor:      euq.withTutor.Clone(),
		withSParent:    euq.withSParent.Clone(),
		withSTutor:     euq.withSTutor.Clone(),
		withCanSee:     euq.withCanSee.Clone(),
		// clone intermediate query.
		sql:    euq.sql.Clone(),
		path:   euq.path,
		unique: euq.unique,
	}
}

// WithCourse tells the query-builder to eager-load the nodes that are connected to
// the "course" edge. The optional arguments are used to configure the query builder of the edge.
func (euq *EntUserQuery) WithCourse(opts ...func(*EntCourseQuery)) *EntUserQuery {
	query := &EntCourseQuery{config: euq.config}
	for _, opt := range opts {
		opt(query)
	}
	euq.withCourse = query
	return euq
}

// WithTodo tells the query-builder to eager-load the nodes that are connected to
// the "todo" edge. The optional arguments are used to configure the query builder of the edge.
func (euq *EntUserQuery) WithTodo(opts ...func(*EntTodoQuery)) *EntUserQuery {
	query := &EntTodoQuery{config: euq.config}
	for _, opt := range opts {
		opt(query)
	}
	euq.withTodo = query
	return euq
}

// WithAttendance tells the query-builder to eager-load the nodes that are connected to
// the "attendance" edge. The optional arguments are used to configure the query builder of the edge.
func (euq *EntUserQuery) WithAttendance(opts ...func(*EntAttendanceQuery)) *EntUserQuery {
	query := &EntAttendanceQuery{config: euq.config}
	for _, opt := range opts {
		opt(query)
	}
	euq.withAttendance = query
	return euq
}

// WithPost tells the query-builder to eager-load the nodes that are connected to
// the "post" edge. The optional arguments are used to configure the query builder of the edge.
func (euq *EntUserQuery) WithPost(opts ...func(*EntPostQuery)) *EntUserQuery {
	query := &EntPostQuery{config: euq.config}
	for _, opt := range opts {
		opt(query)
	}
	euq.withPost = query
	return euq
}

// WithComment tells the query-builder to eager-load the nodes that are connected to
// the "comment" edge. The optional arguments are used to configure the query builder of the edge.
func (euq *EntUserQuery) WithComment(opts ...func(*EntCommentQuery)) *EntUserQuery {
	query := &EntCommentQuery{config: euq.config}
	for _, opt := range opts {
		opt(query)
	}
	euq.withComment = query
	return euq
}

// WithJoin tells the query-builder to eager-load the nodes that are connected to
// the "join" edge. The optional arguments are used to configure the query builder of the edge.
func (euq *EntUserQuery) WithJoin(opts ...func(*EntCourseQuery)) *EntUserQuery {
	query := &EntCourseQuery{config: euq.config}
	for _, opt := range opts {
		opt(query)
	}
	euq.withJoin = query
	return euq
}

// WithChildren tells the query-builder to eager-load the nodes that are connected to
// the "children" edge. The optional arguments are used to configure the query builder of the edge.
func (euq *EntUserQuery) WithChildren(opts ...func(*EntUserQuery)) *EntUserQuery {
	query := &EntUserQuery{config: euq.config}
	for _, opt := range opts {
		opt(query)
	}
	euq.withChildren = query
	return euq
}

// WithParent tells the query-builder to eager-load the nodes that are connected to
// the "parent" edge. The optional arguments are used to configure the query builder of the edge.
func (euq *EntUserQuery) WithParent(opts ...func(*EntUserQuery)) *EntUserQuery {
	query := &EntUserQuery{config: euq.config}
	for _, opt := range opts {
		opt(query)
	}
	euq.withParent = query
	return euq
}

// WithStudent tells the query-builder to eager-load the nodes that are connected to
// the "student" edge. The optional arguments are used to configure the query builder of the edge.
func (euq *EntUserQuery) WithStudent(opts ...func(*EntUserQuery)) *EntUserQuery {
	query := &EntUserQuery{config: euq.config}
	for _, opt := range opts {
		opt(query)
	}
	euq.withStudent = query
	return euq
}

// WithTutor tells the query-builder to eager-load the nodes that are connected to
// the "tutor" edge. The optional arguments are used to configure the query builder of the edge.
func (euq *EntUserQuery) WithTutor(opts ...func(*EntUserQuery)) *EntUserQuery {
	query := &EntUserQuery{config: euq.config}
	for _, opt := range opts {
		opt(query)
	}
	euq.withTutor = query
	return euq
}

// WithSParent tells the query-builder to eager-load the nodes that are connected to
// the "SParent" edge. The optional arguments are used to configure the query builder of the edge.
func (euq *EntUserQuery) WithSParent(opts ...func(*EntUserQuery)) *EntUserQuery {
	query := &EntUserQuery{config: euq.config}
	for _, opt := range opts {
		opt(query)
	}
	euq.withSParent = query
	return euq
}

// WithSTutor tells the query-builder to eager-load the nodes that are connected to
// the "STutor" edge. The optional arguments are used to configure the query builder of the edge.
func (euq *EntUserQuery) WithSTutor(opts ...func(*EntUserQuery)) *EntUserQuery {
	query := &EntUserQuery{config: euq.config}
	for _, opt := range opts {
		opt(query)
	}
	euq.withSTutor = query
	return euq
}

// WithCanSee tells the query-builder to eager-load the nodes that are connected to
// the "canSee" edge. The optional arguments are used to configure the query builder of the edge.
func (euq *EntUserQuery) WithCanSee(opts ...func(*EntPostQuery)) *EntUserQuery {
	query := &EntPostQuery{config: euq.config}
	for _, opt := range opts {
		opt(query)
	}
	euq.withCanSee = query
	return euq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.EntUser.Query().
//		GroupBy(entuser.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (euq *EntUserQuery) GroupBy(field string, fields ...string) *EntUserGroupBy {
	grbuild := &EntUserGroupBy{config: euq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := euq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return euq.sqlQuery(ctx), nil
	}
	grbuild.label = entuser.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.EntUser.Query().
//		Select(entuser.FieldName).
//		Scan(ctx, &v)
func (euq *EntUserQuery) Select(fields ...string) *EntUserSelect {
	euq.fields = append(euq.fields, fields...)
	selbuild := &EntUserSelect{EntUserQuery: euq}
	selbuild.label = entuser.Label
	selbuild.flds, selbuild.scan = &euq.fields, selbuild.Scan
	return selbuild
}

func (euq *EntUserQuery) prepareQuery(ctx context.Context) error {
	for _, f := range euq.fields {
		if !entuser.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if euq.path != nil {
		prev, err := euq.path(ctx)
		if err != nil {
			return err
		}
		euq.sql = prev
	}
	return nil
}

func (euq *EntUserQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*EntUser, error) {
	var (
		nodes       = []*EntUser{}
		_spec       = euq.querySpec()
		loadedTypes = [13]bool{
			euq.withCourse != nil,
			euq.withTodo != nil,
			euq.withAttendance != nil,
			euq.withPost != nil,
			euq.withComment != nil,
			euq.withJoin != nil,
			euq.withChildren != nil,
			euq.withParent != nil,
			euq.withStudent != nil,
			euq.withTutor != nil,
			euq.withSParent != nil,
			euq.withSTutor != nil,
			euq.withCanSee != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*EntUser).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &EntUser{config: euq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, euq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := euq.withCourse; query != nil {
		if err := euq.loadCourse(ctx, query, nodes,
			func(n *EntUser) { n.Edges.Course = []*EntCourse{} },
			func(n *EntUser, e *EntCourse) { n.Edges.Course = append(n.Edges.Course, e) }); err != nil {
			return nil, err
		}
	}
	if query := euq.withTodo; query != nil {
		if err := euq.loadTodo(ctx, query, nodes,
			func(n *EntUser) { n.Edges.Todo = []*EntTodo{} },
			func(n *EntUser, e *EntTodo) { n.Edges.Todo = append(n.Edges.Todo, e) }); err != nil {
			return nil, err
		}
	}
	if query := euq.withAttendance; query != nil {
		if err := euq.loadAttendance(ctx, query, nodes,
			func(n *EntUser) { n.Edges.Attendance = []*EntAttendance{} },
			func(n *EntUser, e *EntAttendance) { n.Edges.Attendance = append(n.Edges.Attendance, e) }); err != nil {
			return nil, err
		}
	}
	if query := euq.withPost; query != nil {
		if err := euq.loadPost(ctx, query, nodes,
			func(n *EntUser) { n.Edges.Post = []*EntPost{} },
			func(n *EntUser, e *EntPost) { n.Edges.Post = append(n.Edges.Post, e) }); err != nil {
			return nil, err
		}
	}
	if query := euq.withComment; query != nil {
		if err := euq.loadComment(ctx, query, nodes,
			func(n *EntUser) { n.Edges.Comment = []*EntComment{} },
			func(n *EntUser, e *EntComment) { n.Edges.Comment = append(n.Edges.Comment, e) }); err != nil {
			return nil, err
		}
	}
	if query := euq.withJoin; query != nil {
		if err := euq.loadJoin(ctx, query, nodes,
			func(n *EntUser) { n.Edges.Join = []*EntCourse{} },
			func(n *EntUser, e *EntCourse) { n.Edges.Join = append(n.Edges.Join, e) }); err != nil {
			return nil, err
		}
	}
	if query := euq.withChildren; query != nil {
		if err := euq.loadChildren(ctx, query, nodes,
			func(n *EntUser) { n.Edges.Children = []*EntUser{} },
			func(n *EntUser, e *EntUser) { n.Edges.Children = append(n.Edges.Children, e) }); err != nil {
			return nil, err
		}
	}
	if query := euq.withParent; query != nil {
		if err := euq.loadParent(ctx, query, nodes,
			func(n *EntUser) { n.Edges.Parent = []*EntUser{} },
			func(n *EntUser, e *EntUser) { n.Edges.Parent = append(n.Edges.Parent, e) }); err != nil {
			return nil, err
		}
	}
	if query := euq.withStudent; query != nil {
		if err := euq.loadStudent(ctx, query, nodes,
			func(n *EntUser) { n.Edges.Student = []*EntUser{} },
			func(n *EntUser, e *EntUser) { n.Edges.Student = append(n.Edges.Student, e) }); err != nil {
			return nil, err
		}
	}
	if query := euq.withTutor; query != nil {
		if err := euq.loadTutor(ctx, query, nodes,
			func(n *EntUser) { n.Edges.Tutor = []*EntUser{} },
			func(n *EntUser, e *EntUser) { n.Edges.Tutor = append(n.Edges.Tutor, e) }); err != nil {
			return nil, err
		}
	}
	if query := euq.withSParent; query != nil {
		if err := euq.loadSParent(ctx, query, nodes,
			func(n *EntUser) { n.Edges.SParent = []*EntUser{} },
			func(n *EntUser, e *EntUser) { n.Edges.SParent = append(n.Edges.SParent, e) }); err != nil {
			return nil, err
		}
	}
	if query := euq.withSTutor; query != nil {
		if err := euq.loadSTutor(ctx, query, nodes,
			func(n *EntUser) { n.Edges.STutor = []*EntUser{} },
			func(n *EntUser, e *EntUser) { n.Edges.STutor = append(n.Edges.STutor, e) }); err != nil {
			return nil, err
		}
	}
	if query := euq.withCanSee; query != nil {
		if err := euq.loadCanSee(ctx, query, nodes,
			func(n *EntUser) { n.Edges.CanSee = []*EntPost{} },
			func(n *EntUser, e *EntPost) { n.Edges.CanSee = append(n.Edges.CanSee, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (euq *EntUserQuery) loadCourse(ctx context.Context, query *EntCourseQuery, nodes []*EntUser, init func(*EntUser), assign func(*EntUser, *EntCourse)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*EntUser)
	nids := make(map[int]map[*EntUser]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(entuser.CourseTable)
		s.Join(joinT).On(s.C(entcourse.FieldID), joinT.C(entuser.CoursePrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(entuser.CoursePrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(entuser.CoursePrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]interface{}, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]interface{}{new(sql.NullInt64)}, values...), nil
		}
		spec.Assign = func(columns []string, values []interface{}) error {
			outValue := int(values[0].(*sql.NullInt64).Int64)
			inValue := int(values[1].(*sql.NullInt64).Int64)
			if nids[inValue] == nil {
				nids[inValue] = map[*EntUser]struct{}{byID[outValue]: struct{}{}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "course" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (euq *EntUserQuery) loadTodo(ctx context.Context, query *EntTodoQuery, nodes []*EntUser, init func(*EntUser), assign func(*EntUser, *EntTodo)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*EntUser)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.InValues(entuser.TodoColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ent_user_todo
		if fk == nil {
			return fmt.Errorf(`foreign-key "ent_user_todo" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "ent_user_todo" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (euq *EntUserQuery) loadAttendance(ctx context.Context, query *EntAttendanceQuery, nodes []*EntUser, init func(*EntUser), assign func(*EntUser, *EntAttendance)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*EntUser)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.EntAttendance(func(s *sql.Selector) {
		s.Where(sql.InValues(entuser.AttendanceColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ent_user_attendance
		if fk == nil {
			return fmt.Errorf(`foreign-key "ent_user_attendance" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "ent_user_attendance" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (euq *EntUserQuery) loadPost(ctx context.Context, query *EntPostQuery, nodes []*EntUser, init func(*EntUser), assign func(*EntUser, *EntPost)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*EntUser)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.EntPost(func(s *sql.Selector) {
		s.Where(sql.InValues(entuser.PostColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ent_user_post
		if fk == nil {
			return fmt.Errorf(`foreign-key "ent_user_post" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "ent_user_post" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (euq *EntUserQuery) loadComment(ctx context.Context, query *EntCommentQuery, nodes []*EntUser, init func(*EntUser), assign func(*EntUser, *EntComment)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*EntUser)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.EntComment(func(s *sql.Selector) {
		s.Where(sql.InValues(entuser.CommentColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ent_user_comment
		if fk == nil {
			return fmt.Errorf(`foreign-key "ent_user_comment" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "ent_user_comment" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (euq *EntUserQuery) loadJoin(ctx context.Context, query *EntCourseQuery, nodes []*EntUser, init func(*EntUser), assign func(*EntUser, *EntCourse)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*EntUser)
	nids := make(map[int]map[*EntUser]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(entuser.JoinTable)
		s.Join(joinT).On(s.C(entcourse.FieldID), joinT.C(entuser.JoinPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(entuser.JoinPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(entuser.JoinPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]interface{}, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]interface{}{new(sql.NullInt64)}, values...), nil
		}
		spec.Assign = func(columns []string, values []interface{}) error {
			outValue := int(values[0].(*sql.NullInt64).Int64)
			inValue := int(values[1].(*sql.NullInt64).Int64)
			if nids[inValue] == nil {
				nids[inValue] = map[*EntUser]struct{}{byID[outValue]: struct{}{}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "join" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (euq *EntUserQuery) loadChildren(ctx context.Context, query *EntUserQuery, nodes []*EntUser, init func(*EntUser), assign func(*EntUser, *EntUser)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*EntUser)
	nids := make(map[int]map[*EntUser]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(entuser.ChildrenTable)
		s.Join(joinT).On(s.C(entuser.FieldID), joinT.C(entuser.ChildrenPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(entuser.ChildrenPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(entuser.ChildrenPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]interface{}, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]interface{}{new(sql.NullInt64)}, values...), nil
		}
		spec.Assign = func(columns []string, values []interface{}) error {
			outValue := int(values[0].(*sql.NullInt64).Int64)
			inValue := int(values[1].(*sql.NullInt64).Int64)
			if nids[inValue] == nil {
				nids[inValue] = map[*EntUser]struct{}{byID[outValue]: struct{}{}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "children" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (euq *EntUserQuery) loadParent(ctx context.Context, query *EntUserQuery, nodes []*EntUser, init func(*EntUser), assign func(*EntUser, *EntUser)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*EntUser)
	nids := make(map[int]map[*EntUser]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(entuser.ParentTable)
		s.Join(joinT).On(s.C(entuser.FieldID), joinT.C(entuser.ParentPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(entuser.ParentPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(entuser.ParentPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]interface{}, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]interface{}{new(sql.NullInt64)}, values...), nil
		}
		spec.Assign = func(columns []string, values []interface{}) error {
			outValue := int(values[0].(*sql.NullInt64).Int64)
			inValue := int(values[1].(*sql.NullInt64).Int64)
			if nids[inValue] == nil {
				nids[inValue] = map[*EntUser]struct{}{byID[outValue]: struct{}{}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "parent" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (euq *EntUserQuery) loadStudent(ctx context.Context, query *EntUserQuery, nodes []*EntUser, init func(*EntUser), assign func(*EntUser, *EntUser)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*EntUser)
	nids := make(map[int]map[*EntUser]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(entuser.StudentTable)
		s.Join(joinT).On(s.C(entuser.FieldID), joinT.C(entuser.StudentPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(entuser.StudentPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(entuser.StudentPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]interface{}, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]interface{}{new(sql.NullInt64)}, values...), nil
		}
		spec.Assign = func(columns []string, values []interface{}) error {
			outValue := int(values[0].(*sql.NullInt64).Int64)
			inValue := int(values[1].(*sql.NullInt64).Int64)
			if nids[inValue] == nil {
				nids[inValue] = map[*EntUser]struct{}{byID[outValue]: struct{}{}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "student" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (euq *EntUserQuery) loadTutor(ctx context.Context, query *EntUserQuery, nodes []*EntUser, init func(*EntUser), assign func(*EntUser, *EntUser)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*EntUser)
	nids := make(map[int]map[*EntUser]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(entuser.TutorTable)
		s.Join(joinT).On(s.C(entuser.FieldID), joinT.C(entuser.TutorPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(entuser.TutorPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(entuser.TutorPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]interface{}, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]interface{}{new(sql.NullInt64)}, values...), nil
		}
		spec.Assign = func(columns []string, values []interface{}) error {
			outValue := int(values[0].(*sql.NullInt64).Int64)
			inValue := int(values[1].(*sql.NullInt64).Int64)
			if nids[inValue] == nil {
				nids[inValue] = map[*EntUser]struct{}{byID[outValue]: struct{}{}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "tutor" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (euq *EntUserQuery) loadSParent(ctx context.Context, query *EntUserQuery, nodes []*EntUser, init func(*EntUser), assign func(*EntUser, *EntUser)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*EntUser)
	nids := make(map[int]map[*EntUser]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(entuser.SParentTable)
		s.Join(joinT).On(s.C(entuser.FieldID), joinT.C(entuser.SParentPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(entuser.SParentPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(entuser.SParentPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]interface{}, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]interface{}{new(sql.NullInt64)}, values...), nil
		}
		spec.Assign = func(columns []string, values []interface{}) error {
			outValue := int(values[0].(*sql.NullInt64).Int64)
			inValue := int(values[1].(*sql.NullInt64).Int64)
			if nids[inValue] == nil {
				nids[inValue] = map[*EntUser]struct{}{byID[outValue]: struct{}{}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "SParent" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (euq *EntUserQuery) loadSTutor(ctx context.Context, query *EntUserQuery, nodes []*EntUser, init func(*EntUser), assign func(*EntUser, *EntUser)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*EntUser)
	nids := make(map[int]map[*EntUser]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(entuser.STutorTable)
		s.Join(joinT).On(s.C(entuser.FieldID), joinT.C(entuser.STutorPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(entuser.STutorPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(entuser.STutorPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]interface{}, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]interface{}{new(sql.NullInt64)}, values...), nil
		}
		spec.Assign = func(columns []string, values []interface{}) error {
			outValue := int(values[0].(*sql.NullInt64).Int64)
			inValue := int(values[1].(*sql.NullInt64).Int64)
			if nids[inValue] == nil {
				nids[inValue] = map[*EntUser]struct{}{byID[outValue]: struct{}{}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "STutor" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (euq *EntUserQuery) loadCanSee(ctx context.Context, query *EntPostQuery, nodes []*EntUser, init func(*EntUser), assign func(*EntUser, *EntPost)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*EntUser)
	nids := make(map[int]map[*EntUser]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(entuser.CanSeeTable)
		s.Join(joinT).On(s.C(entpost.FieldID), joinT.C(entuser.CanSeePrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(entuser.CanSeePrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(entuser.CanSeePrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]interface{}, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]interface{}{new(sql.NullInt64)}, values...), nil
		}
		spec.Assign = func(columns []string, values []interface{}) error {
			outValue := int(values[0].(*sql.NullInt64).Int64)
			inValue := int(values[1].(*sql.NullInt64).Int64)
			if nids[inValue] == nil {
				nids[inValue] = map[*EntUser]struct{}{byID[outValue]: struct{}{}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "canSee" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (euq *EntUserQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := euq.querySpec()
	_spec.Node.Columns = euq.fields
	if len(euq.fields) > 0 {
		_spec.Unique = euq.unique != nil && *euq.unique
	}
	return sqlgraph.CountNodes(ctx, euq.driver, _spec)
}

func (euq *EntUserQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := euq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (euq *EntUserQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   entuser.Table,
			Columns: entuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: entuser.FieldID,
			},
		},
		From:   euq.sql,
		Unique: true,
	}
	if unique := euq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := euq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, entuser.FieldID)
		for i := range fields {
			if fields[i] != entuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := euq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := euq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := euq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := euq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (euq *EntUserQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(euq.driver.Dialect())
	t1 := builder.Table(entuser.Table)
	columns := euq.fields
	if len(columns) == 0 {
		columns = entuser.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if euq.sql != nil {
		selector = euq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if euq.unique != nil && *euq.unique {
		selector.Distinct()
	}
	for _, p := range euq.predicates {
		p(selector)
	}
	for _, p := range euq.order {
		p(selector)
	}
	if offset := euq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := euq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// EntUserGroupBy is the group-by builder for EntUser entities.
type EntUserGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (eugb *EntUserGroupBy) Aggregate(fns ...AggregateFunc) *EntUserGroupBy {
	eugb.fns = append(eugb.fns, fns...)
	return eugb
}

// Scan applies the group-by query and scans the result into the given value.
func (eugb *EntUserGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := eugb.path(ctx)
	if err != nil {
		return err
	}
	eugb.sql = query
	return eugb.sqlScan(ctx, v)
}

func (eugb *EntUserGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range eugb.fields {
		if !entuser.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := eugb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := eugb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (eugb *EntUserGroupBy) sqlQuery() *sql.Selector {
	selector := eugb.sql.Select()
	aggregation := make([]string, 0, len(eugb.fns))
	for _, fn := range eugb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(eugb.fields)+len(eugb.fns))
		for _, f := range eugb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(eugb.fields...)...)
}

// EntUserSelect is the builder for selecting fields of EntUser entities.
type EntUserSelect struct {
	*EntUserQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (eus *EntUserSelect) Scan(ctx context.Context, v interface{}) error {
	if err := eus.prepareQuery(ctx); err != nil {
		return err
	}
	eus.sql = eus.EntUserQuery.sqlQuery(ctx)
	return eus.sqlScan(ctx, v)
}

func (eus *EntUserSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := eus.sql.Query()
	if err := eus.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
