// Code generated by ent, DO NOT EDIT.

package enttodo

import (
	"backend/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// Date applies equality check predicate on the "date" field. It's identical to DateEQ.
func Date(v time.Time) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDate), v))
	})
}

// StartTime applies equality check predicate on the "startTime" field. It's identical to StartTimeEQ.
func StartTime(v time.Time) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartTime), v))
	})
}

// EndTime applies equality check predicate on the "endTime" field. It's identical to EndTimeEQ.
func EndTime(v time.Time) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndTime), v))
	})
}

// Day applies equality check predicate on the "day" field. It's identical to DayEQ.
func Day(v time.Time) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDay), v))
	})
}

// Lesson applies equality check predicate on the "lesson" field. It's identical to LessonEQ.
func Lesson(v string) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLesson), v))
	})
}

// Homework applies equality check predicate on the "homework" field. It's identical to HomeworkEQ.
func Homework(v string) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHomework), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.EntTodo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.EntTodo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.EntTodo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.EntTodo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DateEQ applies the EQ predicate on the "date" field.
func DateEQ(v time.Time) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDate), v))
	})
}

// DateNEQ applies the NEQ predicate on the "date" field.
func DateNEQ(v time.Time) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDate), v))
	})
}

// DateIn applies the In predicate on the "date" field.
func DateIn(vs ...time.Time) predicate.EntTodo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDate), v...))
	})
}

// DateNotIn applies the NotIn predicate on the "date" field.
func DateNotIn(vs ...time.Time) predicate.EntTodo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDate), v...))
	})
}

// DateGT applies the GT predicate on the "date" field.
func DateGT(v time.Time) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDate), v))
	})
}

// DateGTE applies the GTE predicate on the "date" field.
func DateGTE(v time.Time) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDate), v))
	})
}

// DateLT applies the LT predicate on the "date" field.
func DateLT(v time.Time) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDate), v))
	})
}

// DateLTE applies the LTE predicate on the "date" field.
func DateLTE(v time.Time) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDate), v))
	})
}

// StartTimeEQ applies the EQ predicate on the "startTime" field.
func StartTimeEQ(v time.Time) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartTime), v))
	})
}

// StartTimeNEQ applies the NEQ predicate on the "startTime" field.
func StartTimeNEQ(v time.Time) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStartTime), v))
	})
}

// StartTimeIn applies the In predicate on the "startTime" field.
func StartTimeIn(vs ...time.Time) predicate.EntTodo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStartTime), v...))
	})
}

// StartTimeNotIn applies the NotIn predicate on the "startTime" field.
func StartTimeNotIn(vs ...time.Time) predicate.EntTodo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStartTime), v...))
	})
}

// StartTimeGT applies the GT predicate on the "startTime" field.
func StartTimeGT(v time.Time) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStartTime), v))
	})
}

// StartTimeGTE applies the GTE predicate on the "startTime" field.
func StartTimeGTE(v time.Time) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStartTime), v))
	})
}

// StartTimeLT applies the LT predicate on the "startTime" field.
func StartTimeLT(v time.Time) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStartTime), v))
	})
}

// StartTimeLTE applies the LTE predicate on the "startTime" field.
func StartTimeLTE(v time.Time) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStartTime), v))
	})
}

// StartTimeIsNil applies the IsNil predicate on the "startTime" field.
func StartTimeIsNil() predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStartTime)))
	})
}

// StartTimeNotNil applies the NotNil predicate on the "startTime" field.
func StartTimeNotNil() predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStartTime)))
	})
}

// EndTimeEQ applies the EQ predicate on the "endTime" field.
func EndTimeEQ(v time.Time) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndTime), v))
	})
}

// EndTimeNEQ applies the NEQ predicate on the "endTime" field.
func EndTimeNEQ(v time.Time) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEndTime), v))
	})
}

// EndTimeIn applies the In predicate on the "endTime" field.
func EndTimeIn(vs ...time.Time) predicate.EntTodo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEndTime), v...))
	})
}

// EndTimeNotIn applies the NotIn predicate on the "endTime" field.
func EndTimeNotIn(vs ...time.Time) predicate.EntTodo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEndTime), v...))
	})
}

// EndTimeGT applies the GT predicate on the "endTime" field.
func EndTimeGT(v time.Time) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEndTime), v))
	})
}

// EndTimeGTE applies the GTE predicate on the "endTime" field.
func EndTimeGTE(v time.Time) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEndTime), v))
	})
}

// EndTimeLT applies the LT predicate on the "endTime" field.
func EndTimeLT(v time.Time) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEndTime), v))
	})
}

// EndTimeLTE applies the LTE predicate on the "endTime" field.
func EndTimeLTE(v time.Time) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEndTime), v))
	})
}

// EndTimeIsNil applies the IsNil predicate on the "endTime" field.
func EndTimeIsNil() predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEndTime)))
	})
}

// EndTimeNotNil applies the NotNil predicate on the "endTime" field.
func EndTimeNotNil() predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEndTime)))
	})
}

// DayEQ applies the EQ predicate on the "day" field.
func DayEQ(v time.Time) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDay), v))
	})
}

// DayNEQ applies the NEQ predicate on the "day" field.
func DayNEQ(v time.Time) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDay), v))
	})
}

// DayIn applies the In predicate on the "day" field.
func DayIn(vs ...time.Time) predicate.EntTodo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDay), v...))
	})
}

// DayNotIn applies the NotIn predicate on the "day" field.
func DayNotIn(vs ...time.Time) predicate.EntTodo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDay), v...))
	})
}

// DayGT applies the GT predicate on the "day" field.
func DayGT(v time.Time) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDay), v))
	})
}

// DayGTE applies the GTE predicate on the "day" field.
func DayGTE(v time.Time) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDay), v))
	})
}

// DayLT applies the LT predicate on the "day" field.
func DayLT(v time.Time) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDay), v))
	})
}

// DayLTE applies the LTE predicate on the "day" field.
func DayLTE(v time.Time) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDay), v))
	})
}

// DayIsNil applies the IsNil predicate on the "day" field.
func DayIsNil() predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDay)))
	})
}

// DayNotNil applies the NotNil predicate on the "day" field.
func DayNotNil() predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDay)))
	})
}

// LessonEQ applies the EQ predicate on the "lesson" field.
func LessonEQ(v string) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLesson), v))
	})
}

// LessonNEQ applies the NEQ predicate on the "lesson" field.
func LessonNEQ(v string) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLesson), v))
	})
}

// LessonIn applies the In predicate on the "lesson" field.
func LessonIn(vs ...string) predicate.EntTodo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLesson), v...))
	})
}

// LessonNotIn applies the NotIn predicate on the "lesson" field.
func LessonNotIn(vs ...string) predicate.EntTodo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLesson), v...))
	})
}

// LessonGT applies the GT predicate on the "lesson" field.
func LessonGT(v string) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLesson), v))
	})
}

// LessonGTE applies the GTE predicate on the "lesson" field.
func LessonGTE(v string) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLesson), v))
	})
}

// LessonLT applies the LT predicate on the "lesson" field.
func LessonLT(v string) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLesson), v))
	})
}

// LessonLTE applies the LTE predicate on the "lesson" field.
func LessonLTE(v string) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLesson), v))
	})
}

// LessonContains applies the Contains predicate on the "lesson" field.
func LessonContains(v string) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLesson), v))
	})
}

// LessonHasPrefix applies the HasPrefix predicate on the "lesson" field.
func LessonHasPrefix(v string) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLesson), v))
	})
}

// LessonHasSuffix applies the HasSuffix predicate on the "lesson" field.
func LessonHasSuffix(v string) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLesson), v))
	})
}

// LessonIsNil applies the IsNil predicate on the "lesson" field.
func LessonIsNil() predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLesson)))
	})
}

// LessonNotNil applies the NotNil predicate on the "lesson" field.
func LessonNotNil() predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLesson)))
	})
}

// LessonEqualFold applies the EqualFold predicate on the "lesson" field.
func LessonEqualFold(v string) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLesson), v))
	})
}

// LessonContainsFold applies the ContainsFold predicate on the "lesson" field.
func LessonContainsFold(v string) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLesson), v))
	})
}

// HomeworkEQ applies the EQ predicate on the "homework" field.
func HomeworkEQ(v string) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHomework), v))
	})
}

// HomeworkNEQ applies the NEQ predicate on the "homework" field.
func HomeworkNEQ(v string) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHomework), v))
	})
}

// HomeworkIn applies the In predicate on the "homework" field.
func HomeworkIn(vs ...string) predicate.EntTodo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldHomework), v...))
	})
}

// HomeworkNotIn applies the NotIn predicate on the "homework" field.
func HomeworkNotIn(vs ...string) predicate.EntTodo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldHomework), v...))
	})
}

// HomeworkGT applies the GT predicate on the "homework" field.
func HomeworkGT(v string) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHomework), v))
	})
}

// HomeworkGTE applies the GTE predicate on the "homework" field.
func HomeworkGTE(v string) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHomework), v))
	})
}

// HomeworkLT applies the LT predicate on the "homework" field.
func HomeworkLT(v string) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHomework), v))
	})
}

// HomeworkLTE applies the LTE predicate on the "homework" field.
func HomeworkLTE(v string) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHomework), v))
	})
}

// HomeworkContains applies the Contains predicate on the "homework" field.
func HomeworkContains(v string) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHomework), v))
	})
}

// HomeworkHasPrefix applies the HasPrefix predicate on the "homework" field.
func HomeworkHasPrefix(v string) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHomework), v))
	})
}

// HomeworkHasSuffix applies the HasSuffix predicate on the "homework" field.
func HomeworkHasSuffix(v string) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHomework), v))
	})
}

// HomeworkIsNil applies the IsNil predicate on the "homework" field.
func HomeworkIsNil() predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldHomework)))
	})
}

// HomeworkNotNil applies the NotNil predicate on the "homework" field.
func HomeworkNotNil() predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldHomework)))
	})
}

// HomeworkEqualFold applies the EqualFold predicate on the "homework" field.
func HomeworkEqualFold(v string) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHomework), v))
	})
}

// HomeworkContainsFold applies the ContainsFold predicate on the "homework" field.
func HomeworkContainsFold(v string) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHomework), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.EntTodo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.EntTodo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntTodo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// HasTodoFor applies the HasEdge predicate on the "todoFor" edge.
func HasTodoFor() predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TodoForTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TodoForTable, TodoForColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTodoForWith applies the HasEdge predicate on the "todoFor" edge with a given conditions (other predicates).
func HasTodoForWith(preds ...predicate.EntCourse) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TodoForInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TodoForTable, TodoForColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOwnedBy applies the HasEdge predicate on the "ownedBy" edge.
func HasOwnedBy() predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnedByTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnedByTable, OwnedByColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnedByWith applies the HasEdge predicate on the "ownedBy" edge with a given conditions (other predicates).
func HasOwnedByWith(preds ...predicate.EntUser) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnedByInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnedByTable, OwnedByColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EntTodo) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EntTodo) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EntTodo) predicate.EntTodo {
	return predicate.EntTodo(func(s *sql.Selector) {
		p(s.Not())
	})
}
