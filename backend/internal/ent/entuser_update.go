// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/internal/ent/entattendance"
	"backend/internal/ent/entcomment"
	"backend/internal/ent/entcourse"
	"backend/internal/ent/entpost"
	"backend/internal/ent/enttodo"
	"backend/internal/ent/entuser"
	"backend/internal/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EntUserUpdate is the builder for updating EntUser entities.
type EntUserUpdate struct {
	config
	hooks    []Hook
	mutation *EntUserMutation
}

// Where appends a list predicates to the EntUserUpdate builder.
func (euu *EntUserUpdate) Where(ps ...predicate.EntUser) *EntUserUpdate {
	euu.mutation.Where(ps...)
	return euu
}

// SetUpdatedAt sets the "updatedAt" field.
func (euu *EntUserUpdate) SetUpdatedAt(t time.Time) *EntUserUpdate {
	euu.mutation.SetUpdatedAt(t)
	return euu
}

// SetName sets the "name" field.
func (euu *EntUserUpdate) SetName(s string) *EntUserUpdate {
	euu.mutation.SetName(s)
	return euu
}

// SetEmail sets the "email" field.
func (euu *EntUserUpdate) SetEmail(s string) *EntUserUpdate {
	euu.mutation.SetEmail(s)
	return euu
}

// SetPassword sets the "password" field.
func (euu *EntUserUpdate) SetPassword(s string) *EntUserUpdate {
	euu.mutation.SetPassword(s)
	return euu
}

// SetCountry sets the "country" field.
func (euu *EntUserUpdate) SetCountry(s string) *EntUserUpdate {
	euu.mutation.SetCountry(s)
	return euu
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (euu *EntUserUpdate) SetNillableCountry(s *string) *EntUserUpdate {
	if s != nil {
		euu.SetCountry(*s)
	}
	return euu
}

// ClearCountry clears the value of the "country" field.
func (euu *EntUserUpdate) ClearCountry() *EntUserUpdate {
	euu.mutation.ClearCountry()
	return euu
}

// SetPhone sets the "phone" field.
func (euu *EntUserUpdate) SetPhone(s string) *EntUserUpdate {
	euu.mutation.SetPhone(s)
	return euu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (euu *EntUserUpdate) SetNillablePhone(s *string) *EntUserUpdate {
	if s != nil {
		euu.SetPhone(*s)
	}
	return euu
}

// ClearPhone clears the value of the "phone" field.
func (euu *EntUserUpdate) ClearPhone() *EntUserUpdate {
	euu.mutation.ClearPhone()
	return euu
}

// SetDateOfBirth sets the "dateOfBirth" field.
func (euu *EntUserUpdate) SetDateOfBirth(t time.Time) *EntUserUpdate {
	euu.mutation.SetDateOfBirth(t)
	return euu
}

// SetNillableDateOfBirth sets the "dateOfBirth" field if the given value is not nil.
func (euu *EntUserUpdate) SetNillableDateOfBirth(t *time.Time) *EntUserUpdate {
	if t != nil {
		euu.SetDateOfBirth(*t)
	}
	return euu
}

// ClearDateOfBirth clears the value of the "dateOfBirth" field.
func (euu *EntUserUpdate) ClearDateOfBirth() *EntUserUpdate {
	euu.mutation.ClearDateOfBirth()
	return euu
}

// SetProfilePictureUrl sets the "profilePictureUrl" field.
func (euu *EntUserUpdate) SetProfilePictureUrl(s string) *EntUserUpdate {
	euu.mutation.SetProfilePictureUrl(s)
	return euu
}

// SetNillableProfilePictureUrl sets the "profilePictureUrl" field if the given value is not nil.
func (euu *EntUserUpdate) SetNillableProfilePictureUrl(s *string) *EntUserUpdate {
	if s != nil {
		euu.SetProfilePictureUrl(*s)
	}
	return euu
}

// ClearProfilePictureUrl clears the value of the "profilePictureUrl" field.
func (euu *EntUserUpdate) ClearProfilePictureUrl() *EntUserUpdate {
	euu.mutation.ClearProfilePictureUrl()
	return euu
}

// SetIsTutor sets the "isTutor" field.
func (euu *EntUserUpdate) SetIsTutor(b bool) *EntUserUpdate {
	euu.mutation.SetIsTutor(b)
	return euu
}

// SetNillableIsTutor sets the "isTutor" field if the given value is not nil.
func (euu *EntUserUpdate) SetNillableIsTutor(b *bool) *EntUserUpdate {
	if b != nil {
		euu.SetIsTutor(*b)
	}
	return euu
}

// SetIsStudent sets the "isStudent" field.
func (euu *EntUserUpdate) SetIsStudent(b bool) *EntUserUpdate {
	euu.mutation.SetIsStudent(b)
	return euu
}

// SetNillableIsStudent sets the "isStudent" field if the given value is not nil.
func (euu *EntUserUpdate) SetNillableIsStudent(b *bool) *EntUserUpdate {
	if b != nil {
		euu.SetIsStudent(*b)
	}
	return euu
}

// SetIsParent sets the "isParent" field.
func (euu *EntUserUpdate) SetIsParent(b bool) *EntUserUpdate {
	euu.mutation.SetIsParent(b)
	return euu
}

// SetNillableIsParent sets the "isParent" field if the given value is not nil.
func (euu *EntUserUpdate) SetNillableIsParent(b *bool) *EntUserUpdate {
	if b != nil {
		euu.SetIsParent(*b)
	}
	return euu
}

// AddCourseIDs adds the "course" edge to the EntCourse entity by IDs.
func (euu *EntUserUpdate) AddCourseIDs(ids ...int) *EntUserUpdate {
	euu.mutation.AddCourseIDs(ids...)
	return euu
}

// AddCourse adds the "course" edges to the EntCourse entity.
func (euu *EntUserUpdate) AddCourse(e ...*EntCourse) *EntUserUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euu.AddCourseIDs(ids...)
}

// AddTodoIDs adds the "todo" edge to the EntTodo entity by IDs.
func (euu *EntUserUpdate) AddTodoIDs(ids ...int) *EntUserUpdate {
	euu.mutation.AddTodoIDs(ids...)
	return euu
}

// AddTodo adds the "todo" edges to the EntTodo entity.
func (euu *EntUserUpdate) AddTodo(e ...*EntTodo) *EntUserUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euu.AddTodoIDs(ids...)
}

// AddAttendanceIDs adds the "attendance" edge to the EntAttendance entity by IDs.
func (euu *EntUserUpdate) AddAttendanceIDs(ids ...int) *EntUserUpdate {
	euu.mutation.AddAttendanceIDs(ids...)
	return euu
}

// AddAttendance adds the "attendance" edges to the EntAttendance entity.
func (euu *EntUserUpdate) AddAttendance(e ...*EntAttendance) *EntUserUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euu.AddAttendanceIDs(ids...)
}

// AddPostIDs adds the "post" edge to the EntPost entity by IDs.
func (euu *EntUserUpdate) AddPostIDs(ids ...int) *EntUserUpdate {
	euu.mutation.AddPostIDs(ids...)
	return euu
}

// AddPost adds the "post" edges to the EntPost entity.
func (euu *EntUserUpdate) AddPost(e ...*EntPost) *EntUserUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euu.AddPostIDs(ids...)
}

// AddCommentIDs adds the "comment" edge to the EntComment entity by IDs.
func (euu *EntUserUpdate) AddCommentIDs(ids ...int) *EntUserUpdate {
	euu.mutation.AddCommentIDs(ids...)
	return euu
}

// AddComment adds the "comment" edges to the EntComment entity.
func (euu *EntUserUpdate) AddComment(e ...*EntComment) *EntUserUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euu.AddCommentIDs(ids...)
}

// AddJoinIDs adds the "join" edge to the EntCourse entity by IDs.
func (euu *EntUserUpdate) AddJoinIDs(ids ...int) *EntUserUpdate {
	euu.mutation.AddJoinIDs(ids...)
	return euu
}

// AddJoin adds the "join" edges to the EntCourse entity.
func (euu *EntUserUpdate) AddJoin(e ...*EntCourse) *EntUserUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euu.AddJoinIDs(ids...)
}

// AddChildIDs adds the "children" edge to the EntUser entity by IDs.
func (euu *EntUserUpdate) AddChildIDs(ids ...int) *EntUserUpdate {
	euu.mutation.AddChildIDs(ids...)
	return euu
}

// AddChildren adds the "children" edges to the EntUser entity.
func (euu *EntUserUpdate) AddChildren(e ...*EntUser) *EntUserUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euu.AddChildIDs(ids...)
}

// AddParentIDs adds the "parent" edge to the EntUser entity by IDs.
func (euu *EntUserUpdate) AddParentIDs(ids ...int) *EntUserUpdate {
	euu.mutation.AddParentIDs(ids...)
	return euu
}

// AddParent adds the "parent" edges to the EntUser entity.
func (euu *EntUserUpdate) AddParent(e ...*EntUser) *EntUserUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euu.AddParentIDs(ids...)
}

// AddStudentIDs adds the "student" edge to the EntUser entity by IDs.
func (euu *EntUserUpdate) AddStudentIDs(ids ...int) *EntUserUpdate {
	euu.mutation.AddStudentIDs(ids...)
	return euu
}

// AddStudent adds the "student" edges to the EntUser entity.
func (euu *EntUserUpdate) AddStudent(e ...*EntUser) *EntUserUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euu.AddStudentIDs(ids...)
}

// AddTutorIDs adds the "tutor" edge to the EntUser entity by IDs.
func (euu *EntUserUpdate) AddTutorIDs(ids ...int) *EntUserUpdate {
	euu.mutation.AddTutorIDs(ids...)
	return euu
}

// AddTutor adds the "tutor" edges to the EntUser entity.
func (euu *EntUserUpdate) AddTutor(e ...*EntUser) *EntUserUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euu.AddTutorIDs(ids...)
}

// AddSParentIDs adds the "SParent" edge to the EntUser entity by IDs.
func (euu *EntUserUpdate) AddSParentIDs(ids ...int) *EntUserUpdate {
	euu.mutation.AddSParentIDs(ids...)
	return euu
}

// AddSParent adds the "SParent" edges to the EntUser entity.
func (euu *EntUserUpdate) AddSParent(e ...*EntUser) *EntUserUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euu.AddSParentIDs(ids...)
}

// AddSTutorIDs adds the "STutor" edge to the EntUser entity by IDs.
func (euu *EntUserUpdate) AddSTutorIDs(ids ...int) *EntUserUpdate {
	euu.mutation.AddSTutorIDs(ids...)
	return euu
}

// AddSTutor adds the "STutor" edges to the EntUser entity.
func (euu *EntUserUpdate) AddSTutor(e ...*EntUser) *EntUserUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euu.AddSTutorIDs(ids...)
}

// AddCanSeeIDs adds the "canSee" edge to the EntPost entity by IDs.
func (euu *EntUserUpdate) AddCanSeeIDs(ids ...int) *EntUserUpdate {
	euu.mutation.AddCanSeeIDs(ids...)
	return euu
}

// AddCanSee adds the "canSee" edges to the EntPost entity.
func (euu *EntUserUpdate) AddCanSee(e ...*EntPost) *EntUserUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euu.AddCanSeeIDs(ids...)
}

// Mutation returns the EntUserMutation object of the builder.
func (euu *EntUserUpdate) Mutation() *EntUserMutation {
	return euu.mutation
}

// ClearCourse clears all "course" edges to the EntCourse entity.
func (euu *EntUserUpdate) ClearCourse() *EntUserUpdate {
	euu.mutation.ClearCourse()
	return euu
}

// RemoveCourseIDs removes the "course" edge to EntCourse entities by IDs.
func (euu *EntUserUpdate) RemoveCourseIDs(ids ...int) *EntUserUpdate {
	euu.mutation.RemoveCourseIDs(ids...)
	return euu
}

// RemoveCourse removes "course" edges to EntCourse entities.
func (euu *EntUserUpdate) RemoveCourse(e ...*EntCourse) *EntUserUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euu.RemoveCourseIDs(ids...)
}

// ClearTodo clears all "todo" edges to the EntTodo entity.
func (euu *EntUserUpdate) ClearTodo() *EntUserUpdate {
	euu.mutation.ClearTodo()
	return euu
}

// RemoveTodoIDs removes the "todo" edge to EntTodo entities by IDs.
func (euu *EntUserUpdate) RemoveTodoIDs(ids ...int) *EntUserUpdate {
	euu.mutation.RemoveTodoIDs(ids...)
	return euu
}

// RemoveTodo removes "todo" edges to EntTodo entities.
func (euu *EntUserUpdate) RemoveTodo(e ...*EntTodo) *EntUserUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euu.RemoveTodoIDs(ids...)
}

// ClearAttendance clears all "attendance" edges to the EntAttendance entity.
func (euu *EntUserUpdate) ClearAttendance() *EntUserUpdate {
	euu.mutation.ClearAttendance()
	return euu
}

// RemoveAttendanceIDs removes the "attendance" edge to EntAttendance entities by IDs.
func (euu *EntUserUpdate) RemoveAttendanceIDs(ids ...int) *EntUserUpdate {
	euu.mutation.RemoveAttendanceIDs(ids...)
	return euu
}

// RemoveAttendance removes "attendance" edges to EntAttendance entities.
func (euu *EntUserUpdate) RemoveAttendance(e ...*EntAttendance) *EntUserUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euu.RemoveAttendanceIDs(ids...)
}

// ClearPost clears all "post" edges to the EntPost entity.
func (euu *EntUserUpdate) ClearPost() *EntUserUpdate {
	euu.mutation.ClearPost()
	return euu
}

// RemovePostIDs removes the "post" edge to EntPost entities by IDs.
func (euu *EntUserUpdate) RemovePostIDs(ids ...int) *EntUserUpdate {
	euu.mutation.RemovePostIDs(ids...)
	return euu
}

// RemovePost removes "post" edges to EntPost entities.
func (euu *EntUserUpdate) RemovePost(e ...*EntPost) *EntUserUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euu.RemovePostIDs(ids...)
}

// ClearComment clears all "comment" edges to the EntComment entity.
func (euu *EntUserUpdate) ClearComment() *EntUserUpdate {
	euu.mutation.ClearComment()
	return euu
}

// RemoveCommentIDs removes the "comment" edge to EntComment entities by IDs.
func (euu *EntUserUpdate) RemoveCommentIDs(ids ...int) *EntUserUpdate {
	euu.mutation.RemoveCommentIDs(ids...)
	return euu
}

// RemoveComment removes "comment" edges to EntComment entities.
func (euu *EntUserUpdate) RemoveComment(e ...*EntComment) *EntUserUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euu.RemoveCommentIDs(ids...)
}

// ClearJoin clears all "join" edges to the EntCourse entity.
func (euu *EntUserUpdate) ClearJoin() *EntUserUpdate {
	euu.mutation.ClearJoin()
	return euu
}

// RemoveJoinIDs removes the "join" edge to EntCourse entities by IDs.
func (euu *EntUserUpdate) RemoveJoinIDs(ids ...int) *EntUserUpdate {
	euu.mutation.RemoveJoinIDs(ids...)
	return euu
}

// RemoveJoin removes "join" edges to EntCourse entities.
func (euu *EntUserUpdate) RemoveJoin(e ...*EntCourse) *EntUserUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euu.RemoveJoinIDs(ids...)
}

// ClearChildren clears all "children" edges to the EntUser entity.
func (euu *EntUserUpdate) ClearChildren() *EntUserUpdate {
	euu.mutation.ClearChildren()
	return euu
}

// RemoveChildIDs removes the "children" edge to EntUser entities by IDs.
func (euu *EntUserUpdate) RemoveChildIDs(ids ...int) *EntUserUpdate {
	euu.mutation.RemoveChildIDs(ids...)
	return euu
}

// RemoveChildren removes "children" edges to EntUser entities.
func (euu *EntUserUpdate) RemoveChildren(e ...*EntUser) *EntUserUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euu.RemoveChildIDs(ids...)
}

// ClearParent clears all "parent" edges to the EntUser entity.
func (euu *EntUserUpdate) ClearParent() *EntUserUpdate {
	euu.mutation.ClearParent()
	return euu
}

// RemoveParentIDs removes the "parent" edge to EntUser entities by IDs.
func (euu *EntUserUpdate) RemoveParentIDs(ids ...int) *EntUserUpdate {
	euu.mutation.RemoveParentIDs(ids...)
	return euu
}

// RemoveParent removes "parent" edges to EntUser entities.
func (euu *EntUserUpdate) RemoveParent(e ...*EntUser) *EntUserUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euu.RemoveParentIDs(ids...)
}

// ClearStudent clears all "student" edges to the EntUser entity.
func (euu *EntUserUpdate) ClearStudent() *EntUserUpdate {
	euu.mutation.ClearStudent()
	return euu
}

// RemoveStudentIDs removes the "student" edge to EntUser entities by IDs.
func (euu *EntUserUpdate) RemoveStudentIDs(ids ...int) *EntUserUpdate {
	euu.mutation.RemoveStudentIDs(ids...)
	return euu
}

// RemoveStudent removes "student" edges to EntUser entities.
func (euu *EntUserUpdate) RemoveStudent(e ...*EntUser) *EntUserUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euu.RemoveStudentIDs(ids...)
}

// ClearTutor clears all "tutor" edges to the EntUser entity.
func (euu *EntUserUpdate) ClearTutor() *EntUserUpdate {
	euu.mutation.ClearTutor()
	return euu
}

// RemoveTutorIDs removes the "tutor" edge to EntUser entities by IDs.
func (euu *EntUserUpdate) RemoveTutorIDs(ids ...int) *EntUserUpdate {
	euu.mutation.RemoveTutorIDs(ids...)
	return euu
}

// RemoveTutor removes "tutor" edges to EntUser entities.
func (euu *EntUserUpdate) RemoveTutor(e ...*EntUser) *EntUserUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euu.RemoveTutorIDs(ids...)
}

// ClearSParent clears all "SParent" edges to the EntUser entity.
func (euu *EntUserUpdate) ClearSParent() *EntUserUpdate {
	euu.mutation.ClearSParent()
	return euu
}

// RemoveSParentIDs removes the "SParent" edge to EntUser entities by IDs.
func (euu *EntUserUpdate) RemoveSParentIDs(ids ...int) *EntUserUpdate {
	euu.mutation.RemoveSParentIDs(ids...)
	return euu
}

// RemoveSParent removes "SParent" edges to EntUser entities.
func (euu *EntUserUpdate) RemoveSParent(e ...*EntUser) *EntUserUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euu.RemoveSParentIDs(ids...)
}

// ClearSTutor clears all "STutor" edges to the EntUser entity.
func (euu *EntUserUpdate) ClearSTutor() *EntUserUpdate {
	euu.mutation.ClearSTutor()
	return euu
}

// RemoveSTutorIDs removes the "STutor" edge to EntUser entities by IDs.
func (euu *EntUserUpdate) RemoveSTutorIDs(ids ...int) *EntUserUpdate {
	euu.mutation.RemoveSTutorIDs(ids...)
	return euu
}

// RemoveSTutor removes "STutor" edges to EntUser entities.
func (euu *EntUserUpdate) RemoveSTutor(e ...*EntUser) *EntUserUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euu.RemoveSTutorIDs(ids...)
}

// ClearCanSee clears all "canSee" edges to the EntPost entity.
func (euu *EntUserUpdate) ClearCanSee() *EntUserUpdate {
	euu.mutation.ClearCanSee()
	return euu
}

// RemoveCanSeeIDs removes the "canSee" edge to EntPost entities by IDs.
func (euu *EntUserUpdate) RemoveCanSeeIDs(ids ...int) *EntUserUpdate {
	euu.mutation.RemoveCanSeeIDs(ids...)
	return euu
}

// RemoveCanSee removes "canSee" edges to EntPost entities.
func (euu *EntUserUpdate) RemoveCanSee(e ...*EntPost) *EntUserUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euu.RemoveCanSeeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (euu *EntUserUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	euu.defaults()
	if len(euu.hooks) == 0 {
		if err = euu.check(); err != nil {
			return 0, err
		}
		affected, err = euu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EntUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = euu.check(); err != nil {
				return 0, err
			}
			euu.mutation = mutation
			affected, err = euu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(euu.hooks) - 1; i >= 0; i-- {
			if euu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = euu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, euu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (euu *EntUserUpdate) SaveX(ctx context.Context) int {
	affected, err := euu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (euu *EntUserUpdate) Exec(ctx context.Context) error {
	_, err := euu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euu *EntUserUpdate) ExecX(ctx context.Context) {
	if err := euu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euu *EntUserUpdate) defaults() {
	if _, ok := euu.mutation.UpdatedAt(); !ok {
		v := entuser.UpdateDefaultUpdatedAt()
		euu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euu *EntUserUpdate) check() error {
	if v, ok := euu.mutation.Name(); ok {
		if err := entuser.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "EntUser.name": %w`, err)}
		}
	}
	if v, ok := euu.mutation.Email(); ok {
		if err := entuser.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "EntUser.email": %w`, err)}
		}
	}
	if v, ok := euu.mutation.Password(); ok {
		if err := entuser.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "EntUser.password": %w`, err)}
		}
	}
	if v, ok := euu.mutation.Phone(); ok {
		if err := entuser.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "EntUser.phone": %w`, err)}
		}
	}
	return nil
}

func (euu *EntUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   entuser.Table,
			Columns: entuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: entuser.FieldID,
			},
		},
	}
	if ps := euu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: entuser.FieldUpdatedAt,
		})
	}
	if value, ok := euu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entuser.FieldName,
		})
	}
	if value, ok := euu.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entuser.FieldEmail,
		})
	}
	if value, ok := euu.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entuser.FieldPassword,
		})
	}
	if value, ok := euu.mutation.Country(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entuser.FieldCountry,
		})
	}
	if euu.mutation.CountryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: entuser.FieldCountry,
		})
	}
	if value, ok := euu.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entuser.FieldPhone,
		})
	}
	if euu.mutation.PhoneCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: entuser.FieldPhone,
		})
	}
	if value, ok := euu.mutation.DateOfBirth(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: entuser.FieldDateOfBirth,
		})
	}
	if euu.mutation.DateOfBirthCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: entuser.FieldDateOfBirth,
		})
	}
	if value, ok := euu.mutation.ProfilePictureUrl(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entuser.FieldProfilePictureUrl,
		})
	}
	if euu.mutation.ProfilePictureUrlCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: entuser.FieldProfilePictureUrl,
		})
	}
	if value, ok := euu.mutation.IsTutor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: entuser.FieldIsTutor,
		})
	}
	if value, ok := euu.mutation.IsStudent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: entuser.FieldIsStudent,
		})
	}
	if value, ok := euu.mutation.IsParent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: entuser.FieldIsParent,
		})
	}
	if euu.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entuser.CourseTable,
			Columns: entuser.CoursePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entcourse.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euu.mutation.RemovedCourseIDs(); len(nodes) > 0 && !euu.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entuser.CourseTable,
			Columns: entuser.CoursePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entcourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euu.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entuser.CourseTable,
			Columns: entuser.CoursePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entcourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euu.mutation.TodoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entuser.TodoTable,
			Columns: []string{entuser.TodoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enttodo.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euu.mutation.RemovedTodoIDs(); len(nodes) > 0 && !euu.mutation.TodoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entuser.TodoTable,
			Columns: []string{entuser.TodoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enttodo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euu.mutation.TodoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entuser.TodoTable,
			Columns: []string{entuser.TodoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enttodo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euu.mutation.AttendanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entuser.AttendanceTable,
			Columns: []string{entuser.AttendanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entattendance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euu.mutation.RemovedAttendanceIDs(); len(nodes) > 0 && !euu.mutation.AttendanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entuser.AttendanceTable,
			Columns: []string{entuser.AttendanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entattendance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euu.mutation.AttendanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entuser.AttendanceTable,
			Columns: []string{entuser.AttendanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entattendance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euu.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entuser.PostTable,
			Columns: []string{entuser.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entpost.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euu.mutation.RemovedPostIDs(); len(nodes) > 0 && !euu.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entuser.PostTable,
			Columns: []string{entuser.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entpost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euu.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entuser.PostTable,
			Columns: []string{entuser.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entpost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euu.mutation.CommentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entuser.CommentTable,
			Columns: []string{entuser.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entcomment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euu.mutation.RemovedCommentIDs(); len(nodes) > 0 && !euu.mutation.CommentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entuser.CommentTable,
			Columns: []string{entuser.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entcomment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euu.mutation.CommentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entuser.CommentTable,
			Columns: []string{entuser.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entcomment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euu.mutation.JoinCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entuser.JoinTable,
			Columns: entuser.JoinPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entcourse.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euu.mutation.RemovedJoinIDs(); len(nodes) > 0 && !euu.mutation.JoinCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entuser.JoinTable,
			Columns: entuser.JoinPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entcourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euu.mutation.JoinIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entuser.JoinTable,
			Columns: entuser.JoinPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entcourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   entuser.ChildrenTable,
			Columns: entuser.ChildrenPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !euu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   entuser.ChildrenTable,
			Columns: entuser.ChildrenPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   entuser.ChildrenTable,
			Columns: entuser.ChildrenPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entuser.ParentTable,
			Columns: entuser.ParentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euu.mutation.RemovedParentIDs(); len(nodes) > 0 && !euu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entuser.ParentTable,
			Columns: entuser.ParentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entuser.ParentTable,
			Columns: entuser.ParentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euu.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   entuser.StudentTable,
			Columns: entuser.StudentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euu.mutation.RemovedStudentIDs(); len(nodes) > 0 && !euu.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   entuser.StudentTable,
			Columns: entuser.StudentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euu.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   entuser.StudentTable,
			Columns: entuser.StudentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euu.mutation.TutorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entuser.TutorTable,
			Columns: entuser.TutorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euu.mutation.RemovedTutorIDs(); len(nodes) > 0 && !euu.mutation.TutorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entuser.TutorTable,
			Columns: entuser.TutorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euu.mutation.TutorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entuser.TutorTable,
			Columns: entuser.TutorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euu.mutation.SParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   entuser.SParentTable,
			Columns: entuser.SParentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euu.mutation.RemovedSParentIDs(); len(nodes) > 0 && !euu.mutation.SParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   entuser.SParentTable,
			Columns: entuser.SParentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euu.mutation.SParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   entuser.SParentTable,
			Columns: entuser.SParentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euu.mutation.STutorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entuser.STutorTable,
			Columns: entuser.STutorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euu.mutation.RemovedSTutorIDs(); len(nodes) > 0 && !euu.mutation.STutorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entuser.STutorTable,
			Columns: entuser.STutorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euu.mutation.STutorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entuser.STutorTable,
			Columns: entuser.STutorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euu.mutation.CanSeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   entuser.CanSeeTable,
			Columns: entuser.CanSeePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entpost.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euu.mutation.RemovedCanSeeIDs(); len(nodes) > 0 && !euu.mutation.CanSeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   entuser.CanSeeTable,
			Columns: entuser.CanSeePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entpost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euu.mutation.CanSeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   entuser.CanSeeTable,
			Columns: entuser.CanSeePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entpost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, euu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// EntUserUpdateOne is the builder for updating a single EntUser entity.
type EntUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EntUserMutation
}

// SetUpdatedAt sets the "updatedAt" field.
func (euuo *EntUserUpdateOne) SetUpdatedAt(t time.Time) *EntUserUpdateOne {
	euuo.mutation.SetUpdatedAt(t)
	return euuo
}

// SetName sets the "name" field.
func (euuo *EntUserUpdateOne) SetName(s string) *EntUserUpdateOne {
	euuo.mutation.SetName(s)
	return euuo
}

// SetEmail sets the "email" field.
func (euuo *EntUserUpdateOne) SetEmail(s string) *EntUserUpdateOne {
	euuo.mutation.SetEmail(s)
	return euuo
}

// SetPassword sets the "password" field.
func (euuo *EntUserUpdateOne) SetPassword(s string) *EntUserUpdateOne {
	euuo.mutation.SetPassword(s)
	return euuo
}

// SetCountry sets the "country" field.
func (euuo *EntUserUpdateOne) SetCountry(s string) *EntUserUpdateOne {
	euuo.mutation.SetCountry(s)
	return euuo
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (euuo *EntUserUpdateOne) SetNillableCountry(s *string) *EntUserUpdateOne {
	if s != nil {
		euuo.SetCountry(*s)
	}
	return euuo
}

// ClearCountry clears the value of the "country" field.
func (euuo *EntUserUpdateOne) ClearCountry() *EntUserUpdateOne {
	euuo.mutation.ClearCountry()
	return euuo
}

// SetPhone sets the "phone" field.
func (euuo *EntUserUpdateOne) SetPhone(s string) *EntUserUpdateOne {
	euuo.mutation.SetPhone(s)
	return euuo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (euuo *EntUserUpdateOne) SetNillablePhone(s *string) *EntUserUpdateOne {
	if s != nil {
		euuo.SetPhone(*s)
	}
	return euuo
}

// ClearPhone clears the value of the "phone" field.
func (euuo *EntUserUpdateOne) ClearPhone() *EntUserUpdateOne {
	euuo.mutation.ClearPhone()
	return euuo
}

// SetDateOfBirth sets the "dateOfBirth" field.
func (euuo *EntUserUpdateOne) SetDateOfBirth(t time.Time) *EntUserUpdateOne {
	euuo.mutation.SetDateOfBirth(t)
	return euuo
}

// SetNillableDateOfBirth sets the "dateOfBirth" field if the given value is not nil.
func (euuo *EntUserUpdateOne) SetNillableDateOfBirth(t *time.Time) *EntUserUpdateOne {
	if t != nil {
		euuo.SetDateOfBirth(*t)
	}
	return euuo
}

// ClearDateOfBirth clears the value of the "dateOfBirth" field.
func (euuo *EntUserUpdateOne) ClearDateOfBirth() *EntUserUpdateOne {
	euuo.mutation.ClearDateOfBirth()
	return euuo
}

// SetProfilePictureUrl sets the "profilePictureUrl" field.
func (euuo *EntUserUpdateOne) SetProfilePictureUrl(s string) *EntUserUpdateOne {
	euuo.mutation.SetProfilePictureUrl(s)
	return euuo
}

// SetNillableProfilePictureUrl sets the "profilePictureUrl" field if the given value is not nil.
func (euuo *EntUserUpdateOne) SetNillableProfilePictureUrl(s *string) *EntUserUpdateOne {
	if s != nil {
		euuo.SetProfilePictureUrl(*s)
	}
	return euuo
}

// ClearProfilePictureUrl clears the value of the "profilePictureUrl" field.
func (euuo *EntUserUpdateOne) ClearProfilePictureUrl() *EntUserUpdateOne {
	euuo.mutation.ClearProfilePictureUrl()
	return euuo
}

// SetIsTutor sets the "isTutor" field.
func (euuo *EntUserUpdateOne) SetIsTutor(b bool) *EntUserUpdateOne {
	euuo.mutation.SetIsTutor(b)
	return euuo
}

// SetNillableIsTutor sets the "isTutor" field if the given value is not nil.
func (euuo *EntUserUpdateOne) SetNillableIsTutor(b *bool) *EntUserUpdateOne {
	if b != nil {
		euuo.SetIsTutor(*b)
	}
	return euuo
}

// SetIsStudent sets the "isStudent" field.
func (euuo *EntUserUpdateOne) SetIsStudent(b bool) *EntUserUpdateOne {
	euuo.mutation.SetIsStudent(b)
	return euuo
}

// SetNillableIsStudent sets the "isStudent" field if the given value is not nil.
func (euuo *EntUserUpdateOne) SetNillableIsStudent(b *bool) *EntUserUpdateOne {
	if b != nil {
		euuo.SetIsStudent(*b)
	}
	return euuo
}

// SetIsParent sets the "isParent" field.
func (euuo *EntUserUpdateOne) SetIsParent(b bool) *EntUserUpdateOne {
	euuo.mutation.SetIsParent(b)
	return euuo
}

// SetNillableIsParent sets the "isParent" field if the given value is not nil.
func (euuo *EntUserUpdateOne) SetNillableIsParent(b *bool) *EntUserUpdateOne {
	if b != nil {
		euuo.SetIsParent(*b)
	}
	return euuo
}

// AddCourseIDs adds the "course" edge to the EntCourse entity by IDs.
func (euuo *EntUserUpdateOne) AddCourseIDs(ids ...int) *EntUserUpdateOne {
	euuo.mutation.AddCourseIDs(ids...)
	return euuo
}

// AddCourse adds the "course" edges to the EntCourse entity.
func (euuo *EntUserUpdateOne) AddCourse(e ...*EntCourse) *EntUserUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euuo.AddCourseIDs(ids...)
}

// AddTodoIDs adds the "todo" edge to the EntTodo entity by IDs.
func (euuo *EntUserUpdateOne) AddTodoIDs(ids ...int) *EntUserUpdateOne {
	euuo.mutation.AddTodoIDs(ids...)
	return euuo
}

// AddTodo adds the "todo" edges to the EntTodo entity.
func (euuo *EntUserUpdateOne) AddTodo(e ...*EntTodo) *EntUserUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euuo.AddTodoIDs(ids...)
}

// AddAttendanceIDs adds the "attendance" edge to the EntAttendance entity by IDs.
func (euuo *EntUserUpdateOne) AddAttendanceIDs(ids ...int) *EntUserUpdateOne {
	euuo.mutation.AddAttendanceIDs(ids...)
	return euuo
}

// AddAttendance adds the "attendance" edges to the EntAttendance entity.
func (euuo *EntUserUpdateOne) AddAttendance(e ...*EntAttendance) *EntUserUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euuo.AddAttendanceIDs(ids...)
}

// AddPostIDs adds the "post" edge to the EntPost entity by IDs.
func (euuo *EntUserUpdateOne) AddPostIDs(ids ...int) *EntUserUpdateOne {
	euuo.mutation.AddPostIDs(ids...)
	return euuo
}

// AddPost adds the "post" edges to the EntPost entity.
func (euuo *EntUserUpdateOne) AddPost(e ...*EntPost) *EntUserUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euuo.AddPostIDs(ids...)
}

// AddCommentIDs adds the "comment" edge to the EntComment entity by IDs.
func (euuo *EntUserUpdateOne) AddCommentIDs(ids ...int) *EntUserUpdateOne {
	euuo.mutation.AddCommentIDs(ids...)
	return euuo
}

// AddComment adds the "comment" edges to the EntComment entity.
func (euuo *EntUserUpdateOne) AddComment(e ...*EntComment) *EntUserUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euuo.AddCommentIDs(ids...)
}

// AddJoinIDs adds the "join" edge to the EntCourse entity by IDs.
func (euuo *EntUserUpdateOne) AddJoinIDs(ids ...int) *EntUserUpdateOne {
	euuo.mutation.AddJoinIDs(ids...)
	return euuo
}

// AddJoin adds the "join" edges to the EntCourse entity.
func (euuo *EntUserUpdateOne) AddJoin(e ...*EntCourse) *EntUserUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euuo.AddJoinIDs(ids...)
}

// AddChildIDs adds the "children" edge to the EntUser entity by IDs.
func (euuo *EntUserUpdateOne) AddChildIDs(ids ...int) *EntUserUpdateOne {
	euuo.mutation.AddChildIDs(ids...)
	return euuo
}

// AddChildren adds the "children" edges to the EntUser entity.
func (euuo *EntUserUpdateOne) AddChildren(e ...*EntUser) *EntUserUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euuo.AddChildIDs(ids...)
}

// AddParentIDs adds the "parent" edge to the EntUser entity by IDs.
func (euuo *EntUserUpdateOne) AddParentIDs(ids ...int) *EntUserUpdateOne {
	euuo.mutation.AddParentIDs(ids...)
	return euuo
}

// AddParent adds the "parent" edges to the EntUser entity.
func (euuo *EntUserUpdateOne) AddParent(e ...*EntUser) *EntUserUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euuo.AddParentIDs(ids...)
}

// AddStudentIDs adds the "student" edge to the EntUser entity by IDs.
func (euuo *EntUserUpdateOne) AddStudentIDs(ids ...int) *EntUserUpdateOne {
	euuo.mutation.AddStudentIDs(ids...)
	return euuo
}

// AddStudent adds the "student" edges to the EntUser entity.
func (euuo *EntUserUpdateOne) AddStudent(e ...*EntUser) *EntUserUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euuo.AddStudentIDs(ids...)
}

// AddTutorIDs adds the "tutor" edge to the EntUser entity by IDs.
func (euuo *EntUserUpdateOne) AddTutorIDs(ids ...int) *EntUserUpdateOne {
	euuo.mutation.AddTutorIDs(ids...)
	return euuo
}

// AddTutor adds the "tutor" edges to the EntUser entity.
func (euuo *EntUserUpdateOne) AddTutor(e ...*EntUser) *EntUserUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euuo.AddTutorIDs(ids...)
}

// AddSParentIDs adds the "SParent" edge to the EntUser entity by IDs.
func (euuo *EntUserUpdateOne) AddSParentIDs(ids ...int) *EntUserUpdateOne {
	euuo.mutation.AddSParentIDs(ids...)
	return euuo
}

// AddSParent adds the "SParent" edges to the EntUser entity.
func (euuo *EntUserUpdateOne) AddSParent(e ...*EntUser) *EntUserUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euuo.AddSParentIDs(ids...)
}

// AddSTutorIDs adds the "STutor" edge to the EntUser entity by IDs.
func (euuo *EntUserUpdateOne) AddSTutorIDs(ids ...int) *EntUserUpdateOne {
	euuo.mutation.AddSTutorIDs(ids...)
	return euuo
}

// AddSTutor adds the "STutor" edges to the EntUser entity.
func (euuo *EntUserUpdateOne) AddSTutor(e ...*EntUser) *EntUserUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euuo.AddSTutorIDs(ids...)
}

// AddCanSeeIDs adds the "canSee" edge to the EntPost entity by IDs.
func (euuo *EntUserUpdateOne) AddCanSeeIDs(ids ...int) *EntUserUpdateOne {
	euuo.mutation.AddCanSeeIDs(ids...)
	return euuo
}

// AddCanSee adds the "canSee" edges to the EntPost entity.
func (euuo *EntUserUpdateOne) AddCanSee(e ...*EntPost) *EntUserUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euuo.AddCanSeeIDs(ids...)
}

// Mutation returns the EntUserMutation object of the builder.
func (euuo *EntUserUpdateOne) Mutation() *EntUserMutation {
	return euuo.mutation
}

// ClearCourse clears all "course" edges to the EntCourse entity.
func (euuo *EntUserUpdateOne) ClearCourse() *EntUserUpdateOne {
	euuo.mutation.ClearCourse()
	return euuo
}

// RemoveCourseIDs removes the "course" edge to EntCourse entities by IDs.
func (euuo *EntUserUpdateOne) RemoveCourseIDs(ids ...int) *EntUserUpdateOne {
	euuo.mutation.RemoveCourseIDs(ids...)
	return euuo
}

// RemoveCourse removes "course" edges to EntCourse entities.
func (euuo *EntUserUpdateOne) RemoveCourse(e ...*EntCourse) *EntUserUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euuo.RemoveCourseIDs(ids...)
}

// ClearTodo clears all "todo" edges to the EntTodo entity.
func (euuo *EntUserUpdateOne) ClearTodo() *EntUserUpdateOne {
	euuo.mutation.ClearTodo()
	return euuo
}

// RemoveTodoIDs removes the "todo" edge to EntTodo entities by IDs.
func (euuo *EntUserUpdateOne) RemoveTodoIDs(ids ...int) *EntUserUpdateOne {
	euuo.mutation.RemoveTodoIDs(ids...)
	return euuo
}

// RemoveTodo removes "todo" edges to EntTodo entities.
func (euuo *EntUserUpdateOne) RemoveTodo(e ...*EntTodo) *EntUserUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euuo.RemoveTodoIDs(ids...)
}

// ClearAttendance clears all "attendance" edges to the EntAttendance entity.
func (euuo *EntUserUpdateOne) ClearAttendance() *EntUserUpdateOne {
	euuo.mutation.ClearAttendance()
	return euuo
}

// RemoveAttendanceIDs removes the "attendance" edge to EntAttendance entities by IDs.
func (euuo *EntUserUpdateOne) RemoveAttendanceIDs(ids ...int) *EntUserUpdateOne {
	euuo.mutation.RemoveAttendanceIDs(ids...)
	return euuo
}

// RemoveAttendance removes "attendance" edges to EntAttendance entities.
func (euuo *EntUserUpdateOne) RemoveAttendance(e ...*EntAttendance) *EntUserUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euuo.RemoveAttendanceIDs(ids...)
}

// ClearPost clears all "post" edges to the EntPost entity.
func (euuo *EntUserUpdateOne) ClearPost() *EntUserUpdateOne {
	euuo.mutation.ClearPost()
	return euuo
}

// RemovePostIDs removes the "post" edge to EntPost entities by IDs.
func (euuo *EntUserUpdateOne) RemovePostIDs(ids ...int) *EntUserUpdateOne {
	euuo.mutation.RemovePostIDs(ids...)
	return euuo
}

// RemovePost removes "post" edges to EntPost entities.
func (euuo *EntUserUpdateOne) RemovePost(e ...*EntPost) *EntUserUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euuo.RemovePostIDs(ids...)
}

// ClearComment clears all "comment" edges to the EntComment entity.
func (euuo *EntUserUpdateOne) ClearComment() *EntUserUpdateOne {
	euuo.mutation.ClearComment()
	return euuo
}

// RemoveCommentIDs removes the "comment" edge to EntComment entities by IDs.
func (euuo *EntUserUpdateOne) RemoveCommentIDs(ids ...int) *EntUserUpdateOne {
	euuo.mutation.RemoveCommentIDs(ids...)
	return euuo
}

// RemoveComment removes "comment" edges to EntComment entities.
func (euuo *EntUserUpdateOne) RemoveComment(e ...*EntComment) *EntUserUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euuo.RemoveCommentIDs(ids...)
}

// ClearJoin clears all "join" edges to the EntCourse entity.
func (euuo *EntUserUpdateOne) ClearJoin() *EntUserUpdateOne {
	euuo.mutation.ClearJoin()
	return euuo
}

// RemoveJoinIDs removes the "join" edge to EntCourse entities by IDs.
func (euuo *EntUserUpdateOne) RemoveJoinIDs(ids ...int) *EntUserUpdateOne {
	euuo.mutation.RemoveJoinIDs(ids...)
	return euuo
}

// RemoveJoin removes "join" edges to EntCourse entities.
func (euuo *EntUserUpdateOne) RemoveJoin(e ...*EntCourse) *EntUserUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euuo.RemoveJoinIDs(ids...)
}

// ClearChildren clears all "children" edges to the EntUser entity.
func (euuo *EntUserUpdateOne) ClearChildren() *EntUserUpdateOne {
	euuo.mutation.ClearChildren()
	return euuo
}

// RemoveChildIDs removes the "children" edge to EntUser entities by IDs.
func (euuo *EntUserUpdateOne) RemoveChildIDs(ids ...int) *EntUserUpdateOne {
	euuo.mutation.RemoveChildIDs(ids...)
	return euuo
}

// RemoveChildren removes "children" edges to EntUser entities.
func (euuo *EntUserUpdateOne) RemoveChildren(e ...*EntUser) *EntUserUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euuo.RemoveChildIDs(ids...)
}

// ClearParent clears all "parent" edges to the EntUser entity.
func (euuo *EntUserUpdateOne) ClearParent() *EntUserUpdateOne {
	euuo.mutation.ClearParent()
	return euuo
}

// RemoveParentIDs removes the "parent" edge to EntUser entities by IDs.
func (euuo *EntUserUpdateOne) RemoveParentIDs(ids ...int) *EntUserUpdateOne {
	euuo.mutation.RemoveParentIDs(ids...)
	return euuo
}

// RemoveParent removes "parent" edges to EntUser entities.
func (euuo *EntUserUpdateOne) RemoveParent(e ...*EntUser) *EntUserUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euuo.RemoveParentIDs(ids...)
}

// ClearStudent clears all "student" edges to the EntUser entity.
func (euuo *EntUserUpdateOne) ClearStudent() *EntUserUpdateOne {
	euuo.mutation.ClearStudent()
	return euuo
}

// RemoveStudentIDs removes the "student" edge to EntUser entities by IDs.
func (euuo *EntUserUpdateOne) RemoveStudentIDs(ids ...int) *EntUserUpdateOne {
	euuo.mutation.RemoveStudentIDs(ids...)
	return euuo
}

// RemoveStudent removes "student" edges to EntUser entities.
func (euuo *EntUserUpdateOne) RemoveStudent(e ...*EntUser) *EntUserUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euuo.RemoveStudentIDs(ids...)
}

// ClearTutor clears all "tutor" edges to the EntUser entity.
func (euuo *EntUserUpdateOne) ClearTutor() *EntUserUpdateOne {
	euuo.mutation.ClearTutor()
	return euuo
}

// RemoveTutorIDs removes the "tutor" edge to EntUser entities by IDs.
func (euuo *EntUserUpdateOne) RemoveTutorIDs(ids ...int) *EntUserUpdateOne {
	euuo.mutation.RemoveTutorIDs(ids...)
	return euuo
}

// RemoveTutor removes "tutor" edges to EntUser entities.
func (euuo *EntUserUpdateOne) RemoveTutor(e ...*EntUser) *EntUserUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euuo.RemoveTutorIDs(ids...)
}

// ClearSParent clears all "SParent" edges to the EntUser entity.
func (euuo *EntUserUpdateOne) ClearSParent() *EntUserUpdateOne {
	euuo.mutation.ClearSParent()
	return euuo
}

// RemoveSParentIDs removes the "SParent" edge to EntUser entities by IDs.
func (euuo *EntUserUpdateOne) RemoveSParentIDs(ids ...int) *EntUserUpdateOne {
	euuo.mutation.RemoveSParentIDs(ids...)
	return euuo
}

// RemoveSParent removes "SParent" edges to EntUser entities.
func (euuo *EntUserUpdateOne) RemoveSParent(e ...*EntUser) *EntUserUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euuo.RemoveSParentIDs(ids...)
}

// ClearSTutor clears all "STutor" edges to the EntUser entity.
func (euuo *EntUserUpdateOne) ClearSTutor() *EntUserUpdateOne {
	euuo.mutation.ClearSTutor()
	return euuo
}

// RemoveSTutorIDs removes the "STutor" edge to EntUser entities by IDs.
func (euuo *EntUserUpdateOne) RemoveSTutorIDs(ids ...int) *EntUserUpdateOne {
	euuo.mutation.RemoveSTutorIDs(ids...)
	return euuo
}

// RemoveSTutor removes "STutor" edges to EntUser entities.
func (euuo *EntUserUpdateOne) RemoveSTutor(e ...*EntUser) *EntUserUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euuo.RemoveSTutorIDs(ids...)
}

// ClearCanSee clears all "canSee" edges to the EntPost entity.
func (euuo *EntUserUpdateOne) ClearCanSee() *EntUserUpdateOne {
	euuo.mutation.ClearCanSee()
	return euuo
}

// RemoveCanSeeIDs removes the "canSee" edge to EntPost entities by IDs.
func (euuo *EntUserUpdateOne) RemoveCanSeeIDs(ids ...int) *EntUserUpdateOne {
	euuo.mutation.RemoveCanSeeIDs(ids...)
	return euuo
}

// RemoveCanSee removes "canSee" edges to EntPost entities.
func (euuo *EntUserUpdateOne) RemoveCanSee(e ...*EntPost) *EntUserUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euuo.RemoveCanSeeIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euuo *EntUserUpdateOne) Select(field string, fields ...string) *EntUserUpdateOne {
	euuo.fields = append([]string{field}, fields...)
	return euuo
}

// Save executes the query and returns the updated EntUser entity.
func (euuo *EntUserUpdateOne) Save(ctx context.Context) (*EntUser, error) {
	var (
		err  error
		node *EntUser
	)
	euuo.defaults()
	if len(euuo.hooks) == 0 {
		if err = euuo.check(); err != nil {
			return nil, err
		}
		node, err = euuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EntUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = euuo.check(); err != nil {
				return nil, err
			}
			euuo.mutation = mutation
			node, err = euuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euuo.hooks) - 1; i >= 0; i-- {
			if euuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = euuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, euuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*EntUser)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from EntUserMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euuo *EntUserUpdateOne) SaveX(ctx context.Context) *EntUser {
	node, err := euuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euuo *EntUserUpdateOne) Exec(ctx context.Context) error {
	_, err := euuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euuo *EntUserUpdateOne) ExecX(ctx context.Context) {
	if err := euuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euuo *EntUserUpdateOne) defaults() {
	if _, ok := euuo.mutation.UpdatedAt(); !ok {
		v := entuser.UpdateDefaultUpdatedAt()
		euuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euuo *EntUserUpdateOne) check() error {
	if v, ok := euuo.mutation.Name(); ok {
		if err := entuser.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "EntUser.name": %w`, err)}
		}
	}
	if v, ok := euuo.mutation.Email(); ok {
		if err := entuser.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "EntUser.email": %w`, err)}
		}
	}
	if v, ok := euuo.mutation.Password(); ok {
		if err := entuser.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "EntUser.password": %w`, err)}
		}
	}
	if v, ok := euuo.mutation.Phone(); ok {
		if err := entuser.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "EntUser.phone": %w`, err)}
		}
	}
	return nil
}

func (euuo *EntUserUpdateOne) sqlSave(ctx context.Context) (_node *EntUser, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   entuser.Table,
			Columns: entuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: entuser.FieldID,
			},
		},
	}
	id, ok := euuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EntUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, entuser.FieldID)
		for _, f := range fields {
			if !entuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != entuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: entuser.FieldUpdatedAt,
		})
	}
	if value, ok := euuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entuser.FieldName,
		})
	}
	if value, ok := euuo.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entuser.FieldEmail,
		})
	}
	if value, ok := euuo.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entuser.FieldPassword,
		})
	}
	if value, ok := euuo.mutation.Country(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entuser.FieldCountry,
		})
	}
	if euuo.mutation.CountryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: entuser.FieldCountry,
		})
	}
	if value, ok := euuo.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entuser.FieldPhone,
		})
	}
	if euuo.mutation.PhoneCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: entuser.FieldPhone,
		})
	}
	if value, ok := euuo.mutation.DateOfBirth(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: entuser.FieldDateOfBirth,
		})
	}
	if euuo.mutation.DateOfBirthCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: entuser.FieldDateOfBirth,
		})
	}
	if value, ok := euuo.mutation.ProfilePictureUrl(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entuser.FieldProfilePictureUrl,
		})
	}
	if euuo.mutation.ProfilePictureUrlCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: entuser.FieldProfilePictureUrl,
		})
	}
	if value, ok := euuo.mutation.IsTutor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: entuser.FieldIsTutor,
		})
	}
	if value, ok := euuo.mutation.IsStudent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: entuser.FieldIsStudent,
		})
	}
	if value, ok := euuo.mutation.IsParent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: entuser.FieldIsParent,
		})
	}
	if euuo.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entuser.CourseTable,
			Columns: entuser.CoursePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entcourse.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euuo.mutation.RemovedCourseIDs(); len(nodes) > 0 && !euuo.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entuser.CourseTable,
			Columns: entuser.CoursePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entcourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euuo.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entuser.CourseTable,
			Columns: entuser.CoursePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entcourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euuo.mutation.TodoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entuser.TodoTable,
			Columns: []string{entuser.TodoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enttodo.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euuo.mutation.RemovedTodoIDs(); len(nodes) > 0 && !euuo.mutation.TodoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entuser.TodoTable,
			Columns: []string{entuser.TodoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enttodo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euuo.mutation.TodoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entuser.TodoTable,
			Columns: []string{entuser.TodoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enttodo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euuo.mutation.AttendanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entuser.AttendanceTable,
			Columns: []string{entuser.AttendanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entattendance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euuo.mutation.RemovedAttendanceIDs(); len(nodes) > 0 && !euuo.mutation.AttendanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entuser.AttendanceTable,
			Columns: []string{entuser.AttendanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entattendance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euuo.mutation.AttendanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entuser.AttendanceTable,
			Columns: []string{entuser.AttendanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entattendance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euuo.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entuser.PostTable,
			Columns: []string{entuser.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entpost.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euuo.mutation.RemovedPostIDs(); len(nodes) > 0 && !euuo.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entuser.PostTable,
			Columns: []string{entuser.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entpost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euuo.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entuser.PostTable,
			Columns: []string{entuser.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entpost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euuo.mutation.CommentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entuser.CommentTable,
			Columns: []string{entuser.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entcomment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euuo.mutation.RemovedCommentIDs(); len(nodes) > 0 && !euuo.mutation.CommentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entuser.CommentTable,
			Columns: []string{entuser.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entcomment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euuo.mutation.CommentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entuser.CommentTable,
			Columns: []string{entuser.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entcomment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euuo.mutation.JoinCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entuser.JoinTable,
			Columns: entuser.JoinPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entcourse.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euuo.mutation.RemovedJoinIDs(); len(nodes) > 0 && !euuo.mutation.JoinCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entuser.JoinTable,
			Columns: entuser.JoinPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entcourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euuo.mutation.JoinIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entuser.JoinTable,
			Columns: entuser.JoinPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entcourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   entuser.ChildrenTable,
			Columns: entuser.ChildrenPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euuo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !euuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   entuser.ChildrenTable,
			Columns: entuser.ChildrenPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euuo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   entuser.ChildrenTable,
			Columns: entuser.ChildrenPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entuser.ParentTable,
			Columns: entuser.ParentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euuo.mutation.RemovedParentIDs(); len(nodes) > 0 && !euuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entuser.ParentTable,
			Columns: entuser.ParentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entuser.ParentTable,
			Columns: entuser.ParentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euuo.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   entuser.StudentTable,
			Columns: entuser.StudentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euuo.mutation.RemovedStudentIDs(); len(nodes) > 0 && !euuo.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   entuser.StudentTable,
			Columns: entuser.StudentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euuo.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   entuser.StudentTable,
			Columns: entuser.StudentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euuo.mutation.TutorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entuser.TutorTable,
			Columns: entuser.TutorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euuo.mutation.RemovedTutorIDs(); len(nodes) > 0 && !euuo.mutation.TutorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entuser.TutorTable,
			Columns: entuser.TutorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euuo.mutation.TutorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entuser.TutorTable,
			Columns: entuser.TutorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euuo.mutation.SParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   entuser.SParentTable,
			Columns: entuser.SParentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euuo.mutation.RemovedSParentIDs(); len(nodes) > 0 && !euuo.mutation.SParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   entuser.SParentTable,
			Columns: entuser.SParentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euuo.mutation.SParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   entuser.SParentTable,
			Columns: entuser.SParentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euuo.mutation.STutorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entuser.STutorTable,
			Columns: entuser.STutorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euuo.mutation.RemovedSTutorIDs(); len(nodes) > 0 && !euuo.mutation.STutorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entuser.STutorTable,
			Columns: entuser.STutorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euuo.mutation.STutorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entuser.STutorTable,
			Columns: entuser.STutorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euuo.mutation.CanSeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   entuser.CanSeeTable,
			Columns: entuser.CanSeePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entpost.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euuo.mutation.RemovedCanSeeIDs(); len(nodes) > 0 && !euuo.mutation.CanSeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   entuser.CanSeeTable,
			Columns: entuser.CanSeePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entpost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euuo.mutation.CanSeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   entuser.CanSeeTable,
			Columns: entuser.CanSeePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entpost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EntUser{config: euuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
