// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/internal/ent/entcomment"
	"backend/internal/ent/entpost"
	"backend/internal/ent/entuser"
	"backend/internal/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EntCommentUpdate is the builder for updating EntComment entities.
type EntCommentUpdate struct {
	config
	hooks    []Hook
	mutation *EntCommentMutation
}

// Where appends a list predicates to the EntCommentUpdate builder.
func (ecu *EntCommentUpdate) Where(ps ...predicate.EntComment) *EntCommentUpdate {
	ecu.mutation.Where(ps...)
	return ecu
}

// SetTimestamp sets the "timestamp" field.
func (ecu *EntCommentUpdate) SetTimestamp(t time.Time) *EntCommentUpdate {
	ecu.mutation.SetTimestamp(t)
	return ecu
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (ecu *EntCommentUpdate) SetNillableTimestamp(t *time.Time) *EntCommentUpdate {
	if t != nil {
		ecu.SetTimestamp(*t)
	}
	return ecu
}

// SetContent sets the "content" field.
func (ecu *EntCommentUpdate) SetContent(s string) *EntCommentUpdate {
	ecu.mutation.SetContent(s)
	return ecu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (ecu *EntCommentUpdate) SetNillableContent(s *string) *EntCommentUpdate {
	if s != nil {
		ecu.SetContent(*s)
	}
	return ecu
}

// ClearContent clears the value of the "content" field.
func (ecu *EntCommentUpdate) ClearContent() *EntCommentUpdate {
	ecu.mutation.ClearContent()
	return ecu
}

// SetShare sets the "share" field.
func (ecu *EntCommentUpdate) SetShare(e entcomment.Share) *EntCommentUpdate {
	ecu.mutation.SetShare(e)
	return ecu
}

// SetNillableShare sets the "share" field if the given value is not nil.
func (ecu *EntCommentUpdate) SetNillableShare(e *entcomment.Share) *EntCommentUpdate {
	if e != nil {
		ecu.SetShare(*e)
	}
	return ecu
}

// ClearShare clears the value of the "share" field.
func (ecu *EntCommentUpdate) ClearShare() *EntCommentUpdate {
	ecu.mutation.ClearShare()
	return ecu
}

// SetBelongsToID sets the "belongsTo" edge to the EntPost entity by ID.
func (ecu *EntCommentUpdate) SetBelongsToID(id int) *EntCommentUpdate {
	ecu.mutation.SetBelongsToID(id)
	return ecu
}

// SetNillableBelongsToID sets the "belongsTo" edge to the EntPost entity by ID if the given value is not nil.
func (ecu *EntCommentUpdate) SetNillableBelongsToID(id *int) *EntCommentUpdate {
	if id != nil {
		ecu = ecu.SetBelongsToID(*id)
	}
	return ecu
}

// SetBelongsTo sets the "belongsTo" edge to the EntPost entity.
func (ecu *EntCommentUpdate) SetBelongsTo(e *EntPost) *EntCommentUpdate {
	return ecu.SetBelongsToID(e.ID)
}

// SetOwnedByID sets the "ownedBy" edge to the EntUser entity by ID.
func (ecu *EntCommentUpdate) SetOwnedByID(id int) *EntCommentUpdate {
	ecu.mutation.SetOwnedByID(id)
	return ecu
}

// SetNillableOwnedByID sets the "ownedBy" edge to the EntUser entity by ID if the given value is not nil.
func (ecu *EntCommentUpdate) SetNillableOwnedByID(id *int) *EntCommentUpdate {
	if id != nil {
		ecu = ecu.SetOwnedByID(*id)
	}
	return ecu
}

// SetOwnedBy sets the "ownedBy" edge to the EntUser entity.
func (ecu *EntCommentUpdate) SetOwnedBy(e *EntUser) *EntCommentUpdate {
	return ecu.SetOwnedByID(e.ID)
}

// Mutation returns the EntCommentMutation object of the builder.
func (ecu *EntCommentUpdate) Mutation() *EntCommentMutation {
	return ecu.mutation
}

// ClearBelongsTo clears the "belongsTo" edge to the EntPost entity.
func (ecu *EntCommentUpdate) ClearBelongsTo() *EntCommentUpdate {
	ecu.mutation.ClearBelongsTo()
	return ecu
}

// ClearOwnedBy clears the "ownedBy" edge to the EntUser entity.
func (ecu *EntCommentUpdate) ClearOwnedBy() *EntCommentUpdate {
	ecu.mutation.ClearOwnedBy()
	return ecu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ecu *EntCommentUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ecu.hooks) == 0 {
		if err = ecu.check(); err != nil {
			return 0, err
		}
		affected, err = ecu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EntCommentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ecu.check(); err != nil {
				return 0, err
			}
			ecu.mutation = mutation
			affected, err = ecu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ecu.hooks) - 1; i >= 0; i-- {
			if ecu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ecu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ecu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ecu *EntCommentUpdate) SaveX(ctx context.Context) int {
	affected, err := ecu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ecu *EntCommentUpdate) Exec(ctx context.Context) error {
	_, err := ecu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecu *EntCommentUpdate) ExecX(ctx context.Context) {
	if err := ecu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ecu *EntCommentUpdate) check() error {
	if v, ok := ecu.mutation.Share(); ok {
		if err := entcomment.ShareValidator(v); err != nil {
			return &ValidationError{Name: "share", err: fmt.Errorf(`ent: validator failed for field "EntComment.share": %w`, err)}
		}
	}
	return nil
}

func (ecu *EntCommentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   entcomment.Table,
			Columns: entcomment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: entcomment.FieldID,
			},
		},
	}
	if ps := ecu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ecu.mutation.Timestamp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: entcomment.FieldTimestamp,
		})
	}
	if value, ok := ecu.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entcomment.FieldContent,
		})
	}
	if ecu.mutation.ContentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: entcomment.FieldContent,
		})
	}
	if value, ok := ecu.mutation.Share(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: entcomment.FieldShare,
		})
	}
	if ecu.mutation.ShareCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: entcomment.FieldShare,
		})
	}
	if ecu.mutation.BelongsToCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entcomment.BelongsToTable,
			Columns: []string{entcomment.BelongsToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entpost.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ecu.mutation.BelongsToIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entcomment.BelongsToTable,
			Columns: []string{entcomment.BelongsToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entpost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ecu.mutation.OwnedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entcomment.OwnedByTable,
			Columns: []string{entcomment.OwnedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ecu.mutation.OwnedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entcomment.OwnedByTable,
			Columns: []string{entcomment.OwnedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ecu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entcomment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// EntCommentUpdateOne is the builder for updating a single EntComment entity.
type EntCommentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EntCommentMutation
}

// SetTimestamp sets the "timestamp" field.
func (ecuo *EntCommentUpdateOne) SetTimestamp(t time.Time) *EntCommentUpdateOne {
	ecuo.mutation.SetTimestamp(t)
	return ecuo
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (ecuo *EntCommentUpdateOne) SetNillableTimestamp(t *time.Time) *EntCommentUpdateOne {
	if t != nil {
		ecuo.SetTimestamp(*t)
	}
	return ecuo
}

// SetContent sets the "content" field.
func (ecuo *EntCommentUpdateOne) SetContent(s string) *EntCommentUpdateOne {
	ecuo.mutation.SetContent(s)
	return ecuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (ecuo *EntCommentUpdateOne) SetNillableContent(s *string) *EntCommentUpdateOne {
	if s != nil {
		ecuo.SetContent(*s)
	}
	return ecuo
}

// ClearContent clears the value of the "content" field.
func (ecuo *EntCommentUpdateOne) ClearContent() *EntCommentUpdateOne {
	ecuo.mutation.ClearContent()
	return ecuo
}

// SetShare sets the "share" field.
func (ecuo *EntCommentUpdateOne) SetShare(e entcomment.Share) *EntCommentUpdateOne {
	ecuo.mutation.SetShare(e)
	return ecuo
}

// SetNillableShare sets the "share" field if the given value is not nil.
func (ecuo *EntCommentUpdateOne) SetNillableShare(e *entcomment.Share) *EntCommentUpdateOne {
	if e != nil {
		ecuo.SetShare(*e)
	}
	return ecuo
}

// ClearShare clears the value of the "share" field.
func (ecuo *EntCommentUpdateOne) ClearShare() *EntCommentUpdateOne {
	ecuo.mutation.ClearShare()
	return ecuo
}

// SetBelongsToID sets the "belongsTo" edge to the EntPost entity by ID.
func (ecuo *EntCommentUpdateOne) SetBelongsToID(id int) *EntCommentUpdateOne {
	ecuo.mutation.SetBelongsToID(id)
	return ecuo
}

// SetNillableBelongsToID sets the "belongsTo" edge to the EntPost entity by ID if the given value is not nil.
func (ecuo *EntCommentUpdateOne) SetNillableBelongsToID(id *int) *EntCommentUpdateOne {
	if id != nil {
		ecuo = ecuo.SetBelongsToID(*id)
	}
	return ecuo
}

// SetBelongsTo sets the "belongsTo" edge to the EntPost entity.
func (ecuo *EntCommentUpdateOne) SetBelongsTo(e *EntPost) *EntCommentUpdateOne {
	return ecuo.SetBelongsToID(e.ID)
}

// SetOwnedByID sets the "ownedBy" edge to the EntUser entity by ID.
func (ecuo *EntCommentUpdateOne) SetOwnedByID(id int) *EntCommentUpdateOne {
	ecuo.mutation.SetOwnedByID(id)
	return ecuo
}

// SetNillableOwnedByID sets the "ownedBy" edge to the EntUser entity by ID if the given value is not nil.
func (ecuo *EntCommentUpdateOne) SetNillableOwnedByID(id *int) *EntCommentUpdateOne {
	if id != nil {
		ecuo = ecuo.SetOwnedByID(*id)
	}
	return ecuo
}

// SetOwnedBy sets the "ownedBy" edge to the EntUser entity.
func (ecuo *EntCommentUpdateOne) SetOwnedBy(e *EntUser) *EntCommentUpdateOne {
	return ecuo.SetOwnedByID(e.ID)
}

// Mutation returns the EntCommentMutation object of the builder.
func (ecuo *EntCommentUpdateOne) Mutation() *EntCommentMutation {
	return ecuo.mutation
}

// ClearBelongsTo clears the "belongsTo" edge to the EntPost entity.
func (ecuo *EntCommentUpdateOne) ClearBelongsTo() *EntCommentUpdateOne {
	ecuo.mutation.ClearBelongsTo()
	return ecuo
}

// ClearOwnedBy clears the "ownedBy" edge to the EntUser entity.
func (ecuo *EntCommentUpdateOne) ClearOwnedBy() *EntCommentUpdateOne {
	ecuo.mutation.ClearOwnedBy()
	return ecuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ecuo *EntCommentUpdateOne) Select(field string, fields ...string) *EntCommentUpdateOne {
	ecuo.fields = append([]string{field}, fields...)
	return ecuo
}

// Save executes the query and returns the updated EntComment entity.
func (ecuo *EntCommentUpdateOne) Save(ctx context.Context) (*EntComment, error) {
	var (
		err  error
		node *EntComment
	)
	if len(ecuo.hooks) == 0 {
		if err = ecuo.check(); err != nil {
			return nil, err
		}
		node, err = ecuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EntCommentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ecuo.check(); err != nil {
				return nil, err
			}
			ecuo.mutation = mutation
			node, err = ecuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ecuo.hooks) - 1; i >= 0; i-- {
			if ecuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ecuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ecuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*EntComment)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from EntCommentMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ecuo *EntCommentUpdateOne) SaveX(ctx context.Context) *EntComment {
	node, err := ecuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ecuo *EntCommentUpdateOne) Exec(ctx context.Context) error {
	_, err := ecuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecuo *EntCommentUpdateOne) ExecX(ctx context.Context) {
	if err := ecuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ecuo *EntCommentUpdateOne) check() error {
	if v, ok := ecuo.mutation.Share(); ok {
		if err := entcomment.ShareValidator(v); err != nil {
			return &ValidationError{Name: "share", err: fmt.Errorf(`ent: validator failed for field "EntComment.share": %w`, err)}
		}
	}
	return nil
}

func (ecuo *EntCommentUpdateOne) sqlSave(ctx context.Context) (_node *EntComment, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   entcomment.Table,
			Columns: entcomment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: entcomment.FieldID,
			},
		},
	}
	id, ok := ecuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EntComment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ecuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, entcomment.FieldID)
		for _, f := range fields {
			if !entcomment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != entcomment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ecuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ecuo.mutation.Timestamp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: entcomment.FieldTimestamp,
		})
	}
	if value, ok := ecuo.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entcomment.FieldContent,
		})
	}
	if ecuo.mutation.ContentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: entcomment.FieldContent,
		})
	}
	if value, ok := ecuo.mutation.Share(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: entcomment.FieldShare,
		})
	}
	if ecuo.mutation.ShareCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: entcomment.FieldShare,
		})
	}
	if ecuo.mutation.BelongsToCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entcomment.BelongsToTable,
			Columns: []string{entcomment.BelongsToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entpost.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ecuo.mutation.BelongsToIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entcomment.BelongsToTable,
			Columns: []string{entcomment.BelongsToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entpost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ecuo.mutation.OwnedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entcomment.OwnedByTable,
			Columns: []string{entcomment.OwnedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ecuo.mutation.OwnedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entcomment.OwnedByTable,
			Columns: []string{entcomment.OwnedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EntComment{config: ecuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ecuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entcomment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
