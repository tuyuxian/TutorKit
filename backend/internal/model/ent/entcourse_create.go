// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/internal/model/ent/entattendance"
	"backend/internal/model/ent/entcourse"
	"backend/internal/model/ent/entpost"
	"backend/internal/model/ent/enttodo"
	"backend/internal/model/ent/entuser"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EntCourseCreate is the builder for creating a EntCourse entity.
type EntCourseCreate struct {
	config
	mutation *EntCourseMutation
	hooks    []Hook
}

// SetCreatedAt sets the "createdAt" field.
func (ecc *EntCourseCreate) SetCreatedAt(t time.Time) *EntCourseCreate {
	ecc.mutation.SetCreatedAt(t)
	return ecc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (ecc *EntCourseCreate) SetNillableCreatedAt(t *time.Time) *EntCourseCreate {
	if t != nil {
		ecc.SetCreatedAt(*t)
	}
	return ecc
}

// SetUpdatedAt sets the "updatedAt" field.
func (ecc *EntCourseCreate) SetUpdatedAt(t time.Time) *EntCourseCreate {
	ecc.mutation.SetUpdatedAt(t)
	return ecc
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (ecc *EntCourseCreate) SetNillableUpdatedAt(t *time.Time) *EntCourseCreate {
	if t != nil {
		ecc.SetUpdatedAt(*t)
	}
	return ecc
}

// SetName sets the "name" field.
func (ecc *EntCourseCreate) SetName(s string) *EntCourseCreate {
	ecc.mutation.SetName(s)
	return ecc
}

// SetCourseUrl sets the "courseUrl" field.
func (ecc *EntCourseCreate) SetCourseUrl(s string) *EntCourseCreate {
	ecc.mutation.SetCourseUrl(s)
	return ecc
}

// SetPaymentMethod sets the "paymentMethod" field.
func (ecc *EntCourseCreate) SetPaymentMethod(em entcourse.PaymentMethod) *EntCourseCreate {
	ecc.mutation.SetPaymentMethod(em)
	return ecc
}

// SetPaymentAmount sets the "paymentAmount" field.
func (ecc *EntCourseCreate) SetPaymentAmount(f float64) *EntCourseCreate {
	ecc.mutation.SetPaymentAmount(f)
	return ecc
}

// SetNillablePaymentAmount sets the "paymentAmount" field if the given value is not nil.
func (ecc *EntCourseCreate) SetNillablePaymentAmount(f *float64) *EntCourseCreate {
	if f != nil {
		ecc.SetPaymentAmount(*f)
	}
	return ecc
}

// SetStartDate sets the "startDate" field.
func (ecc *EntCourseCreate) SetStartDate(t time.Time) *EntCourseCreate {
	ecc.mutation.SetStartDate(t)
	return ecc
}

// SetEndDate sets the "endDate" field.
func (ecc *EntCourseCreate) SetEndDate(t time.Time) *EntCourseCreate {
	ecc.mutation.SetEndDate(t)
	return ecc
}

// SetMonday sets the "monday" field.
func (ecc *EntCourseCreate) SetMonday(b bool) *EntCourseCreate {
	ecc.mutation.SetMonday(b)
	return ecc
}

// SetNillableMonday sets the "monday" field if the given value is not nil.
func (ecc *EntCourseCreate) SetNillableMonday(b *bool) *EntCourseCreate {
	if b != nil {
		ecc.SetMonday(*b)
	}
	return ecc
}

// SetTuesday sets the "tuesday" field.
func (ecc *EntCourseCreate) SetTuesday(b bool) *EntCourseCreate {
	ecc.mutation.SetTuesday(b)
	return ecc
}

// SetNillableTuesday sets the "tuesday" field if the given value is not nil.
func (ecc *EntCourseCreate) SetNillableTuesday(b *bool) *EntCourseCreate {
	if b != nil {
		ecc.SetTuesday(*b)
	}
	return ecc
}

// SetWednesday sets the "wednesday" field.
func (ecc *EntCourseCreate) SetWednesday(b bool) *EntCourseCreate {
	ecc.mutation.SetWednesday(b)
	return ecc
}

// SetNillableWednesday sets the "wednesday" field if the given value is not nil.
func (ecc *EntCourseCreate) SetNillableWednesday(b *bool) *EntCourseCreate {
	if b != nil {
		ecc.SetWednesday(*b)
	}
	return ecc
}

// SetThursday sets the "thursday" field.
func (ecc *EntCourseCreate) SetThursday(b bool) *EntCourseCreate {
	ecc.mutation.SetThursday(b)
	return ecc
}

// SetNillableThursday sets the "thursday" field if the given value is not nil.
func (ecc *EntCourseCreate) SetNillableThursday(b *bool) *EntCourseCreate {
	if b != nil {
		ecc.SetThursday(*b)
	}
	return ecc
}

// SetFriday sets the "friday" field.
func (ecc *EntCourseCreate) SetFriday(b bool) *EntCourseCreate {
	ecc.mutation.SetFriday(b)
	return ecc
}

// SetNillableFriday sets the "friday" field if the given value is not nil.
func (ecc *EntCourseCreate) SetNillableFriday(b *bool) *EntCourseCreate {
	if b != nil {
		ecc.SetFriday(*b)
	}
	return ecc
}

// SetSaturday sets the "saturday" field.
func (ecc *EntCourseCreate) SetSaturday(b bool) *EntCourseCreate {
	ecc.mutation.SetSaturday(b)
	return ecc
}

// SetNillableSaturday sets the "saturday" field if the given value is not nil.
func (ecc *EntCourseCreate) SetNillableSaturday(b *bool) *EntCourseCreate {
	if b != nil {
		ecc.SetSaturday(*b)
	}
	return ecc
}

// SetSunday sets the "sunday" field.
func (ecc *EntCourseCreate) SetSunday(b bool) *EntCourseCreate {
	ecc.mutation.SetSunday(b)
	return ecc
}

// SetNillableSunday sets the "sunday" field if the given value is not nil.
func (ecc *EntCourseCreate) SetNillableSunday(b *bool) *EntCourseCreate {
	if b != nil {
		ecc.SetSunday(*b)
	}
	return ecc
}

// SetMondayStartTime sets the "mondayStartTime" field.
func (ecc *EntCourseCreate) SetMondayStartTime(t time.Time) *EntCourseCreate {
	ecc.mutation.SetMondayStartTime(t)
	return ecc
}

// SetNillableMondayStartTime sets the "mondayStartTime" field if the given value is not nil.
func (ecc *EntCourseCreate) SetNillableMondayStartTime(t *time.Time) *EntCourseCreate {
	if t != nil {
		ecc.SetMondayStartTime(*t)
	}
	return ecc
}

// SetMondayEndTime sets the "mondayEndTime" field.
func (ecc *EntCourseCreate) SetMondayEndTime(t time.Time) *EntCourseCreate {
	ecc.mutation.SetMondayEndTime(t)
	return ecc
}

// SetNillableMondayEndTime sets the "mondayEndTime" field if the given value is not nil.
func (ecc *EntCourseCreate) SetNillableMondayEndTime(t *time.Time) *EntCourseCreate {
	if t != nil {
		ecc.SetMondayEndTime(*t)
	}
	return ecc
}

// SetTuesdayStartTime sets the "tuesdayStartTime" field.
func (ecc *EntCourseCreate) SetTuesdayStartTime(t time.Time) *EntCourseCreate {
	ecc.mutation.SetTuesdayStartTime(t)
	return ecc
}

// SetNillableTuesdayStartTime sets the "tuesdayStartTime" field if the given value is not nil.
func (ecc *EntCourseCreate) SetNillableTuesdayStartTime(t *time.Time) *EntCourseCreate {
	if t != nil {
		ecc.SetTuesdayStartTime(*t)
	}
	return ecc
}

// SetTuesdayEndTime sets the "tuesdayEndTime" field.
func (ecc *EntCourseCreate) SetTuesdayEndTime(t time.Time) *EntCourseCreate {
	ecc.mutation.SetTuesdayEndTime(t)
	return ecc
}

// SetNillableTuesdayEndTime sets the "tuesdayEndTime" field if the given value is not nil.
func (ecc *EntCourseCreate) SetNillableTuesdayEndTime(t *time.Time) *EntCourseCreate {
	if t != nil {
		ecc.SetTuesdayEndTime(*t)
	}
	return ecc
}

// SetWednesdayStartTime sets the "wednesdayStartTime" field.
func (ecc *EntCourseCreate) SetWednesdayStartTime(t time.Time) *EntCourseCreate {
	ecc.mutation.SetWednesdayStartTime(t)
	return ecc
}

// SetNillableWednesdayStartTime sets the "wednesdayStartTime" field if the given value is not nil.
func (ecc *EntCourseCreate) SetNillableWednesdayStartTime(t *time.Time) *EntCourseCreate {
	if t != nil {
		ecc.SetWednesdayStartTime(*t)
	}
	return ecc
}

// SetWednesdayEndTime sets the "wednesdayEndTime" field.
func (ecc *EntCourseCreate) SetWednesdayEndTime(t time.Time) *EntCourseCreate {
	ecc.mutation.SetWednesdayEndTime(t)
	return ecc
}

// SetNillableWednesdayEndTime sets the "wednesdayEndTime" field if the given value is not nil.
func (ecc *EntCourseCreate) SetNillableWednesdayEndTime(t *time.Time) *EntCourseCreate {
	if t != nil {
		ecc.SetWednesdayEndTime(*t)
	}
	return ecc
}

// SetThursdayStartTime sets the "thursdayStartTime" field.
func (ecc *EntCourseCreate) SetThursdayStartTime(t time.Time) *EntCourseCreate {
	ecc.mutation.SetThursdayStartTime(t)
	return ecc
}

// SetNillableThursdayStartTime sets the "thursdayStartTime" field if the given value is not nil.
func (ecc *EntCourseCreate) SetNillableThursdayStartTime(t *time.Time) *EntCourseCreate {
	if t != nil {
		ecc.SetThursdayStartTime(*t)
	}
	return ecc
}

// SetThursdayEndTime sets the "thursdayEndTime" field.
func (ecc *EntCourseCreate) SetThursdayEndTime(t time.Time) *EntCourseCreate {
	ecc.mutation.SetThursdayEndTime(t)
	return ecc
}

// SetNillableThursdayEndTime sets the "thursdayEndTime" field if the given value is not nil.
func (ecc *EntCourseCreate) SetNillableThursdayEndTime(t *time.Time) *EntCourseCreate {
	if t != nil {
		ecc.SetThursdayEndTime(*t)
	}
	return ecc
}

// SetFridayStartTime sets the "fridayStartTime" field.
func (ecc *EntCourseCreate) SetFridayStartTime(t time.Time) *EntCourseCreate {
	ecc.mutation.SetFridayStartTime(t)
	return ecc
}

// SetNillableFridayStartTime sets the "fridayStartTime" field if the given value is not nil.
func (ecc *EntCourseCreate) SetNillableFridayStartTime(t *time.Time) *EntCourseCreate {
	if t != nil {
		ecc.SetFridayStartTime(*t)
	}
	return ecc
}

// SetFridayEndTime sets the "fridayEndTime" field.
func (ecc *EntCourseCreate) SetFridayEndTime(t time.Time) *EntCourseCreate {
	ecc.mutation.SetFridayEndTime(t)
	return ecc
}

// SetNillableFridayEndTime sets the "fridayEndTime" field if the given value is not nil.
func (ecc *EntCourseCreate) SetNillableFridayEndTime(t *time.Time) *EntCourseCreate {
	if t != nil {
		ecc.SetFridayEndTime(*t)
	}
	return ecc
}

// SetSaturdayStartTime sets the "saturdayStartTime" field.
func (ecc *EntCourseCreate) SetSaturdayStartTime(t time.Time) *EntCourseCreate {
	ecc.mutation.SetSaturdayStartTime(t)
	return ecc
}

// SetNillableSaturdayStartTime sets the "saturdayStartTime" field if the given value is not nil.
func (ecc *EntCourseCreate) SetNillableSaturdayStartTime(t *time.Time) *EntCourseCreate {
	if t != nil {
		ecc.SetSaturdayStartTime(*t)
	}
	return ecc
}

// SetSaturdayEndTime sets the "saturdayEndTime" field.
func (ecc *EntCourseCreate) SetSaturdayEndTime(t time.Time) *EntCourseCreate {
	ecc.mutation.SetSaturdayEndTime(t)
	return ecc
}

// SetNillableSaturdayEndTime sets the "saturdayEndTime" field if the given value is not nil.
func (ecc *EntCourseCreate) SetNillableSaturdayEndTime(t *time.Time) *EntCourseCreate {
	if t != nil {
		ecc.SetSaturdayEndTime(*t)
	}
	return ecc
}

// SetSundayStartTime sets the "sundayStartTime" field.
func (ecc *EntCourseCreate) SetSundayStartTime(t time.Time) *EntCourseCreate {
	ecc.mutation.SetSundayStartTime(t)
	return ecc
}

// SetNillableSundayStartTime sets the "sundayStartTime" field if the given value is not nil.
func (ecc *EntCourseCreate) SetNillableSundayStartTime(t *time.Time) *EntCourseCreate {
	if t != nil {
		ecc.SetSundayStartTime(*t)
	}
	return ecc
}

// SetSundayEndTime sets the "sundayEndTime" field.
func (ecc *EntCourseCreate) SetSundayEndTime(t time.Time) *EntCourseCreate {
	ecc.mutation.SetSundayEndTime(t)
	return ecc
}

// SetNillableSundayEndTime sets the "sundayEndTime" field if the given value is not nil.
func (ecc *EntCourseCreate) SetNillableSundayEndTime(t *time.Time) *EntCourseCreate {
	if t != nil {
		ecc.SetSundayEndTime(*t)
	}
	return ecc
}

// AddTodoIDs adds the "todo" edge to the EntTodo entity by IDs.
func (ecc *EntCourseCreate) AddTodoIDs(ids ...int) *EntCourseCreate {
	ecc.mutation.AddTodoIDs(ids...)
	return ecc
}

// AddTodo adds the "todo" edges to the EntTodo entity.
func (ecc *EntCourseCreate) AddTodo(e ...*EntTodo) *EntCourseCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ecc.AddTodoIDs(ids...)
}

// AddAttendanceIDs adds the "attendance" edge to the EntAttendance entity by IDs.
func (ecc *EntCourseCreate) AddAttendanceIDs(ids ...int) *EntCourseCreate {
	ecc.mutation.AddAttendanceIDs(ids...)
	return ecc
}

// AddAttendance adds the "attendance" edges to the EntAttendance entity.
func (ecc *EntCourseCreate) AddAttendance(e ...*EntAttendance) *EntCourseCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ecc.AddAttendanceIDs(ids...)
}

// AddPostIDs adds the "post" edge to the EntPost entity by IDs.
func (ecc *EntCourseCreate) AddPostIDs(ids ...int) *EntCourseCreate {
	ecc.mutation.AddPostIDs(ids...)
	return ecc
}

// AddPost adds the "post" edges to the EntPost entity.
func (ecc *EntCourseCreate) AddPost(e ...*EntPost) *EntCourseCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ecc.AddPostIDs(ids...)
}

// AddOwnedByIDs adds the "ownedBy" edge to the EntUser entity by IDs.
func (ecc *EntCourseCreate) AddOwnedByIDs(ids ...int) *EntCourseCreate {
	ecc.mutation.AddOwnedByIDs(ids...)
	return ecc
}

// AddOwnedBy adds the "ownedBy" edges to the EntUser entity.
func (ecc *EntCourseCreate) AddOwnedBy(e ...*EntUser) *EntCourseCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ecc.AddOwnedByIDs(ids...)
}

// AddJoinedByIDs adds the "joinedBy" edge to the EntUser entity by IDs.
func (ecc *EntCourseCreate) AddJoinedByIDs(ids ...int) *EntCourseCreate {
	ecc.mutation.AddJoinedByIDs(ids...)
	return ecc
}

// AddJoinedBy adds the "joinedBy" edges to the EntUser entity.
func (ecc *EntCourseCreate) AddJoinedBy(e ...*EntUser) *EntCourseCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ecc.AddJoinedByIDs(ids...)
}

// Mutation returns the EntCourseMutation object of the builder.
func (ecc *EntCourseCreate) Mutation() *EntCourseMutation {
	return ecc.mutation
}

// Save creates the EntCourse in the database.
func (ecc *EntCourseCreate) Save(ctx context.Context) (*EntCourse, error) {
	var (
		err  error
		node *EntCourse
	)
	ecc.defaults()
	if len(ecc.hooks) == 0 {
		if err = ecc.check(); err != nil {
			return nil, err
		}
		node, err = ecc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EntCourseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ecc.check(); err != nil {
				return nil, err
			}
			ecc.mutation = mutation
			if node, err = ecc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ecc.hooks) - 1; i >= 0; i-- {
			if ecc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ecc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ecc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*EntCourse)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from EntCourseMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ecc *EntCourseCreate) SaveX(ctx context.Context) *EntCourse {
	v, err := ecc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecc *EntCourseCreate) Exec(ctx context.Context) error {
	_, err := ecc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecc *EntCourseCreate) ExecX(ctx context.Context) {
	if err := ecc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ecc *EntCourseCreate) defaults() {
	if _, ok := ecc.mutation.CreatedAt(); !ok {
		v := entcourse.DefaultCreatedAt()
		ecc.mutation.SetCreatedAt(v)
	}
	if _, ok := ecc.mutation.UpdatedAt(); !ok {
		v := entcourse.DefaultUpdatedAt()
		ecc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ecc.mutation.Monday(); !ok {
		v := entcourse.DefaultMonday
		ecc.mutation.SetMonday(v)
	}
	if _, ok := ecc.mutation.Tuesday(); !ok {
		v := entcourse.DefaultTuesday
		ecc.mutation.SetTuesday(v)
	}
	if _, ok := ecc.mutation.Wednesday(); !ok {
		v := entcourse.DefaultWednesday
		ecc.mutation.SetWednesday(v)
	}
	if _, ok := ecc.mutation.Thursday(); !ok {
		v := entcourse.DefaultThursday
		ecc.mutation.SetThursday(v)
	}
	if _, ok := ecc.mutation.Friday(); !ok {
		v := entcourse.DefaultFriday
		ecc.mutation.SetFriday(v)
	}
	if _, ok := ecc.mutation.Saturday(); !ok {
		v := entcourse.DefaultSaturday
		ecc.mutation.SetSaturday(v)
	}
	if _, ok := ecc.mutation.Sunday(); !ok {
		v := entcourse.DefaultSunday
		ecc.mutation.SetSunday(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ecc *EntCourseCreate) check() error {
	if _, ok := ecc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "EntCourse.createdAt"`)}
	}
	if _, ok := ecc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "EntCourse.updatedAt"`)}
	}
	if _, ok := ecc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "EntCourse.name"`)}
	}
	if v, ok := ecc.mutation.Name(); ok {
		if err := entcourse.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "EntCourse.name": %w`, err)}
		}
	}
	if _, ok := ecc.mutation.CourseUrl(); !ok {
		return &ValidationError{Name: "courseUrl", err: errors.New(`ent: missing required field "EntCourse.courseUrl"`)}
	}
	if v, ok := ecc.mutation.CourseUrl(); ok {
		if err := entcourse.CourseUrlValidator(v); err != nil {
			return &ValidationError{Name: "courseUrl", err: fmt.Errorf(`ent: validator failed for field "EntCourse.courseUrl": %w`, err)}
		}
	}
	if _, ok := ecc.mutation.PaymentMethod(); !ok {
		return &ValidationError{Name: "paymentMethod", err: errors.New(`ent: missing required field "EntCourse.paymentMethod"`)}
	}
	if v, ok := ecc.mutation.PaymentMethod(); ok {
		if err := entcourse.PaymentMethodValidator(v); err != nil {
			return &ValidationError{Name: "paymentMethod", err: fmt.Errorf(`ent: validator failed for field "EntCourse.paymentMethod": %w`, err)}
		}
	}
	if v, ok := ecc.mutation.PaymentAmount(); ok {
		if err := entcourse.PaymentAmountValidator(v); err != nil {
			return &ValidationError{Name: "paymentAmount", err: fmt.Errorf(`ent: validator failed for field "EntCourse.paymentAmount": %w`, err)}
		}
	}
	if _, ok := ecc.mutation.StartDate(); !ok {
		return &ValidationError{Name: "startDate", err: errors.New(`ent: missing required field "EntCourse.startDate"`)}
	}
	if _, ok := ecc.mutation.EndDate(); !ok {
		return &ValidationError{Name: "endDate", err: errors.New(`ent: missing required field "EntCourse.endDate"`)}
	}
	if _, ok := ecc.mutation.Monday(); !ok {
		return &ValidationError{Name: "monday", err: errors.New(`ent: missing required field "EntCourse.monday"`)}
	}
	if _, ok := ecc.mutation.Tuesday(); !ok {
		return &ValidationError{Name: "tuesday", err: errors.New(`ent: missing required field "EntCourse.tuesday"`)}
	}
	if _, ok := ecc.mutation.Wednesday(); !ok {
		return &ValidationError{Name: "wednesday", err: errors.New(`ent: missing required field "EntCourse.wednesday"`)}
	}
	if _, ok := ecc.mutation.Thursday(); !ok {
		return &ValidationError{Name: "thursday", err: errors.New(`ent: missing required field "EntCourse.thursday"`)}
	}
	if _, ok := ecc.mutation.Friday(); !ok {
		return &ValidationError{Name: "friday", err: errors.New(`ent: missing required field "EntCourse.friday"`)}
	}
	if _, ok := ecc.mutation.Saturday(); !ok {
		return &ValidationError{Name: "saturday", err: errors.New(`ent: missing required field "EntCourse.saturday"`)}
	}
	if _, ok := ecc.mutation.Sunday(); !ok {
		return &ValidationError{Name: "sunday", err: errors.New(`ent: missing required field "EntCourse.sunday"`)}
	}
	return nil
}

func (ecc *EntCourseCreate) sqlSave(ctx context.Context) (*EntCourse, error) {
	_node, _spec := ecc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ecc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ecc *EntCourseCreate) createSpec() (*EntCourse, *sqlgraph.CreateSpec) {
	var (
		_node = &EntCourse{config: ecc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: entcourse.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: entcourse.FieldID,
			},
		}
	)
	if value, ok := ecc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: entcourse.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ecc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: entcourse.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ecc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entcourse.FieldName,
		})
		_node.Name = value
	}
	if value, ok := ecc.mutation.CourseUrl(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entcourse.FieldCourseUrl,
		})
		_node.CourseUrl = value
	}
	if value, ok := ecc.mutation.PaymentMethod(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: entcourse.FieldPaymentMethod,
		})
		_node.PaymentMethod = value
	}
	if value, ok := ecc.mutation.PaymentAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: entcourse.FieldPaymentAmount,
		})
		_node.PaymentAmount = value
	}
	if value, ok := ecc.mutation.StartDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: entcourse.FieldStartDate,
		})
		_node.StartDate = value
	}
	if value, ok := ecc.mutation.EndDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: entcourse.FieldEndDate,
		})
		_node.EndDate = value
	}
	if value, ok := ecc.mutation.Monday(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: entcourse.FieldMonday,
		})
		_node.Monday = value
	}
	if value, ok := ecc.mutation.Tuesday(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: entcourse.FieldTuesday,
		})
		_node.Tuesday = value
	}
	if value, ok := ecc.mutation.Wednesday(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: entcourse.FieldWednesday,
		})
		_node.Wednesday = value
	}
	if value, ok := ecc.mutation.Thursday(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: entcourse.FieldThursday,
		})
		_node.Thursday = value
	}
	if value, ok := ecc.mutation.Friday(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: entcourse.FieldFriday,
		})
		_node.Friday = value
	}
	if value, ok := ecc.mutation.Saturday(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: entcourse.FieldSaturday,
		})
		_node.Saturday = value
	}
	if value, ok := ecc.mutation.Sunday(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: entcourse.FieldSunday,
		})
		_node.Sunday = value
	}
	if value, ok := ecc.mutation.MondayStartTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: entcourse.FieldMondayStartTime,
		})
		_node.MondayStartTime = value
	}
	if value, ok := ecc.mutation.MondayEndTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: entcourse.FieldMondayEndTime,
		})
		_node.MondayEndTime = value
	}
	if value, ok := ecc.mutation.TuesdayStartTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: entcourse.FieldTuesdayStartTime,
		})
		_node.TuesdayStartTime = value
	}
	if value, ok := ecc.mutation.TuesdayEndTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: entcourse.FieldTuesdayEndTime,
		})
		_node.TuesdayEndTime = value
	}
	if value, ok := ecc.mutation.WednesdayStartTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: entcourse.FieldWednesdayStartTime,
		})
		_node.WednesdayStartTime = value
	}
	if value, ok := ecc.mutation.WednesdayEndTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: entcourse.FieldWednesdayEndTime,
		})
		_node.WednesdayEndTime = value
	}
	if value, ok := ecc.mutation.ThursdayStartTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: entcourse.FieldThursdayStartTime,
		})
		_node.ThursdayStartTime = value
	}
	if value, ok := ecc.mutation.ThursdayEndTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: entcourse.FieldThursdayEndTime,
		})
		_node.ThursdayEndTime = value
	}
	if value, ok := ecc.mutation.FridayStartTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: entcourse.FieldFridayStartTime,
		})
		_node.FridayStartTime = value
	}
	if value, ok := ecc.mutation.FridayEndTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: entcourse.FieldFridayEndTime,
		})
		_node.FridayEndTime = value
	}
	if value, ok := ecc.mutation.SaturdayStartTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: entcourse.FieldSaturdayStartTime,
		})
		_node.SaturdayStartTime = value
	}
	if value, ok := ecc.mutation.SaturdayEndTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: entcourse.FieldSaturdayEndTime,
		})
		_node.SaturdayEndTime = value
	}
	if value, ok := ecc.mutation.SundayStartTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: entcourse.FieldSundayStartTime,
		})
		_node.SundayStartTime = value
	}
	if value, ok := ecc.mutation.SundayEndTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: entcourse.FieldSundayEndTime,
		})
		_node.SundayEndTime = value
	}
	if nodes := ecc.mutation.TodoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entcourse.TodoTable,
			Columns: []string{entcourse.TodoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: enttodo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ecc.mutation.AttendanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entcourse.AttendanceTable,
			Columns: []string{entcourse.AttendanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entattendance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ecc.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entcourse.PostTable,
			Columns: []string{entcourse.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entpost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ecc.mutation.OwnedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   entcourse.OwnedByTable,
			Columns: entcourse.OwnedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ecc.mutation.JoinedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   entcourse.JoinedByTable,
			Columns: entcourse.JoinedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EntCourseCreateBulk is the builder for creating many EntCourse entities in bulk.
type EntCourseCreateBulk struct {
	config
	builders []*EntCourseCreate
}

// Save creates the EntCourse entities in the database.
func (eccb *EntCourseCreateBulk) Save(ctx context.Context) ([]*EntCourse, error) {
	specs := make([]*sqlgraph.CreateSpec, len(eccb.builders))
	nodes := make([]*EntCourse, len(eccb.builders))
	mutators := make([]Mutator, len(eccb.builders))
	for i := range eccb.builders {
		func(i int, root context.Context) {
			builder := eccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EntCourseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, eccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, eccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, eccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (eccb *EntCourseCreateBulk) SaveX(ctx context.Context) []*EntCourse {
	v, err := eccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eccb *EntCourseCreateBulk) Exec(ctx context.Context) error {
	_, err := eccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eccb *EntCourseCreateBulk) ExecX(ctx context.Context) {
	if err := eccb.Exec(ctx); err != nil {
		panic(err)
	}
}
