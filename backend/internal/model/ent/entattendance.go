// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/internal/model/ent/entattendance"
	"backend/internal/model/ent/entcourse"
	"backend/internal/model/ent/entuser"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// EntAttendance is the model entity for the EntAttendance schema.
type EntAttendance struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// Date holds the value of the "date" field.
	Date time.Time `json:"date,omitempty"`
	// StartTime holds the value of the "startTime" field.
	StartTime time.Time `json:"startTime,omitempty"`
	// EndTime holds the value of the "endTime" field.
	EndTime time.Time `json:"endTime,omitempty"`
	// Day holds the value of the "day" field.
	Day time.Time `json:"day,omitempty"`
	// Note holds the value of the "note" field.
	Note string `json:"note,omitempty"`
	// Hours holds the value of the "hours" field.
	Hours float64 `json:"hours,omitempty"`
	// CheckedByTutor holds the value of the "checkedByTutor" field.
	CheckedByTutor bool `json:"checkedByTutor,omitempty"`
	// CheckedByStudent holds the value of the "checkedByStudent" field.
	CheckedByStudent bool `json:"checkedByStudent,omitempty"`
	// CheckedByParent holds the value of the "checkedByParent" field.
	CheckedByParent bool `json:"checkedByParent,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EntAttendanceQuery when eager-loading is set.
	Edges                 EntAttendanceEdges `json:"edges"`
	ent_course_attendance *int
	ent_user_attendance   *int
}

// EntAttendanceEdges holds the relations/edges for other nodes in the graph.
type EntAttendanceEdges struct {
	// AttendanceFor holds the value of the attendanceFor edge.
	AttendanceFor *EntCourse `json:"attendanceFor,omitempty"`
	// OwnedBy holds the value of the ownedBy edge.
	OwnedBy *EntUser `json:"ownedBy,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AttendanceForOrErr returns the AttendanceFor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EntAttendanceEdges) AttendanceForOrErr() (*EntCourse, error) {
	if e.loadedTypes[0] {
		if e.AttendanceFor == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: entcourse.Label}
		}
		return e.AttendanceFor, nil
	}
	return nil, &NotLoadedError{edge: "attendanceFor"}
}

// OwnedByOrErr returns the OwnedBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EntAttendanceEdges) OwnedByOrErr() (*EntUser, error) {
	if e.loadedTypes[1] {
		if e.OwnedBy == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: entuser.Label}
		}
		return e.OwnedBy, nil
	}
	return nil, &NotLoadedError{edge: "ownedBy"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EntAttendance) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case entattendance.FieldCheckedByTutor, entattendance.FieldCheckedByStudent, entattendance.FieldCheckedByParent:
			values[i] = new(sql.NullBool)
		case entattendance.FieldHours:
			values[i] = new(sql.NullFloat64)
		case entattendance.FieldID:
			values[i] = new(sql.NullInt64)
		case entattendance.FieldNote:
			values[i] = new(sql.NullString)
		case entattendance.FieldCreatedAt, entattendance.FieldUpdatedAt, entattendance.FieldDate, entattendance.FieldStartTime, entattendance.FieldEndTime, entattendance.FieldDay:
			values[i] = new(sql.NullTime)
		case entattendance.ForeignKeys[0]: // ent_course_attendance
			values[i] = new(sql.NullInt64)
		case entattendance.ForeignKeys[1]: // ent_user_attendance
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type EntAttendance", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EntAttendance fields.
func (ea *EntAttendance) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case entattendance.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ea.ID = int(value.Int64)
		case entattendance.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				ea.CreatedAt = value.Time
			}
		case entattendance.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				ea.UpdatedAt = value.Time
			}
		case entattendance.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				ea.Date = value.Time
			}
		case entattendance.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field startTime", values[i])
			} else if value.Valid {
				ea.StartTime = value.Time
			}
		case entattendance.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field endTime", values[i])
			} else if value.Valid {
				ea.EndTime = value.Time
			}
		case entattendance.FieldDay:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field day", values[i])
			} else if value.Valid {
				ea.Day = value.Time
			}
		case entattendance.FieldNote:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field note", values[i])
			} else if value.Valid {
				ea.Note = value.String
			}
		case entattendance.FieldHours:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field hours", values[i])
			} else if value.Valid {
				ea.Hours = value.Float64
			}
		case entattendance.FieldCheckedByTutor:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field checkedByTutor", values[i])
			} else if value.Valid {
				ea.CheckedByTutor = value.Bool
			}
		case entattendance.FieldCheckedByStudent:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field checkedByStudent", values[i])
			} else if value.Valid {
				ea.CheckedByStudent = value.Bool
			}
		case entattendance.FieldCheckedByParent:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field checkedByParent", values[i])
			} else if value.Valid {
				ea.CheckedByParent = value.Bool
			}
		case entattendance.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field ent_course_attendance", value)
			} else if value.Valid {
				ea.ent_course_attendance = new(int)
				*ea.ent_course_attendance = int(value.Int64)
			}
		case entattendance.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field ent_user_attendance", value)
			} else if value.Valid {
				ea.ent_user_attendance = new(int)
				*ea.ent_user_attendance = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryAttendanceFor queries the "attendanceFor" edge of the EntAttendance entity.
func (ea *EntAttendance) QueryAttendanceFor() *EntCourseQuery {
	return (&EntAttendanceClient{config: ea.config}).QueryAttendanceFor(ea)
}

// QueryOwnedBy queries the "ownedBy" edge of the EntAttendance entity.
func (ea *EntAttendance) QueryOwnedBy() *EntUserQuery {
	return (&EntAttendanceClient{config: ea.config}).QueryOwnedBy(ea)
}

// Update returns a builder for updating this EntAttendance.
// Note that you need to call EntAttendance.Unwrap() before calling this method if this EntAttendance
// was returned from a transaction, and the transaction was committed or rolled back.
func (ea *EntAttendance) Update() *EntAttendanceUpdateOne {
	return (&EntAttendanceClient{config: ea.config}).UpdateOne(ea)
}

// Unwrap unwraps the EntAttendance entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ea *EntAttendance) Unwrap() *EntAttendance {
	_tx, ok := ea.config.driver.(*txDriver)
	if !ok {
		panic("ent: EntAttendance is not a transactional entity")
	}
	ea.config.driver = _tx.drv
	return ea
}

// String implements the fmt.Stringer.
func (ea *EntAttendance) String() string {
	var builder strings.Builder
	builder.WriteString("EntAttendance(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ea.ID))
	builder.WriteString("createdAt=")
	builder.WriteString(ea.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(ea.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(ea.Date.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("startTime=")
	builder.WriteString(ea.StartTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("endTime=")
	builder.WriteString(ea.EndTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("day=")
	builder.WriteString(ea.Day.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("note=")
	builder.WriteString(ea.Note)
	builder.WriteString(", ")
	builder.WriteString("hours=")
	builder.WriteString(fmt.Sprintf("%v", ea.Hours))
	builder.WriteString(", ")
	builder.WriteString("checkedByTutor=")
	builder.WriteString(fmt.Sprintf("%v", ea.CheckedByTutor))
	builder.WriteString(", ")
	builder.WriteString("checkedByStudent=")
	builder.WriteString(fmt.Sprintf("%v", ea.CheckedByStudent))
	builder.WriteString(", ")
	builder.WriteString("checkedByParent=")
	builder.WriteString(fmt.Sprintf("%v", ea.CheckedByParent))
	builder.WriteByte(')')
	return builder.String()
}

// EntAttendances is a parsable slice of EntAttendance.
type EntAttendances []*EntAttendance

func (ea EntAttendances) config(cfg config) {
	for _i := range ea {
		ea[_i].config = cfg
	}
}
