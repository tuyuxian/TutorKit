// Code generated by ent, DO NOT EDIT.

package entcourse

import (
	"backend/internal/model/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// CourseUrl applies equality check predicate on the "courseUrl" field. It's identical to CourseUrlEQ.
func CourseUrl(v string) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCourseUrl), v))
	})
}

// PaymentAmount applies equality check predicate on the "paymentAmount" field. It's identical to PaymentAmountEQ.
func PaymentAmount(v float64) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentAmount), v))
	})
}

// StartDate applies equality check predicate on the "startDate" field. It's identical to StartDateEQ.
func StartDate(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartDate), v))
	})
}

// EndDate applies equality check predicate on the "endDate" field. It's identical to EndDateEQ.
func EndDate(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndDate), v))
	})
}

// Monday applies equality check predicate on the "monday" field. It's identical to MondayEQ.
func Monday(v bool) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMonday), v))
	})
}

// Tuesday applies equality check predicate on the "tuesday" field. It's identical to TuesdayEQ.
func Tuesday(v bool) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTuesday), v))
	})
}

// Wednesday applies equality check predicate on the "wednesday" field. It's identical to WednesdayEQ.
func Wednesday(v bool) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWednesday), v))
	})
}

// Thursday applies equality check predicate on the "thursday" field. It's identical to ThursdayEQ.
func Thursday(v bool) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThursday), v))
	})
}

// Friday applies equality check predicate on the "friday" field. It's identical to FridayEQ.
func Friday(v bool) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFriday), v))
	})
}

// Saturday applies equality check predicate on the "saturday" field. It's identical to SaturdayEQ.
func Saturday(v bool) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSaturday), v))
	})
}

// Sunday applies equality check predicate on the "sunday" field. It's identical to SundayEQ.
func Sunday(v bool) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSunday), v))
	})
}

// MondayStartTime applies equality check predicate on the "mondayStartTime" field. It's identical to MondayStartTimeEQ.
func MondayStartTime(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMondayStartTime), v))
	})
}

// MondayEndTime applies equality check predicate on the "mondayEndTime" field. It's identical to MondayEndTimeEQ.
func MondayEndTime(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMondayEndTime), v))
	})
}

// TuesdayStartTime applies equality check predicate on the "tuesdayStartTime" field. It's identical to TuesdayStartTimeEQ.
func TuesdayStartTime(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTuesdayStartTime), v))
	})
}

// TuesdayEndTime applies equality check predicate on the "tuesdayEndTime" field. It's identical to TuesdayEndTimeEQ.
func TuesdayEndTime(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTuesdayEndTime), v))
	})
}

// WednesdayStartTime applies equality check predicate on the "wednesdayStartTime" field. It's identical to WednesdayStartTimeEQ.
func WednesdayStartTime(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWednesdayStartTime), v))
	})
}

// WednesdayEndTime applies equality check predicate on the "wednesdayEndTime" field. It's identical to WednesdayEndTimeEQ.
func WednesdayEndTime(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWednesdayEndTime), v))
	})
}

// ThursdayStartTime applies equality check predicate on the "thursdayStartTime" field. It's identical to ThursdayStartTimeEQ.
func ThursdayStartTime(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThursdayStartTime), v))
	})
}

// ThursdayEndTime applies equality check predicate on the "thursdayEndTime" field. It's identical to ThursdayEndTimeEQ.
func ThursdayEndTime(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThursdayEndTime), v))
	})
}

// FridayStartTime applies equality check predicate on the "fridayStartTime" field. It's identical to FridayStartTimeEQ.
func FridayStartTime(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFridayStartTime), v))
	})
}

// FridayEndTime applies equality check predicate on the "fridayEndTime" field. It's identical to FridayEndTimeEQ.
func FridayEndTime(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFridayEndTime), v))
	})
}

// SaturdayStartTime applies equality check predicate on the "saturdayStartTime" field. It's identical to SaturdayStartTimeEQ.
func SaturdayStartTime(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSaturdayStartTime), v))
	})
}

// SaturdayEndTime applies equality check predicate on the "saturdayEndTime" field. It's identical to SaturdayEndTimeEQ.
func SaturdayEndTime(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSaturdayEndTime), v))
	})
}

// SundayStartTime applies equality check predicate on the "sundayStartTime" field. It's identical to SundayStartTimeEQ.
func SundayStartTime(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSundayStartTime), v))
	})
}

// SundayEndTime applies equality check predicate on the "sundayEndTime" field. It's identical to SundayEndTimeEQ.
func SundayEndTime(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSundayEndTime), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.EntCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.EntCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.EntCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.EntCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.EntCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.EntCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// CourseUrlEQ applies the EQ predicate on the "courseUrl" field.
func CourseUrlEQ(v string) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCourseUrl), v))
	})
}

// CourseUrlNEQ applies the NEQ predicate on the "courseUrl" field.
func CourseUrlNEQ(v string) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCourseUrl), v))
	})
}

// CourseUrlIn applies the In predicate on the "courseUrl" field.
func CourseUrlIn(vs ...string) predicate.EntCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCourseUrl), v...))
	})
}

// CourseUrlNotIn applies the NotIn predicate on the "courseUrl" field.
func CourseUrlNotIn(vs ...string) predicate.EntCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCourseUrl), v...))
	})
}

// CourseUrlGT applies the GT predicate on the "courseUrl" field.
func CourseUrlGT(v string) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCourseUrl), v))
	})
}

// CourseUrlGTE applies the GTE predicate on the "courseUrl" field.
func CourseUrlGTE(v string) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCourseUrl), v))
	})
}

// CourseUrlLT applies the LT predicate on the "courseUrl" field.
func CourseUrlLT(v string) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCourseUrl), v))
	})
}

// CourseUrlLTE applies the LTE predicate on the "courseUrl" field.
func CourseUrlLTE(v string) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCourseUrl), v))
	})
}

// CourseUrlContains applies the Contains predicate on the "courseUrl" field.
func CourseUrlContains(v string) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCourseUrl), v))
	})
}

// CourseUrlHasPrefix applies the HasPrefix predicate on the "courseUrl" field.
func CourseUrlHasPrefix(v string) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCourseUrl), v))
	})
}

// CourseUrlHasSuffix applies the HasSuffix predicate on the "courseUrl" field.
func CourseUrlHasSuffix(v string) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCourseUrl), v))
	})
}

// CourseUrlEqualFold applies the EqualFold predicate on the "courseUrl" field.
func CourseUrlEqualFold(v string) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCourseUrl), v))
	})
}

// CourseUrlContainsFold applies the ContainsFold predicate on the "courseUrl" field.
func CourseUrlContainsFold(v string) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCourseUrl), v))
	})
}

// PaymentMethodEQ applies the EQ predicate on the "paymentMethod" field.
func PaymentMethodEQ(v PaymentMethod) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentMethod), v))
	})
}

// PaymentMethodNEQ applies the NEQ predicate on the "paymentMethod" field.
func PaymentMethodNEQ(v PaymentMethod) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPaymentMethod), v))
	})
}

// PaymentMethodIn applies the In predicate on the "paymentMethod" field.
func PaymentMethodIn(vs ...PaymentMethod) predicate.EntCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPaymentMethod), v...))
	})
}

// PaymentMethodNotIn applies the NotIn predicate on the "paymentMethod" field.
func PaymentMethodNotIn(vs ...PaymentMethod) predicate.EntCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPaymentMethod), v...))
	})
}

// PaymentAmountEQ applies the EQ predicate on the "paymentAmount" field.
func PaymentAmountEQ(v float64) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentAmount), v))
	})
}

// PaymentAmountNEQ applies the NEQ predicate on the "paymentAmount" field.
func PaymentAmountNEQ(v float64) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPaymentAmount), v))
	})
}

// PaymentAmountIn applies the In predicate on the "paymentAmount" field.
func PaymentAmountIn(vs ...float64) predicate.EntCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPaymentAmount), v...))
	})
}

// PaymentAmountNotIn applies the NotIn predicate on the "paymentAmount" field.
func PaymentAmountNotIn(vs ...float64) predicate.EntCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPaymentAmount), v...))
	})
}

// PaymentAmountGT applies the GT predicate on the "paymentAmount" field.
func PaymentAmountGT(v float64) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPaymentAmount), v))
	})
}

// PaymentAmountGTE applies the GTE predicate on the "paymentAmount" field.
func PaymentAmountGTE(v float64) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPaymentAmount), v))
	})
}

// PaymentAmountLT applies the LT predicate on the "paymentAmount" field.
func PaymentAmountLT(v float64) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPaymentAmount), v))
	})
}

// PaymentAmountLTE applies the LTE predicate on the "paymentAmount" field.
func PaymentAmountLTE(v float64) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPaymentAmount), v))
	})
}

// PaymentAmountIsNil applies the IsNil predicate on the "paymentAmount" field.
func PaymentAmountIsNil() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPaymentAmount)))
	})
}

// PaymentAmountNotNil applies the NotNil predicate on the "paymentAmount" field.
func PaymentAmountNotNil() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPaymentAmount)))
	})
}

// StartDateEQ applies the EQ predicate on the "startDate" field.
func StartDateEQ(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartDate), v))
	})
}

// StartDateNEQ applies the NEQ predicate on the "startDate" field.
func StartDateNEQ(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStartDate), v))
	})
}

// StartDateIn applies the In predicate on the "startDate" field.
func StartDateIn(vs ...time.Time) predicate.EntCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStartDate), v...))
	})
}

// StartDateNotIn applies the NotIn predicate on the "startDate" field.
func StartDateNotIn(vs ...time.Time) predicate.EntCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStartDate), v...))
	})
}

// StartDateGT applies the GT predicate on the "startDate" field.
func StartDateGT(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStartDate), v))
	})
}

// StartDateGTE applies the GTE predicate on the "startDate" field.
func StartDateGTE(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStartDate), v))
	})
}

// StartDateLT applies the LT predicate on the "startDate" field.
func StartDateLT(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStartDate), v))
	})
}

// StartDateLTE applies the LTE predicate on the "startDate" field.
func StartDateLTE(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStartDate), v))
	})
}

// EndDateEQ applies the EQ predicate on the "endDate" field.
func EndDateEQ(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndDate), v))
	})
}

// EndDateNEQ applies the NEQ predicate on the "endDate" field.
func EndDateNEQ(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEndDate), v))
	})
}

// EndDateIn applies the In predicate on the "endDate" field.
func EndDateIn(vs ...time.Time) predicate.EntCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEndDate), v...))
	})
}

// EndDateNotIn applies the NotIn predicate on the "endDate" field.
func EndDateNotIn(vs ...time.Time) predicate.EntCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEndDate), v...))
	})
}

// EndDateGT applies the GT predicate on the "endDate" field.
func EndDateGT(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEndDate), v))
	})
}

// EndDateGTE applies the GTE predicate on the "endDate" field.
func EndDateGTE(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEndDate), v))
	})
}

// EndDateLT applies the LT predicate on the "endDate" field.
func EndDateLT(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEndDate), v))
	})
}

// EndDateLTE applies the LTE predicate on the "endDate" field.
func EndDateLTE(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEndDate), v))
	})
}

// MondayEQ applies the EQ predicate on the "monday" field.
func MondayEQ(v bool) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMonday), v))
	})
}

// MondayNEQ applies the NEQ predicate on the "monday" field.
func MondayNEQ(v bool) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMonday), v))
	})
}

// TuesdayEQ applies the EQ predicate on the "tuesday" field.
func TuesdayEQ(v bool) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTuesday), v))
	})
}

// TuesdayNEQ applies the NEQ predicate on the "tuesday" field.
func TuesdayNEQ(v bool) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTuesday), v))
	})
}

// WednesdayEQ applies the EQ predicate on the "wednesday" field.
func WednesdayEQ(v bool) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWednesday), v))
	})
}

// WednesdayNEQ applies the NEQ predicate on the "wednesday" field.
func WednesdayNEQ(v bool) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWednesday), v))
	})
}

// ThursdayEQ applies the EQ predicate on the "thursday" field.
func ThursdayEQ(v bool) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThursday), v))
	})
}

// ThursdayNEQ applies the NEQ predicate on the "thursday" field.
func ThursdayNEQ(v bool) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldThursday), v))
	})
}

// FridayEQ applies the EQ predicate on the "friday" field.
func FridayEQ(v bool) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFriday), v))
	})
}

// FridayNEQ applies the NEQ predicate on the "friday" field.
func FridayNEQ(v bool) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFriday), v))
	})
}

// SaturdayEQ applies the EQ predicate on the "saturday" field.
func SaturdayEQ(v bool) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSaturday), v))
	})
}

// SaturdayNEQ applies the NEQ predicate on the "saturday" field.
func SaturdayNEQ(v bool) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSaturday), v))
	})
}

// SundayEQ applies the EQ predicate on the "sunday" field.
func SundayEQ(v bool) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSunday), v))
	})
}

// SundayNEQ applies the NEQ predicate on the "sunday" field.
func SundayNEQ(v bool) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSunday), v))
	})
}

// MondayStartTimeEQ applies the EQ predicate on the "mondayStartTime" field.
func MondayStartTimeEQ(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMondayStartTime), v))
	})
}

// MondayStartTimeNEQ applies the NEQ predicate on the "mondayStartTime" field.
func MondayStartTimeNEQ(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMondayStartTime), v))
	})
}

// MondayStartTimeIn applies the In predicate on the "mondayStartTime" field.
func MondayStartTimeIn(vs ...time.Time) predicate.EntCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMondayStartTime), v...))
	})
}

// MondayStartTimeNotIn applies the NotIn predicate on the "mondayStartTime" field.
func MondayStartTimeNotIn(vs ...time.Time) predicate.EntCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMondayStartTime), v...))
	})
}

// MondayStartTimeGT applies the GT predicate on the "mondayStartTime" field.
func MondayStartTimeGT(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMondayStartTime), v))
	})
}

// MondayStartTimeGTE applies the GTE predicate on the "mondayStartTime" field.
func MondayStartTimeGTE(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMondayStartTime), v))
	})
}

// MondayStartTimeLT applies the LT predicate on the "mondayStartTime" field.
func MondayStartTimeLT(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMondayStartTime), v))
	})
}

// MondayStartTimeLTE applies the LTE predicate on the "mondayStartTime" field.
func MondayStartTimeLTE(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMondayStartTime), v))
	})
}

// MondayStartTimeIsNil applies the IsNil predicate on the "mondayStartTime" field.
func MondayStartTimeIsNil() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMondayStartTime)))
	})
}

// MondayStartTimeNotNil applies the NotNil predicate on the "mondayStartTime" field.
func MondayStartTimeNotNil() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMondayStartTime)))
	})
}

// MondayEndTimeEQ applies the EQ predicate on the "mondayEndTime" field.
func MondayEndTimeEQ(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMondayEndTime), v))
	})
}

// MondayEndTimeNEQ applies the NEQ predicate on the "mondayEndTime" field.
func MondayEndTimeNEQ(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMondayEndTime), v))
	})
}

// MondayEndTimeIn applies the In predicate on the "mondayEndTime" field.
func MondayEndTimeIn(vs ...time.Time) predicate.EntCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMondayEndTime), v...))
	})
}

// MondayEndTimeNotIn applies the NotIn predicate on the "mondayEndTime" field.
func MondayEndTimeNotIn(vs ...time.Time) predicate.EntCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMondayEndTime), v...))
	})
}

// MondayEndTimeGT applies the GT predicate on the "mondayEndTime" field.
func MondayEndTimeGT(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMondayEndTime), v))
	})
}

// MondayEndTimeGTE applies the GTE predicate on the "mondayEndTime" field.
func MondayEndTimeGTE(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMondayEndTime), v))
	})
}

// MondayEndTimeLT applies the LT predicate on the "mondayEndTime" field.
func MondayEndTimeLT(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMondayEndTime), v))
	})
}

// MondayEndTimeLTE applies the LTE predicate on the "mondayEndTime" field.
func MondayEndTimeLTE(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMondayEndTime), v))
	})
}

// MondayEndTimeIsNil applies the IsNil predicate on the "mondayEndTime" field.
func MondayEndTimeIsNil() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMondayEndTime)))
	})
}

// MondayEndTimeNotNil applies the NotNil predicate on the "mondayEndTime" field.
func MondayEndTimeNotNil() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMondayEndTime)))
	})
}

// TuesdayStartTimeEQ applies the EQ predicate on the "tuesdayStartTime" field.
func TuesdayStartTimeEQ(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTuesdayStartTime), v))
	})
}

// TuesdayStartTimeNEQ applies the NEQ predicate on the "tuesdayStartTime" field.
func TuesdayStartTimeNEQ(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTuesdayStartTime), v))
	})
}

// TuesdayStartTimeIn applies the In predicate on the "tuesdayStartTime" field.
func TuesdayStartTimeIn(vs ...time.Time) predicate.EntCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTuesdayStartTime), v...))
	})
}

// TuesdayStartTimeNotIn applies the NotIn predicate on the "tuesdayStartTime" field.
func TuesdayStartTimeNotIn(vs ...time.Time) predicate.EntCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTuesdayStartTime), v...))
	})
}

// TuesdayStartTimeGT applies the GT predicate on the "tuesdayStartTime" field.
func TuesdayStartTimeGT(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTuesdayStartTime), v))
	})
}

// TuesdayStartTimeGTE applies the GTE predicate on the "tuesdayStartTime" field.
func TuesdayStartTimeGTE(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTuesdayStartTime), v))
	})
}

// TuesdayStartTimeLT applies the LT predicate on the "tuesdayStartTime" field.
func TuesdayStartTimeLT(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTuesdayStartTime), v))
	})
}

// TuesdayStartTimeLTE applies the LTE predicate on the "tuesdayStartTime" field.
func TuesdayStartTimeLTE(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTuesdayStartTime), v))
	})
}

// TuesdayStartTimeIsNil applies the IsNil predicate on the "tuesdayStartTime" field.
func TuesdayStartTimeIsNil() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTuesdayStartTime)))
	})
}

// TuesdayStartTimeNotNil applies the NotNil predicate on the "tuesdayStartTime" field.
func TuesdayStartTimeNotNil() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTuesdayStartTime)))
	})
}

// TuesdayEndTimeEQ applies the EQ predicate on the "tuesdayEndTime" field.
func TuesdayEndTimeEQ(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTuesdayEndTime), v))
	})
}

// TuesdayEndTimeNEQ applies the NEQ predicate on the "tuesdayEndTime" field.
func TuesdayEndTimeNEQ(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTuesdayEndTime), v))
	})
}

// TuesdayEndTimeIn applies the In predicate on the "tuesdayEndTime" field.
func TuesdayEndTimeIn(vs ...time.Time) predicate.EntCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTuesdayEndTime), v...))
	})
}

// TuesdayEndTimeNotIn applies the NotIn predicate on the "tuesdayEndTime" field.
func TuesdayEndTimeNotIn(vs ...time.Time) predicate.EntCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTuesdayEndTime), v...))
	})
}

// TuesdayEndTimeGT applies the GT predicate on the "tuesdayEndTime" field.
func TuesdayEndTimeGT(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTuesdayEndTime), v))
	})
}

// TuesdayEndTimeGTE applies the GTE predicate on the "tuesdayEndTime" field.
func TuesdayEndTimeGTE(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTuesdayEndTime), v))
	})
}

// TuesdayEndTimeLT applies the LT predicate on the "tuesdayEndTime" field.
func TuesdayEndTimeLT(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTuesdayEndTime), v))
	})
}

// TuesdayEndTimeLTE applies the LTE predicate on the "tuesdayEndTime" field.
func TuesdayEndTimeLTE(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTuesdayEndTime), v))
	})
}

// TuesdayEndTimeIsNil applies the IsNil predicate on the "tuesdayEndTime" field.
func TuesdayEndTimeIsNil() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTuesdayEndTime)))
	})
}

// TuesdayEndTimeNotNil applies the NotNil predicate on the "tuesdayEndTime" field.
func TuesdayEndTimeNotNil() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTuesdayEndTime)))
	})
}

// WednesdayStartTimeEQ applies the EQ predicate on the "wednesdayStartTime" field.
func WednesdayStartTimeEQ(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWednesdayStartTime), v))
	})
}

// WednesdayStartTimeNEQ applies the NEQ predicate on the "wednesdayStartTime" field.
func WednesdayStartTimeNEQ(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWednesdayStartTime), v))
	})
}

// WednesdayStartTimeIn applies the In predicate on the "wednesdayStartTime" field.
func WednesdayStartTimeIn(vs ...time.Time) predicate.EntCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldWednesdayStartTime), v...))
	})
}

// WednesdayStartTimeNotIn applies the NotIn predicate on the "wednesdayStartTime" field.
func WednesdayStartTimeNotIn(vs ...time.Time) predicate.EntCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldWednesdayStartTime), v...))
	})
}

// WednesdayStartTimeGT applies the GT predicate on the "wednesdayStartTime" field.
func WednesdayStartTimeGT(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWednesdayStartTime), v))
	})
}

// WednesdayStartTimeGTE applies the GTE predicate on the "wednesdayStartTime" field.
func WednesdayStartTimeGTE(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWednesdayStartTime), v))
	})
}

// WednesdayStartTimeLT applies the LT predicate on the "wednesdayStartTime" field.
func WednesdayStartTimeLT(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWednesdayStartTime), v))
	})
}

// WednesdayStartTimeLTE applies the LTE predicate on the "wednesdayStartTime" field.
func WednesdayStartTimeLTE(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWednesdayStartTime), v))
	})
}

// WednesdayStartTimeIsNil applies the IsNil predicate on the "wednesdayStartTime" field.
func WednesdayStartTimeIsNil() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldWednesdayStartTime)))
	})
}

// WednesdayStartTimeNotNil applies the NotNil predicate on the "wednesdayStartTime" field.
func WednesdayStartTimeNotNil() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldWednesdayStartTime)))
	})
}

// WednesdayEndTimeEQ applies the EQ predicate on the "wednesdayEndTime" field.
func WednesdayEndTimeEQ(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWednesdayEndTime), v))
	})
}

// WednesdayEndTimeNEQ applies the NEQ predicate on the "wednesdayEndTime" field.
func WednesdayEndTimeNEQ(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWednesdayEndTime), v))
	})
}

// WednesdayEndTimeIn applies the In predicate on the "wednesdayEndTime" field.
func WednesdayEndTimeIn(vs ...time.Time) predicate.EntCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldWednesdayEndTime), v...))
	})
}

// WednesdayEndTimeNotIn applies the NotIn predicate on the "wednesdayEndTime" field.
func WednesdayEndTimeNotIn(vs ...time.Time) predicate.EntCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldWednesdayEndTime), v...))
	})
}

// WednesdayEndTimeGT applies the GT predicate on the "wednesdayEndTime" field.
func WednesdayEndTimeGT(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWednesdayEndTime), v))
	})
}

// WednesdayEndTimeGTE applies the GTE predicate on the "wednesdayEndTime" field.
func WednesdayEndTimeGTE(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWednesdayEndTime), v))
	})
}

// WednesdayEndTimeLT applies the LT predicate on the "wednesdayEndTime" field.
func WednesdayEndTimeLT(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWednesdayEndTime), v))
	})
}

// WednesdayEndTimeLTE applies the LTE predicate on the "wednesdayEndTime" field.
func WednesdayEndTimeLTE(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWednesdayEndTime), v))
	})
}

// WednesdayEndTimeIsNil applies the IsNil predicate on the "wednesdayEndTime" field.
func WednesdayEndTimeIsNil() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldWednesdayEndTime)))
	})
}

// WednesdayEndTimeNotNil applies the NotNil predicate on the "wednesdayEndTime" field.
func WednesdayEndTimeNotNil() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldWednesdayEndTime)))
	})
}

// ThursdayStartTimeEQ applies the EQ predicate on the "thursdayStartTime" field.
func ThursdayStartTimeEQ(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThursdayStartTime), v))
	})
}

// ThursdayStartTimeNEQ applies the NEQ predicate on the "thursdayStartTime" field.
func ThursdayStartTimeNEQ(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldThursdayStartTime), v))
	})
}

// ThursdayStartTimeIn applies the In predicate on the "thursdayStartTime" field.
func ThursdayStartTimeIn(vs ...time.Time) predicate.EntCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldThursdayStartTime), v...))
	})
}

// ThursdayStartTimeNotIn applies the NotIn predicate on the "thursdayStartTime" field.
func ThursdayStartTimeNotIn(vs ...time.Time) predicate.EntCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldThursdayStartTime), v...))
	})
}

// ThursdayStartTimeGT applies the GT predicate on the "thursdayStartTime" field.
func ThursdayStartTimeGT(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldThursdayStartTime), v))
	})
}

// ThursdayStartTimeGTE applies the GTE predicate on the "thursdayStartTime" field.
func ThursdayStartTimeGTE(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldThursdayStartTime), v))
	})
}

// ThursdayStartTimeLT applies the LT predicate on the "thursdayStartTime" field.
func ThursdayStartTimeLT(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldThursdayStartTime), v))
	})
}

// ThursdayStartTimeLTE applies the LTE predicate on the "thursdayStartTime" field.
func ThursdayStartTimeLTE(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldThursdayStartTime), v))
	})
}

// ThursdayStartTimeIsNil applies the IsNil predicate on the "thursdayStartTime" field.
func ThursdayStartTimeIsNil() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldThursdayStartTime)))
	})
}

// ThursdayStartTimeNotNil applies the NotNil predicate on the "thursdayStartTime" field.
func ThursdayStartTimeNotNil() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldThursdayStartTime)))
	})
}

// ThursdayEndTimeEQ applies the EQ predicate on the "thursdayEndTime" field.
func ThursdayEndTimeEQ(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThursdayEndTime), v))
	})
}

// ThursdayEndTimeNEQ applies the NEQ predicate on the "thursdayEndTime" field.
func ThursdayEndTimeNEQ(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldThursdayEndTime), v))
	})
}

// ThursdayEndTimeIn applies the In predicate on the "thursdayEndTime" field.
func ThursdayEndTimeIn(vs ...time.Time) predicate.EntCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldThursdayEndTime), v...))
	})
}

// ThursdayEndTimeNotIn applies the NotIn predicate on the "thursdayEndTime" field.
func ThursdayEndTimeNotIn(vs ...time.Time) predicate.EntCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldThursdayEndTime), v...))
	})
}

// ThursdayEndTimeGT applies the GT predicate on the "thursdayEndTime" field.
func ThursdayEndTimeGT(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldThursdayEndTime), v))
	})
}

// ThursdayEndTimeGTE applies the GTE predicate on the "thursdayEndTime" field.
func ThursdayEndTimeGTE(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldThursdayEndTime), v))
	})
}

// ThursdayEndTimeLT applies the LT predicate on the "thursdayEndTime" field.
func ThursdayEndTimeLT(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldThursdayEndTime), v))
	})
}

// ThursdayEndTimeLTE applies the LTE predicate on the "thursdayEndTime" field.
func ThursdayEndTimeLTE(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldThursdayEndTime), v))
	})
}

// ThursdayEndTimeIsNil applies the IsNil predicate on the "thursdayEndTime" field.
func ThursdayEndTimeIsNil() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldThursdayEndTime)))
	})
}

// ThursdayEndTimeNotNil applies the NotNil predicate on the "thursdayEndTime" field.
func ThursdayEndTimeNotNil() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldThursdayEndTime)))
	})
}

// FridayStartTimeEQ applies the EQ predicate on the "fridayStartTime" field.
func FridayStartTimeEQ(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFridayStartTime), v))
	})
}

// FridayStartTimeNEQ applies the NEQ predicate on the "fridayStartTime" field.
func FridayStartTimeNEQ(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFridayStartTime), v))
	})
}

// FridayStartTimeIn applies the In predicate on the "fridayStartTime" field.
func FridayStartTimeIn(vs ...time.Time) predicate.EntCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFridayStartTime), v...))
	})
}

// FridayStartTimeNotIn applies the NotIn predicate on the "fridayStartTime" field.
func FridayStartTimeNotIn(vs ...time.Time) predicate.EntCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFridayStartTime), v...))
	})
}

// FridayStartTimeGT applies the GT predicate on the "fridayStartTime" field.
func FridayStartTimeGT(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFridayStartTime), v))
	})
}

// FridayStartTimeGTE applies the GTE predicate on the "fridayStartTime" field.
func FridayStartTimeGTE(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFridayStartTime), v))
	})
}

// FridayStartTimeLT applies the LT predicate on the "fridayStartTime" field.
func FridayStartTimeLT(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFridayStartTime), v))
	})
}

// FridayStartTimeLTE applies the LTE predicate on the "fridayStartTime" field.
func FridayStartTimeLTE(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFridayStartTime), v))
	})
}

// FridayStartTimeIsNil applies the IsNil predicate on the "fridayStartTime" field.
func FridayStartTimeIsNil() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFridayStartTime)))
	})
}

// FridayStartTimeNotNil applies the NotNil predicate on the "fridayStartTime" field.
func FridayStartTimeNotNil() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFridayStartTime)))
	})
}

// FridayEndTimeEQ applies the EQ predicate on the "fridayEndTime" field.
func FridayEndTimeEQ(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFridayEndTime), v))
	})
}

// FridayEndTimeNEQ applies the NEQ predicate on the "fridayEndTime" field.
func FridayEndTimeNEQ(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFridayEndTime), v))
	})
}

// FridayEndTimeIn applies the In predicate on the "fridayEndTime" field.
func FridayEndTimeIn(vs ...time.Time) predicate.EntCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFridayEndTime), v...))
	})
}

// FridayEndTimeNotIn applies the NotIn predicate on the "fridayEndTime" field.
func FridayEndTimeNotIn(vs ...time.Time) predicate.EntCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFridayEndTime), v...))
	})
}

// FridayEndTimeGT applies the GT predicate on the "fridayEndTime" field.
func FridayEndTimeGT(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFridayEndTime), v))
	})
}

// FridayEndTimeGTE applies the GTE predicate on the "fridayEndTime" field.
func FridayEndTimeGTE(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFridayEndTime), v))
	})
}

// FridayEndTimeLT applies the LT predicate on the "fridayEndTime" field.
func FridayEndTimeLT(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFridayEndTime), v))
	})
}

// FridayEndTimeLTE applies the LTE predicate on the "fridayEndTime" field.
func FridayEndTimeLTE(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFridayEndTime), v))
	})
}

// FridayEndTimeIsNil applies the IsNil predicate on the "fridayEndTime" field.
func FridayEndTimeIsNil() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFridayEndTime)))
	})
}

// FridayEndTimeNotNil applies the NotNil predicate on the "fridayEndTime" field.
func FridayEndTimeNotNil() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFridayEndTime)))
	})
}

// SaturdayStartTimeEQ applies the EQ predicate on the "saturdayStartTime" field.
func SaturdayStartTimeEQ(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSaturdayStartTime), v))
	})
}

// SaturdayStartTimeNEQ applies the NEQ predicate on the "saturdayStartTime" field.
func SaturdayStartTimeNEQ(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSaturdayStartTime), v))
	})
}

// SaturdayStartTimeIn applies the In predicate on the "saturdayStartTime" field.
func SaturdayStartTimeIn(vs ...time.Time) predicate.EntCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSaturdayStartTime), v...))
	})
}

// SaturdayStartTimeNotIn applies the NotIn predicate on the "saturdayStartTime" field.
func SaturdayStartTimeNotIn(vs ...time.Time) predicate.EntCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSaturdayStartTime), v...))
	})
}

// SaturdayStartTimeGT applies the GT predicate on the "saturdayStartTime" field.
func SaturdayStartTimeGT(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSaturdayStartTime), v))
	})
}

// SaturdayStartTimeGTE applies the GTE predicate on the "saturdayStartTime" field.
func SaturdayStartTimeGTE(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSaturdayStartTime), v))
	})
}

// SaturdayStartTimeLT applies the LT predicate on the "saturdayStartTime" field.
func SaturdayStartTimeLT(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSaturdayStartTime), v))
	})
}

// SaturdayStartTimeLTE applies the LTE predicate on the "saturdayStartTime" field.
func SaturdayStartTimeLTE(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSaturdayStartTime), v))
	})
}

// SaturdayStartTimeIsNil applies the IsNil predicate on the "saturdayStartTime" field.
func SaturdayStartTimeIsNil() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSaturdayStartTime)))
	})
}

// SaturdayStartTimeNotNil applies the NotNil predicate on the "saturdayStartTime" field.
func SaturdayStartTimeNotNil() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSaturdayStartTime)))
	})
}

// SaturdayEndTimeEQ applies the EQ predicate on the "saturdayEndTime" field.
func SaturdayEndTimeEQ(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSaturdayEndTime), v))
	})
}

// SaturdayEndTimeNEQ applies the NEQ predicate on the "saturdayEndTime" field.
func SaturdayEndTimeNEQ(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSaturdayEndTime), v))
	})
}

// SaturdayEndTimeIn applies the In predicate on the "saturdayEndTime" field.
func SaturdayEndTimeIn(vs ...time.Time) predicate.EntCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSaturdayEndTime), v...))
	})
}

// SaturdayEndTimeNotIn applies the NotIn predicate on the "saturdayEndTime" field.
func SaturdayEndTimeNotIn(vs ...time.Time) predicate.EntCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSaturdayEndTime), v...))
	})
}

// SaturdayEndTimeGT applies the GT predicate on the "saturdayEndTime" field.
func SaturdayEndTimeGT(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSaturdayEndTime), v))
	})
}

// SaturdayEndTimeGTE applies the GTE predicate on the "saturdayEndTime" field.
func SaturdayEndTimeGTE(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSaturdayEndTime), v))
	})
}

// SaturdayEndTimeLT applies the LT predicate on the "saturdayEndTime" field.
func SaturdayEndTimeLT(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSaturdayEndTime), v))
	})
}

// SaturdayEndTimeLTE applies the LTE predicate on the "saturdayEndTime" field.
func SaturdayEndTimeLTE(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSaturdayEndTime), v))
	})
}

// SaturdayEndTimeIsNil applies the IsNil predicate on the "saturdayEndTime" field.
func SaturdayEndTimeIsNil() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSaturdayEndTime)))
	})
}

// SaturdayEndTimeNotNil applies the NotNil predicate on the "saturdayEndTime" field.
func SaturdayEndTimeNotNil() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSaturdayEndTime)))
	})
}

// SundayStartTimeEQ applies the EQ predicate on the "sundayStartTime" field.
func SundayStartTimeEQ(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSundayStartTime), v))
	})
}

// SundayStartTimeNEQ applies the NEQ predicate on the "sundayStartTime" field.
func SundayStartTimeNEQ(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSundayStartTime), v))
	})
}

// SundayStartTimeIn applies the In predicate on the "sundayStartTime" field.
func SundayStartTimeIn(vs ...time.Time) predicate.EntCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSundayStartTime), v...))
	})
}

// SundayStartTimeNotIn applies the NotIn predicate on the "sundayStartTime" field.
func SundayStartTimeNotIn(vs ...time.Time) predicate.EntCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSundayStartTime), v...))
	})
}

// SundayStartTimeGT applies the GT predicate on the "sundayStartTime" field.
func SundayStartTimeGT(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSundayStartTime), v))
	})
}

// SundayStartTimeGTE applies the GTE predicate on the "sundayStartTime" field.
func SundayStartTimeGTE(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSundayStartTime), v))
	})
}

// SundayStartTimeLT applies the LT predicate on the "sundayStartTime" field.
func SundayStartTimeLT(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSundayStartTime), v))
	})
}

// SundayStartTimeLTE applies the LTE predicate on the "sundayStartTime" field.
func SundayStartTimeLTE(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSundayStartTime), v))
	})
}

// SundayStartTimeIsNil applies the IsNil predicate on the "sundayStartTime" field.
func SundayStartTimeIsNil() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSundayStartTime)))
	})
}

// SundayStartTimeNotNil applies the NotNil predicate on the "sundayStartTime" field.
func SundayStartTimeNotNil() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSundayStartTime)))
	})
}

// SundayEndTimeEQ applies the EQ predicate on the "sundayEndTime" field.
func SundayEndTimeEQ(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSundayEndTime), v))
	})
}

// SundayEndTimeNEQ applies the NEQ predicate on the "sundayEndTime" field.
func SundayEndTimeNEQ(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSundayEndTime), v))
	})
}

// SundayEndTimeIn applies the In predicate on the "sundayEndTime" field.
func SundayEndTimeIn(vs ...time.Time) predicate.EntCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSundayEndTime), v...))
	})
}

// SundayEndTimeNotIn applies the NotIn predicate on the "sundayEndTime" field.
func SundayEndTimeNotIn(vs ...time.Time) predicate.EntCourse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSundayEndTime), v...))
	})
}

// SundayEndTimeGT applies the GT predicate on the "sundayEndTime" field.
func SundayEndTimeGT(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSundayEndTime), v))
	})
}

// SundayEndTimeGTE applies the GTE predicate on the "sundayEndTime" field.
func SundayEndTimeGTE(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSundayEndTime), v))
	})
}

// SundayEndTimeLT applies the LT predicate on the "sundayEndTime" field.
func SundayEndTimeLT(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSundayEndTime), v))
	})
}

// SundayEndTimeLTE applies the LTE predicate on the "sundayEndTime" field.
func SundayEndTimeLTE(v time.Time) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSundayEndTime), v))
	})
}

// SundayEndTimeIsNil applies the IsNil predicate on the "sundayEndTime" field.
func SundayEndTimeIsNil() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSundayEndTime)))
	})
}

// SundayEndTimeNotNil applies the NotNil predicate on the "sundayEndTime" field.
func SundayEndTimeNotNil() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSundayEndTime)))
	})
}

// HasTodo applies the HasEdge predicate on the "todo" edge.
func HasTodo() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TodoTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TodoTable, TodoColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTodoWith applies the HasEdge predicate on the "todo" edge with a given conditions (other predicates).
func HasTodoWith(preds ...predicate.EntTodo) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TodoInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TodoTable, TodoColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAttendance applies the HasEdge predicate on the "attendance" edge.
func HasAttendance() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AttendanceTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AttendanceTable, AttendanceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAttendanceWith applies the HasEdge predicate on the "attendance" edge with a given conditions (other predicates).
func HasAttendanceWith(preds ...predicate.EntAttendance) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AttendanceInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AttendanceTable, AttendanceColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPost applies the HasEdge predicate on the "post" edge.
func HasPost() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PostTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PostTable, PostColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPostWith applies the HasEdge predicate on the "post" edge with a given conditions (other predicates).
func HasPostWith(preds ...predicate.EntPost) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PostInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PostTable, PostColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOwnedBy applies the HasEdge predicate on the "ownedBy" edge.
func HasOwnedBy() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnedByTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, OwnedByTable, OwnedByPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnedByWith applies the HasEdge predicate on the "ownedBy" edge with a given conditions (other predicates).
func HasOwnedByWith(preds ...predicate.EntUser) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnedByInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, OwnedByTable, OwnedByPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasJoinedBy applies the HasEdge predicate on the "joinedBy" edge.
func HasJoinedBy() predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(JoinedByTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, JoinedByTable, JoinedByPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasJoinedByWith applies the HasEdge predicate on the "joinedBy" edge with a given conditions (other predicates).
func HasJoinedByWith(preds ...predicate.EntUser) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(JoinedByInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, JoinedByTable, JoinedByPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EntCourse) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EntCourse) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EntCourse) predicate.EntCourse {
	return predicate.EntCourse(func(s *sql.Selector) {
		p(s.Not())
	})
}
