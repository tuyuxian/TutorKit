// Code generated by ent, DO NOT EDIT.

package entcourse

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the entcourse type in the database.
	Label = "ent_course"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCourseUrl holds the string denoting the courseurl field in the database.
	FieldCourseUrl = "course_url"
	// FieldPaymentMethod holds the string denoting the paymentmethod field in the database.
	FieldPaymentMethod = "payment_method"
	// FieldPaymentAmount holds the string denoting the paymentamount field in the database.
	FieldPaymentAmount = "payment_amount"
	// FieldStartDate holds the string denoting the startdate field in the database.
	FieldStartDate = "start_date"
	// FieldEndDate holds the string denoting the enddate field in the database.
	FieldEndDate = "end_date"
	// FieldMonday holds the string denoting the monday field in the database.
	FieldMonday = "monday"
	// FieldTuesday holds the string denoting the tuesday field in the database.
	FieldTuesday = "tuesday"
	// FieldWednesday holds the string denoting the wednesday field in the database.
	FieldWednesday = "wednesday"
	// FieldThursday holds the string denoting the thursday field in the database.
	FieldThursday = "thursday"
	// FieldFriday holds the string denoting the friday field in the database.
	FieldFriday = "friday"
	// FieldSaturday holds the string denoting the saturday field in the database.
	FieldSaturday = "saturday"
	// FieldSunday holds the string denoting the sunday field in the database.
	FieldSunday = "sunday"
	// FieldMondayStartTime holds the string denoting the mondaystarttime field in the database.
	FieldMondayStartTime = "monday_start_time"
	// FieldMondayEndTime holds the string denoting the mondayendtime field in the database.
	FieldMondayEndTime = "monday_end_time"
	// FieldTuesdayStartTime holds the string denoting the tuesdaystarttime field in the database.
	FieldTuesdayStartTime = "tuesday_start_time"
	// FieldTuesdayEndTime holds the string denoting the tuesdayendtime field in the database.
	FieldTuesdayEndTime = "tuesday_end_time"
	// FieldWednesdayStartTime holds the string denoting the wednesdaystarttime field in the database.
	FieldWednesdayStartTime = "wednesday_start_time"
	// FieldWednesdayEndTime holds the string denoting the wednesdayendtime field in the database.
	FieldWednesdayEndTime = "wednesday_end_time"
	// FieldThursdayStartTime holds the string denoting the thursdaystarttime field in the database.
	FieldThursdayStartTime = "thursday_start_time"
	// FieldThursdayEndTime holds the string denoting the thursdayendtime field in the database.
	FieldThursdayEndTime = "thursday_end_time"
	// FieldFridayStartTime holds the string denoting the fridaystarttime field in the database.
	FieldFridayStartTime = "friday_start_time"
	// FieldFridayEndTime holds the string denoting the fridayendtime field in the database.
	FieldFridayEndTime = "friday_end_time"
	// FieldSaturdayStartTime holds the string denoting the saturdaystarttime field in the database.
	FieldSaturdayStartTime = "saturday_start_time"
	// FieldSaturdayEndTime holds the string denoting the saturdayendtime field in the database.
	FieldSaturdayEndTime = "saturday_end_time"
	// FieldSundayStartTime holds the string denoting the sundaystarttime field in the database.
	FieldSundayStartTime = "sunday_start_time"
	// FieldSundayEndTime holds the string denoting the sundayendtime field in the database.
	FieldSundayEndTime = "sunday_end_time"
	// EdgeTodo holds the string denoting the todo edge name in mutations.
	EdgeTodo = "todo"
	// EdgeAttendance holds the string denoting the attendance edge name in mutations.
	EdgeAttendance = "attendance"
	// EdgePost holds the string denoting the post edge name in mutations.
	EdgePost = "post"
	// EdgeOwnedBy holds the string denoting the ownedby edge name in mutations.
	EdgeOwnedBy = "ownedBy"
	// EdgeJoinedBy holds the string denoting the joinedby edge name in mutations.
	EdgeJoinedBy = "joinedBy"
	// Table holds the table name of the entcourse in the database.
	Table = "ent_courses"
	// TodoTable is the table that holds the todo relation/edge.
	TodoTable = "ent_todos"
	// TodoInverseTable is the table name for the EntTodo entity.
	// It exists in this package in order to avoid circular dependency with the "enttodo" package.
	TodoInverseTable = "ent_todos"
	// TodoColumn is the table column denoting the todo relation/edge.
	TodoColumn = "ent_course_todo"
	// AttendanceTable is the table that holds the attendance relation/edge.
	AttendanceTable = "ent_attendances"
	// AttendanceInverseTable is the table name for the EntAttendance entity.
	// It exists in this package in order to avoid circular dependency with the "entattendance" package.
	AttendanceInverseTable = "ent_attendances"
	// AttendanceColumn is the table column denoting the attendance relation/edge.
	AttendanceColumn = "ent_course_attendance"
	// PostTable is the table that holds the post relation/edge.
	PostTable = "ent_posts"
	// PostInverseTable is the table name for the EntPost entity.
	// It exists in this package in order to avoid circular dependency with the "entpost" package.
	PostInverseTable = "ent_posts"
	// PostColumn is the table column denoting the post relation/edge.
	PostColumn = "ent_course_post"
	// OwnedByTable is the table that holds the ownedBy relation/edge. The primary key declared below.
	OwnedByTable = "ent_user_course"
	// OwnedByInverseTable is the table name for the EntUser entity.
	// It exists in this package in order to avoid circular dependency with the "entuser" package.
	OwnedByInverseTable = "ent_users"
	// JoinedByTable is the table that holds the joinedBy relation/edge. The primary key declared below.
	JoinedByTable = "ent_user_join"
	// JoinedByInverseTable is the table name for the EntUser entity.
	// It exists in this package in order to avoid circular dependency with the "entuser" package.
	JoinedByInverseTable = "ent_users"
)

// Columns holds all SQL columns for entcourse fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldName,
	FieldCourseUrl,
	FieldPaymentMethod,
	FieldPaymentAmount,
	FieldStartDate,
	FieldEndDate,
	FieldMonday,
	FieldTuesday,
	FieldWednesday,
	FieldThursday,
	FieldFriday,
	FieldSaturday,
	FieldSunday,
	FieldMondayStartTime,
	FieldMondayEndTime,
	FieldTuesdayStartTime,
	FieldTuesdayEndTime,
	FieldWednesdayStartTime,
	FieldWednesdayEndTime,
	FieldThursdayStartTime,
	FieldThursdayEndTime,
	FieldFridayStartTime,
	FieldFridayEndTime,
	FieldSaturdayStartTime,
	FieldSaturdayEndTime,
	FieldSundayStartTime,
	FieldSundayEndTime,
}

var (
	// OwnedByPrimaryKey and OwnedByColumn2 are the table columns denoting the
	// primary key for the ownedBy relation (M2M).
	OwnedByPrimaryKey = []string{"ent_user_id", "ent_course_id"}
	// JoinedByPrimaryKey and JoinedByColumn2 are the table columns denoting the
	// primary key for the joinedBy relation (M2M).
	JoinedByPrimaryKey = []string{"ent_user_id", "ent_course_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "createdAt" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updatedAt" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updatedAt" field.
	UpdateDefaultUpdatedAt func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// CourseUrlValidator is a validator for the "courseUrl" field. It is called by the builders before save.
	CourseUrlValidator func(string) error
	// PaymentAmountValidator is a validator for the "paymentAmount" field. It is called by the builders before save.
	PaymentAmountValidator func(float64) error
	// DefaultMonday holds the default value on creation for the "monday" field.
	DefaultMonday bool
	// DefaultTuesday holds the default value on creation for the "tuesday" field.
	DefaultTuesday bool
	// DefaultWednesday holds the default value on creation for the "wednesday" field.
	DefaultWednesday bool
	// DefaultThursday holds the default value on creation for the "thursday" field.
	DefaultThursday bool
	// DefaultFriday holds the default value on creation for the "friday" field.
	DefaultFriday bool
	// DefaultSaturday holds the default value on creation for the "saturday" field.
	DefaultSaturday bool
	// DefaultSunday holds the default value on creation for the "sunday" field.
	DefaultSunday bool
)

// PaymentMethod defines the type for the "paymentMethod" enum field.
type PaymentMethod string

// PaymentMethod values.
const (
	PaymentMethodTimes PaymentMethod = "TIMES"
	PaymentMethodHours PaymentMethod = "HOURS"
)

func (pm PaymentMethod) String() string {
	return string(pm)
}

// PaymentMethodValidator is a validator for the "paymentMethod" field enum values. It is called by the builders before save.
func PaymentMethodValidator(pm PaymentMethod) error {
	switch pm {
	case PaymentMethodTimes, PaymentMethodHours:
		return nil
	default:
		return fmt.Errorf("entcourse: invalid enum value for paymentMethod field: %q", pm)
	}
}
